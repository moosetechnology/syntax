******************************************************************************
*                                S Y N T A X
*-----------------------------------------------------------------------------
*   Copyright (C) 1972-2023 INRIA (Institut National de Recherche en
*   Informatique et Automatique)
*-----------------------------------------------------------------------------
*   URL: http://sourcesup.renater.fr/projects/syntax
*-----------------------------------------------------------------------------
*   The source code of SYNTAX is distributed with two different licenses,
*   depending on the files:
*   - The recursive content of src/ and incl/ and the non-recursive content
*     of SYNTAX's root directory are distributed under the CeCILL-C license
*   - The recursive content of all other repertories is distributed under
*     the CeCILL license
*   All code produced by SYNTAX must be considered as being under the
*   CeCILL-C license. Information about the CeCILL and CeCILL-C licenses
*   can be found at, e.g., http://www.cecill.info
*****************************************************************************

*
* This grammar of FORTRAN 77 is based upon the ANSI standard syntax charts
* Annex F of https://nvlpubs.nist.gov/nistpubs/Legacy/FIPS/fipspub69-1.pdf
*

*******************************************************************************

* The following declarations define the synthesized attributes

$LIST( <common_body>, <,common_body>, <0:F77>, <1:executable_program>, <1a:executable_program_list>, <2:main_program>, <2a:end_statement>, <2c:statement_list>, <2d:labeled_statement>, <2e:statement>, <3:function_subprogram>, <4:subroutine_subprogram>, <5:block_data_subprogram>, <6:other_specification_statement>, <7:executable_statement>, <8:program_statement>, <9:entry_statement>, <10:function_statement>, <10b:scalar_type>, <10d:function_header>, <10a:type>, <12:subroutine_statement>, <12a:subroutine_header>, <12b:subroutine_parameter_list>, <12c:subroutine_parameter>, <13:function_or_subroutine_entry>, <14:block_data_statement>, <15:dimension_statement>, <16:array_declarator>, <16a:array_declarator_list>, <16b:dimension_declarator_list>, <16c:dimension_declarator>, <16d:last_dimension_declarator>, <16e:last_upper_dimension_bound>, <17:equivalence_statement>, <18:equiv_entity>, <18a:equiv_list>, <18b:equiv>, <18c:equiv_entity_list>, <19:common_statement>, <19a:common_body_list>, <19b:common_part>, <20:type_statement>, <20a:scalar_name_list>, <20b:scalar_name>, <20c:character_name_list>, <20d:character_name>, <21:implicit_statement>, <21a:implicit_body_list>, <21b:implicit_body>, <21c:implicit_elem_list>, <21d:implicit_elem>, <22:len_specification>, <23:parameter_statement>, <23a:assign_list>, <23b:assign>, <24:external_statement>, <25:intrinsic_statement>, <26:save_statement>, <26a:save_statement_name_list>, <26b:save_statement_name>, <27:data_statement>, <27a:data_statement_body_list>, <27b:data_statement_body>, <27c:data_statement_name_list>, <27d:data_statement_name>, <27e:data_statement_constant_list>, <27f:data_statement_constant>, <28:data_imply_do_list>, <28a:data_imply_do_list_head_list>, <28b:data_imply_do_list_head>, <29:assignment_statement>, <29a:left_hand_side>, <30:goto_statement>, <31:unconditional_goto>, <32:computed_goto>, <33:assigned_goto>, <34:arithmetic_if_statement>, <42:stop_statement>, <43:pause_statement>, <44:write_statement>, <45:read_statement>, <46:print_statement>, <47:control_info_list>, <47a:control_info_elem>, <47b:control_info_elem_list>, <48:io_list>, <49:io_imply_do_list>, <53:backspace_statement>, <53a:backspace_or_endfile_or_rewind_info_elem_list>, <53b:backspace_or_endfile_or_rewind_info_elem>, <55:rewind_statement>, <56:unit_identifier>, <57:format_identifier>, <58:format_statement>, <59:format_specification>, <60:fmt_specification>, <60a:fmt_spec_list>, <60b:fmt_spec_list_/:>, <60c:fmt_spec>, <60d:fmt_spec_/:>, <60e:repeatable_edit_descriptor>, <60g:float_editing>, <60h:nonrepeatable_edit_descriptor>, <65:c>,<68:k>, <70:statement_function_statement>, <71:call_statement>, <71a:actual_argument_list>, <71b:actual_argument>, <72:return_statement>, <74:expression>, <74a:non_typed_expression>, <76:arithmetic_expression>, <77:integer_expr>, <80:int_constant_expr>, <80a:int_constant_expr>, <81:dim_bound_expr>, <82a:character_or_non_typed_expression>, <88:array_element_name>, <88a:variable_or_array_element_name>, <88b:function_reference_or_array_element_name>, <89:substring_name>, <99a:symbolic_name_list>, <110a:label_ref_list>) 
: SXML_TYPE_LIST ;

$NAME( <60f:/:>, <61:repeat_spec>, <61a:[repeat_spec]>, <62:w>, <63:e>, <64:n>, <65:c>, <66:d>, <67:m>, <99:symbolic_name>, <102:unsigned_int_constant>, <103:nonzero_unsigned_int_constant>, <109:character_constant>, <110:label>, <110b:label_ref>, <114:sign>, <108:logical_constant>) : SXML_TYPE_TEXT; /* i.e., character string */

*------------------------------------------------------------------------------

$
decl =

#include "sxml.h"
#include "sjson.h"
#include "sast.h"
SXML_TYPE_LIST ROOT;

extern SXBOOLEAN is_json; /* declared in "f77_main.c" */
extern SXBOOLEAN is_indent; /* declared in "f77_main.c" */
extern char *json_indent_command; /* declared in "f77_main.c" */
extern FILE *json_pipe; /* declared in "f77_analyse.c" */
SXBOOLEAN pclose_needed;

#define TODO(N) SXML_T("{\"TODO-" #N "\":null}\n")

#define LOCATION(N) ast_start_location( \
	   sxcurrent_parsed_line (N),\
           sxcurrent_parsed_column (N) )

#define ENDING_LOCATION(N,STRING) ast_end_location( \
	   sxcurrent_parsed_line (N),\
           sxcurrent_parsed_column (N),\
	   STRING)

*------------------------------------------------------------------------------

$
open =
	{
		if (is_json == SXFALSE) {
		  /* no JSON output will be emitted */
		  json_pipe = fopen ("/dev/null", "w");
		  pclose_needed = SXFALSE;
		} else if (is_indent == SXFALSE) {
		  /* non-indented JSON output will be emitted */
		  json_pipe = stdout;
		  pclose_needed = SXFALSE;
		} else {
		  /* indented JSON output will be emitted, if possible */
		  json_pipe = popen (json_indent_command, "w");
		  if (json_pipe != NULL) {
		     pclose_needed = SXTRUE;
		  } else {
		     /* indenting is impossible */
		     json_pipe = stdout;
		     pclose_needed = SXFALSE;
		  }
		}
		/* beginning of table of comments */
		fprintf (json_pipe, "{\n\"tag\":\"fortran_file\",\n\"comments\":\n{");
	}

*------------------------------------------------------------------------------

$
close =
	{
		/* ending the table of comments */
		fprintf (json_pipe, "\n},\n");
		SXML_PRINT (json_pipe, ROOT);
		fprintf (json_pipe, "}\n");
		if (pclose_needed) {
			pclose (json_pipe);
		}
	}

$

*******************************************************************************

<0:F77>		= <1a:executable_program_list> ;

$LIST(<0:F77>)

{
  $LIST(<0:F77>) = ast_program_file(
    sxcurrent_parsed_file_name (0),
    $LIST(<1a:executable_program_list>) );

  ROOT = $LIST(<0:F77>);
}

*------------------------------------------------------------------------------

* ENTRY POINT USED BY THE LOOK-AHEAD MECANISM

*<0:F77>	= !DO  =  <78:int_real_dp_expr> , ;
* (pb) : changed by
<0:F77>		= !DO  <110b:label_ref>  <99:symbolic_name>  =  <40b:do_parameters> ;

$LIST(<0:F77>)

{
  fprintf (stderr, "$LIST(<0:F77>) computed on zombie token !DO\n");
  $LIST(<0:F77>) = SXML_T ("zombie token !DO");
}
*------------------------------------------------------------------------------

* ENTRY POINT USED BY THE LOOK-AHEAD MECANISM

<0:F77>		= !FORMAT <59:format_specification> ;

$LIST(<0:F77>)

{
  fprintf (stderr, "$LIST(<0:F77>) computed on zombie token !FORMAT\n");
  $LIST(<0:F77>) = SXML_T ("zombie token !FORMAT");
}

*******************************************************************************

* An executable program must contain one and only one main program.
* An executable program may contain external procedures specified
* by means other than FORTAN.

<1:executable_program>
		= <2:main_program> %EOL ;

$LIST(<1:executable_program>)

{
  $LIST(<1:executable_program>) = $LIST(<2:main_program>);
}
	
*------------------------------------------------------------------------------

<1:executable_program>
		= <3:function_subprogram> %EOL ;

$LIST(<1:executable_program>)

{
  $LIST(<1:executable_program>) = $LIST(<3:function_subprogram>);
}

*------------------------------------------------------------------------------

<1:executable_program>
		= <4:subroutine_subprogram> %EOL ;

$LIST(<1:executable_program>)

{
  $LIST(<1:executable_program>) = $LIST(<4:subroutine_subprogram>);
}

*------------------------------------------------------------------------------

<1:executable_program>
		= <5:block_data_subprogram> %EOL ;

$LIST(<1:executable_program>)

{
  $LIST(<1:executable_program>) = $LIST(<5:block_data_subprogram>);
}


*******************************************************************************

<1a:executable_program_list>
		= <1a:executable_program_list>
		  <1:executable_program> ;

$LIST(<1a:executable_program_list>)

{
  $LIST(<1a:executable_program_list>) = SXML_LTL (
    $LIST(<1a:executable_program_list>'),
    ",\n",
    $LIST(<1:executable_program>) );
}


*------------------------------------------------------------------------------

<1a:executable_program_list>
		= <1:executable_program> ;

$LIST(<1a:executable_program_list>)
{
  $LIST(<1a:executable_program_list>) = SXML_L ($LIST(<1:executable_program>));
}

*******************************************************************************

* A main program may not contain an ENTRY or RETURN statement.

<2:main_program>
		= <8:program_statement> %EOL
		  <2a:end_statement> ;

$LIST(<2:main_program>)
{
  $LIST(<2:main_program>) = ast_program_unit(
    "main",
    $LIST (<8:program_statement>),
    LOCATION(0),
    $LIST( <2a:end_statement>),
    NULL );
}


*------------------------------------------------------------------------------

<2:main_program>
		= <2a:end_statement> ;

$LIST(<2:main_program>)
{
  $LIST(<2:main_program>) = ast_program_unit(
    "main",
    NULL,
    LOCATION(0),
    $LIST( <2a:end_statement>),
    NULL );
}


*------------------------------------------------------------------------------

<2:main_program>
		= <8:program_statement> %EOL
		  <2c:statement_list>
		  <2a:end_statement> ;

$LIST(<2:main_program>)
{
  $LIST(<2:main_program>) = ast_program_unit(
    "main",
    $LIST( <8:program_statement>),
    LOCATION(0),
    $LIST( <2a:end_statement>),
    $LIST(<2c:statement_list>) );
}


*------------------------------------------------------------------------------

<2:main_program>
		= <2c:statement_list>
		  <2a:end_statement> ;

$LIST(<2:main_program>)
{
  $LIST(<2:main_program>) = ast_program_unit(
    "main",
    NULL,
    LOCATION(0),
    $LIST( <2a:end_statement>),
    $LIST(<2c:statement_list>) );
}


*******************************************************************************

* An END statement is also an executable statement and must appear as the
* last statement of a program unit.

<2a:end_statement>
		= <110:label> END ;

$LIST(<2a:end_statement>)

{
  $LIST(<2a:end_statement>) = ENDING_LOCATION (0, "END");
}


*------------------------------------------------------------------------------

<2a:end_statement>
		= END ;

$LIST(<2a:end_statement>)

{
  $LIST(<2a:end_statement>) = ENDING_LOCATION (0, "END");
}


*******************************************************************************

<2c:statement_list>
		= <2c:statement_list>
		  <2d:labeled_statement> %EOL ;

$LIST(<2c:statement_list>)

{
  $LIST(<2c:statement_list>) = SXML_LTL (
    $LIST(<2c:statement_list>'),
    ",\n",
    $LIST( <2d:labeled_statement>) );
}

*------------------------------------------------------------------------------

<2c:statement_list>
		= <2d:labeled_statement> %EOL ;

$LIST(<2c:statement_list>)
{
  $LIST(<2c:statement_list>) = $LIST( <2d:labeled_statement>);
}

*******************************************************************************

<2d:labeled_statement>
		= <110:label> <2e:statement> ;

$LIST(<2d:labeled_statement>)
{
  $LIST(<2d:labeled_statement>) = ast_labeled_statement(
      $NAME(<110:label>),
      $LIST( <2e:statement>) );
}

*------------------------------------------------------------------------------

<2d:labeled_statement>
		= <110:label> <58:format_statement> ;

$LIST(<2d:labeled_statement>)
{
  $LIST(<2d:labeled_statement>) =  ast_labeled_statement(
      $NAME(<110:label>),
      ast_format_statement( $LIST( <58:format_statement>) ));
}

*------------------------------------------------------------------------------

<2d:labeled_statement>
		= <2e:statement> ;

$LIST(<2d:labeled_statement>)
{
  $LIST(<2d:labeled_statement>) = ast_labeled_statement(
    NULL,
    $LIST(<2e:statement>) );
}

*******************************************************************************

<2e:statement>	= <6:other_specification_statement> ;

$LIST(<2e:statement>)
{
  $LIST(<2e:statement>) = $LIST( <6:other_specification_statement>);
}

*------------------------------------------------------------------------------

<2e:statement>	= <7:executable_statement> ;

$LIST(<2e:statement>)
{
  $LIST(<2e:statement>) = $LIST( <7:executable_statement>);
}

*------------------------------------------------------------------------------

<2e:statement>	= <7a:other_executable_statement> ;

$LIST(<2e:statement>)
{
  $LIST(<2e:statement>) = ast_unknown_statement(
    "<2e>.3",
    LOCATION(0) );
}

*------------------------------------------------------------------------------

<2e:statement>	= <9:entry_statement> ;

$LIST(<2e:statement>)
{
  $LIST(<2e:statement>) = $LIST (<9:entry_statement>);
}

*------------------------------------------------------------------------------

<2e:statement>	= <21:implicit_statement> ;

$LIST(<2e:statement>)
{
  $LIST(<2e:statement>) = $LIST(<21:implicit_statement>);
}

*------------------------------------------------------------------------------

<2e:statement>	= <23:parameter_statement> ;

$LIST(<2e:statement>)
{
  $LIST(<2e:statement>) = $LIST(<23:parameter_statement>);
}

*------------------------------------------------------------------------------

<2e:statement>	= <27:data_statement> ;

$LIST(<2e:statement>)
{
  $LIST(<2e:statement>) = $LIST(<27:data_statement>);
}

*------------------------------------------------------------------------------

<2e:statement>	= <70:statement_function_statement> ;

$LIST(<2e:statement>)
{
  $LIST(<2e:statement>) = $LIST(<70:statement_function_statement>);
}

*******************************************************************************

<3:function_subprogram>
		= <10:function_statement> %EOL
		  <2a:end_statement> ;

$LIST(<3:function_subprogram>)
{
  $LIST(<3:function_subprogram>) = ast_program_unit(
    "function",
    $LIST( <10:function_statement>),
    LOCATION(0),
    $LIST( <2a:end_statement>),
    NULL );
}

*------------------------------------------------------------------------------

<3:function_subprogram>
		= <10:function_statement> %EOL
		  <2c:statement_list>
		  <2a:end_statement> ;

		  
$LIST(<3:function_subprogram>)

{
  $LIST(<3:function_subprogram>) = ast_program_unit(
    "function",
    $LIST( <10:function_statement>),
    LOCATION(0),
    $LIST( <2a:end_statement>),
    $LIST(<2c:statement_list>) );
}

*******************************************************************************

<4:subroutine_subprogram>
		= <12:subroutine_statement> %EOL
		  <2a:end_statement> ;
		  
$LIST(<4:subroutine_subprogram>)

{
  $LIST(<4:subroutine_subprogram>) = ast_program_unit(
    "subroutine",
    $LIST( <12:subroutine_statement>),
    LOCATION(0),
    $LIST( <2a:end_statement>),
    NULL );
}

*------------------------------------------------------------------------------

<4:subroutine_subprogram>
		= <12:subroutine_statement> %EOL
		  <2c:statement_list>
		  <2a:end_statement> ;

		  
$LIST(<4:subroutine_subprogram>)

{
  $LIST(<4:subroutine_subprogram>) = ast_program_unit(
    "subroutine",
    $LIST( <12:subroutine_statement>),
    LOCATION(0),
    $LIST( <2a:end_statement>),
    $LIST(<2c:statement_list>) );
}

*******************************************************************************

* A block data subprogram may contain only BLOCK DATA, IMPLICIT, PARAMETER,
* DIMENSION, COMMON, SAVE, EQUIVALENCE, DATA, END, and type_statements.

<5:block_data_subprogram>
		= <14:block_data_statement> %EOL
		  <2a:end_statement> ;

$LIST( <5:block_data_subprogram>)

{
  $LIST( <5:block_data_subprogram>) = ast_program_unit(
    "block_data",
    $LIST( <14:block_data_statement>),
    LOCATION(0),
    $LIST( <2a:end_statement>),
    NULL );
}      

*------------------------------------------------------------------------------

<5:block_data_subprogram>
		= <14:block_data_statement> %EOL
		  <2c:statement_list>
		  <2a:end_statement> ;

$LIST( <5:block_data_subprogram>)

{
  $LIST( <5:block_data_subprogram>) = ast_program_unit(
    "block_data",
    $LIST( <14:block_data_statement>),
    LOCATION(0),
    $LIST( <2a:end_statement>),
    $LIST( <2c:statement_list>) );
}      

*******************************************************************************

<6:other_specification_statement>
		= <15:dimension_statement> ;

$LIST(<6:other_specification_statement>)
{
  $LIST(<6:other_specification_statement>) = $LIST(<15:dimension_statement>);
}

*------------------------------------------------------------------------------

<6:other_specification_statement>
		= <17:equivalence_statement> ;

$LIST(<6:other_specification_statement>)
{
  $LIST(<6:other_specification_statement>) = $LIST(<17:equivalence_statement>);
}

*------------------------------------------------------------------------------

<6:other_specification_statement>
		= <19:common_statement> ;

$LIST(<6:other_specification_statement>)
{
  $LIST(<6:other_specification_statement>) = $LIST(<19:common_statement>);
}

*------------------------------------------------------------------------------

<6:other_specification_statement>
		= <20:type_statement> ;

$LIST(<6:other_specification_statement>)
{
  $LIST(<6:other_specification_statement>) = $LIST( <20:type_statement>);
}

*------------------------------------------------------------------------------

<6:other_specification_statement>
		= <24:external_statement> ;

$LIST(<6:other_specification_statement>)
{
  $LIST(<6:other_specification_statement>) = ast_external_statement(
    LOCATION(0),
    $LIST(<24:external_statement>)
  );
}

*------------------------------------------------------------------------------

<6:other_specification_statement>
		= <25:intrinsic_statement> ;

$LIST(<6:other_specification_statement>)
{
  $LIST(<6:other_specification_statement>) = ast_intrinsic_statement(
    LOCATION(0),
    $LIST(<25:intrinsic_statement>)
  );
}

*------------------------------------------------------------------------------

<6:other_specification_statement>
		= <26:save_statement> ;

$LIST(<6:other_specification_statement>)
{
  $LIST(<6:other_specification_statement>) = ast_save_statement(
    LOCATION(0),
    $LIST(<26:save_statement>) 
  );
}

*******************************************************************************

<7:executable_statement>
		= <29:assignment_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = $LIST(<29:assignment_statement>);
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <30:goto_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = $LIST(<30:goto_statement>);
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <34:arithmetic_if_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = $LIST(<34:arithmetic_if_statement>);
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <41:continue_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = ast_abstract_statement(
    "continue_statement",
    LOCATION(0) );
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <42:stop_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = ast_pause_stop_statement(
    "stop_statement",
    $LIST( <42:stop_statement>),
    LOCATION(0) );
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <43:pause_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = ast_pause_stop_statement(
    "pause_statement",
    $LIST( <43:pause_statement>),
    LOCATION(0) );
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <44:write_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = $LIST(<44:write_statement>);
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <45:read_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = $LIST(<45:read_statement>);
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <46:print_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = $LIST(<46:print_statement>);
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <55:rewind_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = $LIST(<55:rewind_statement>);
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <53:backspace_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = $LIST(<53:backspace_statement>);
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <54:endfile_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = ast_unknown_statement(
    "<7>.12",
    LOCATION(0) );
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <50:open_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = ast_unknown_statement(
    "<7>.13",
    LOCATION(0) );
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <51:close_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = ast_unknown_statement(
    "<7>.14",
    LOCATION(0) );
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <52:inquire_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = ast_unknown_statement(
    "<7>.15",
    LOCATION(0) );
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <71:call_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = $LIST (<71:call_statement>);
}

*------------------------------------------------------------------------------

<7:executable_statement>
		= <72:return_statement> ;

$LIST(<7:executable_statement>)
{
  $LIST(<7:executable_statement>) = ast_abstract_statement(
    "return_statement",
    LOCATION(0) );
}

*******************************************************************************

* Used in a structured way from <35:logical_if_statement>
*<7a:other_executable_statement>
*		= <37:else_if_statement> ;
*<7a:other_executable_statement>
*		= <38:else_statement> ;
*<7a:other_executable_statement>
*		= <39:end_if_statement> ;

<7a:other_executable_statement>
		= <35:logical_if_statement> ;

*------------------------------------------------------------------------------

<7a:other_executable_statement>
		= <36:block_if_statement> ;

*------------------------------------------------------------------------------

<7a:other_executable_statement>
		= <40a:do_loop> ;

*******************************************************************************

<8:program_statement>
		= PROGRAM  <99:symbolic_name> ;

$LIST(<8:program_statement>)
{
  $LIST(<8:program_statement>) = ast_program_unit_header (
    $NAME( <99:symbolic_name>),
    NULL);
}


*******************************************************************************

<9:entry_statement>
		= <13:function_or_subroutine_entry> ;

$LIST( <9:entry_statement>)
{
  $LIST( <9:entry_statement>) = $LIST( <13:function_or_subroutine_entry>);
}

*******************************************************************************

<10:function_statement>
		= <10a:type>  FUNCTION  <10d:function_header> ;

$LIST(<10:function_statement>)
{
  $LIST(<10:function_statement>) = ast_add_return_type(
    $LIST( <10d:function_header>),
    $LIST( <10a:type>) );
}

*------------------------------------------------------------------------------

<10:function_statement>
		= FUNCTION  <10d:function_header> ;


$LIST(<10:function_statement>)
{
  $LIST(<10:function_statement>) = $LIST( <10d:function_header>);
}

*******************************************************************************

<10a:type>	= <10b:scalar_type> ;
* Non standard ANSI

$LIST( <10a:type>)
{
  $LIST( <10a:type>) = ast_type_reference(
      $LIST( <10b:scalar_type>),
      NULL);
}

*------------------------------------------------------------------------------

<10a:type>	= <10b:scalar_type> * @0 <22:len_specification> ;

$LIST( <10a:type>)
{
  $LIST( <10a:type>) = ast_type_reference(
      $LIST( <10b:scalar_type>),
      $LIST(<22:len_specification>));
}

*------------------------------------------------------------------------------

<10a:type>	= CHARACTER ;

$LIST( <10a:type>)
{
  $LIST( <10a:type>) = ast_type_reference(
      SXML_T("CHARACTER"),
      NULL );
}

*------------------------------------------------------------------------------

<10a:type>	= CHARACTER  * <22:len_specification> ;

$LIST( <10a:type>)
{
  $LIST( <10a:type>) = ast_type_reference(
      SXML_T("CHARACTER"),
      $LIST(<22:len_specification>));
}

*******************************************************************************

<10b:scalar_type>
		= INTEGER ;

$LIST( <10b:scalar_type>)
{
  $LIST( <10b:scalar_type>) = SXML_T("INTEGER");
}

*------------------------------------------------------------------------------

<10b:scalar_type>
		= REAL ;

$LIST( <10b:scalar_type>)
{
  $LIST( <10b:scalar_type>) = SXML_T("REAL");
}

*------------------------------------------------------------------------------

<10b:scalar_type>
		= DOUBLE  PRECISION ;

$LIST( <10b:scalar_type>)
{
  $LIST( <10b:scalar_type>) = SXML_T("DOUBLE PRECISION");
}

*------------------------------------------------------------------------------

<10b:scalar_type>
		= COMPLEX ;

$LIST( <10b:scalar_type>)
{
  $LIST( <10b:scalar_type>) = SXML_T("COMPLEX");
}

*------------------------------------------------------------------------------

<10b:scalar_type>
		= LOGICAL ;

$LIST( <10b:scalar_type>)
{
  $LIST( <10b:scalar_type>) = SXML_T("LOGICAL");
}

*******************************************************************************

<10d:function_header>
		= <99:symbolic_name>  ( ) ;

$LIST(<10d:function_header>)

{
  $LIST(<10d:function_header>) = ast_program_unit_header(
    $NAME(<99:symbolic_name>),
    NULL );
}

*------------------------------------------------------------------------------

<10d:function_header>
		= <99:symbolic_name>  ( <99a:symbolic_name_list> ) ;

$LIST(<10d:function_header>)
{
  $LIST(<10d:function_header>) = ast_program_unit_header(
    $NAME(<99:symbolic_name>),
    $LIST( <99a:symbolic_name_list>) );
}

*******************************************************************************

* Covered by <13:function_or_subroutine_entry>
*<11:function_entry>
*		= ENTRY  <99:symbolic_name> ;
*<11:function_entry>
*
*		= ENTRY  <99:symbolic_name>  ( ) ;
*<11:function_entry>
*		= ENTRY  <99:symbolic_name>  ( <99a:symbolic_name_list> ) ;

*******************************************************************************

<12:subroutine_statement>
		= SUBROUTINE  <12a:subroutine_header> ;

$LIST(<12:subroutine_statement>)
{
  $LIST(<12:subroutine_statement>) = $LIST(<12a:subroutine_header>);
}

*******************************************************************************

<12a:subroutine_header>
		= <99:symbolic_name> ;

$LIST(<12a:subroutine_header>)
{
  $LIST(<12a:subroutine_header>) = ast_program_unit_header(
    $NAME(<99:symbolic_name>),
    NULL );
}

*------------------------------------------------------------------------------

<12a:subroutine_header>
		= <99:symbolic_name>  ( ) ;

$LIST(<12a:subroutine_header>)
{
  $LIST(<12a:subroutine_header>) = ast_program_unit_header(
    $NAME(<99:symbolic_name>),
    NULL );
}

*------------------------------------------------------------------------------

<12a:subroutine_header>
		= <99:symbolic_name>  ( <12b:subroutine_parameter_list> ) ;

$LIST(<12a:subroutine_header>)
{
  $LIST(<12a:subroutine_header>) = ast_program_unit_header(
    $NAME(<99:symbolic_name>),
    $LIST (<12b:subroutine_parameter_list> ) );
}

*******************************************************************************

<12b:subroutine_parameter_list>
		= <12b:subroutine_parameter_list> ,  <12c:subroutine_parameter> ;

$LIST(<12b:subroutine_parameter_list>)
{
  $LIST(<12b:subroutine_parameter_list>) = SXML_LTL(
    $LIST( <12b:subroutine_parameter_list>'),
    ",\n",
    $LIST( <12c:subroutine_parameter>) );
}

*------------------------------------------------------------------------------

<12b:subroutine_parameter_list>
		= <12c:subroutine_parameter> ;

$LIST( <12b:subroutine_parameter_list>)
{
  $LIST( <12b:subroutine_parameter_list>) = $LIST(<12c:subroutine_parameter>);
}

*******************************************************************************

<12c:subroutine_parameter>
		= <99:symbolic_name> ;

$LIST( <12c:subroutine_parameter>)
{
  $LIST( <12c:subroutine_parameter>) = SXML_T( SXML_Q( $NAME (<99:symbolic_name>)) );
}

*------------------------------------------------------------------------------

<12c:subroutine_parameter>
		= * ;

$LIST( <12c:subroutine_parameter>)
{
  $LIST( <12c:subroutine_parameter>) = SXML_T( "\"*\"");
}

*******************************************************************************

<13:function_or_subroutine_entry>
		= ENTRY  <12a:subroutine_header> ;

$LIST( <13:function_or_subroutine_entry>)
{
  $LIST( <13:function_or_subroutine_entry>) = SXML_LL(
    $LIST( <12a:subroutine_header>),
    ast_abstract_statement(
      "entry_statement",
      LOCATION(0)) );
}

*******************************************************************************

<14:block_data_statement>
		= BLOCK  DATA ;

$LIST( <14:block_data_statement>)
{
  $LIST( <14:block_data_statement>) = NULL;
}    

*------------------------------------------------------------------------------

<14:block_data_statement>
		= BLOCK  DATA  <99:symbolic_name> ;

$LIST( <14:block_data_statement>)
{
  $LIST( <14:block_data_statement>) = ast_name( $NAME( <99:symbolic_name>));
}    

*******************************************************************************

<15:dimension_statement>
		= DIMENSION  <16a:array_declarator_list> ;

$LIST( <15:dimension_statement>)
{
  $LIST( <15:dimension_statement>) = ast_dimension_statement(
    LOCATION(0),
    $LIST(<16a:array_declarator_list>)
    );
}    

*******************************************************************************

* Only a dummy array declarator (5.1.2.2) may contain an asterik.

<16:array_declarator>
		= <99:symbolic_name>  ( <16b:dimension_declarator_list> ) ;

$LIST( <16:array_declarator>)
{
 $LIST( <16:array_declarator>) = ast_variable_declarator(
    $NAME( <99:symbolic_name>),
    $LIST( <16b:dimension_declarator_list>) );
}

*******************************************************************************

<16a:array_declarator_list>
		= <16a:array_declarator_list> ,  <16:array_declarator> ;

$LIST( <16a:array_declarator_list>)
{
  $LIST( <16a:array_declarator_list>) = SXML_LTL(
    $LIST( <16a:array_declarator_list>'),
    ",\n",
    $LIST( <16:array_declarator>) );
}

*------------------------------------------------------------------------------

<16a:array_declarator_list>
		= <16:array_declarator> ;

$LIST( <16a:array_declarator_list>)
{
  $LIST( <16a:array_declarator_list>) = $LIST( <16:array_declarator>);
}

*******************************************************************************

* The maximum number of dimensions is seven.
*** Why the order is inversed here ?

<16b:dimension_declarator_list>
		= <16c:dimension_declarator> ,  <16b:dimension_declarator_list> ;

$LIST( <16b:dimension_declarator_list>)
{
  $LIST( <16b:dimension_declarator_list>) = SXML_LTL(
    $LIST( <16c:dimension_declarator>),
    ",\n",
    $LIST( <16b:dimension_declarator_list>') );
}

*------------------------------------------------------------------------------

<16b:dimension_declarator_list>
		= <16d:last_dimension_declarator> ;

$LIST( <16b:dimension_declarator_list>)
{
  $LIST( <16b:dimension_declarator_list>) =
    $LIST( <16d:last_dimension_declarator>);
}

*******************************************************************************

<16c:dimension_declarator>
		= <81:dim_bound_expr>  :  <81:dim_bound_expr> ;

$LIST( <16c:dimension_declarator>)
{
  $LIST( <16c:dimension_declarator>) = ast_lower_upper_bound(
    $LIST( <81:dim_bound_expr>),
    $LIST( <81:dim_bound_expr>') );
}

*------------------------------------------------------------------------------

<16c:dimension_declarator>
		= <81:dim_bound_expr> ;

$LIST( <16c:dimension_declarator>)
{
  $LIST( <16c:dimension_declarator>) = ast_lower_upper_bound(
    $LIST( <81:dim_bound_expr>),
    NULL );
}

*******************************************************************************

<16d:last_dimension_declarator>
		= <81:dim_bound_expr>  :  <16e:last_upper_dimension_bound> ;

$LIST( <16d:last_dimension_declarator>)
{
  $LIST( <16d:last_dimension_declarator>) = ast_lower_upper_bound(
    $LIST( <81:dim_bound_expr>),
    $LIST( <16e:last_upper_dimension_bound>) );
}

*------------------------------------------------------------------------------

<16d:last_dimension_declarator>
		= <16e:last_upper_dimension_bound> ;

$LIST( <16d:last_dimension_declarator>)
{
  $LIST( <16d:last_dimension_declarator>) = $LIST( <16e:last_upper_dimension_bound>);
}

*******************************************************************************

<16e:last_upper_dimension_bound>
		= <81:dim_bound_expr> ;

$LIST( <16e:last_upper_dimension_bound>)
{
  $LIST( <16e:last_upper_dimension_bound>) =
    $LIST( <81:dim_bound_expr>);
}

*------------------------------------------------------------------------------

<16e:last_upper_dimension_bound>
		= * ;

$LIST( <16e:last_upper_dimension_bound>)
{
  $LIST( <16e:last_upper_dimension_bound>) =
    ast_literal_expression( "*");
}

*******************************************************************************

<17:equivalence_statement>
		= EQUIVALENCE  <18a:equiv_list> ;

$LIST( <17:equivalence_statement>)
{
  $LIST( <17:equivalence_statement>) = ast_equivalence_statement(
    LOCATION(0),
    $LIST(<18a:equiv_list>)
  );
}    

*******************************************************************************

* A subscript or substring expression in an EQUIVALENCE statement must be an
* integer constant expression.

<18:equiv_entity>
		= <99:symbolic_name> ;

$LIST( <18:equiv_entity>)
{
  $LIST( <18:equiv_entity>) = SXML_T(SXML_Q($NAME(<99:symbolic_name>)));
}        

*------------------------------------------------------------------------------

<18:equiv_entity>
		= <88b:function_reference_or_array_element_name> ;

$LIST( <18:equiv_entity>)
{
  $LIST( <18:equiv_entity>) = ast_unknown_parameter("<18>.2",LOCATION(0));
}    

*------------------------------------------------------------------------------

<18:equiv_entity>
		= <89:substring_name> ;

$LIST( <18:equiv_entity>)
{
  $LIST( <18:equiv_entity>) = ast_unknown_parameter("<18>.3",LOCATION(0));
}    

*******************************************************************************

<18a:equiv_list>
		= <18a:equiv_list> ,  <18b:equiv> ;

$LIST( <18a:equiv_list>)
{
  $LIST( <18a:equiv_list>) = SXML_LTL(
    $LIST(<18a:equiv_list>'),
    ",",
    $LIST(<18b:equiv>)
  );
}    

*------------------------------------------------------------------------------

<18a:equiv_list>
		= <18b:equiv> ;

$LIST( <18a:equiv_list>)
{
  $LIST( <18a:equiv_list>) = $LIST(<18b:equiv>);
}    

*******************************************************************************

<18b:equiv>	= ( <18c:equiv_entity_list> ) ;

$LIST( <18b:equiv>)
{
  $LIST( <18b:equiv>) = ast_equiv_entity_list($LIST(<18c:equiv_entity_list>));
}

*******************************************************************************

<18c:equiv_entity_list>
		= <18c:equiv_entity_list> ,  <18:equiv_entity> ;

$LIST( <18c:equiv_entity_list>)
{
  $LIST( <18c:equiv_entity_list>) = SXML_LTL(
    $LIST(<18c:equiv_entity_list>'),
    ",",
    $LIST(<18:equiv_entity>)
  );
}

*------------------------------------------------------------------------------

<18c:equiv_entity_list>
		= <18:equiv_entity> ;

$LIST( <18c:equiv_entity_list>)
{
  $LIST( <18c:equiv_entity_list>) = $LIST(<18:equiv_entity>);
}    

*******************************************************************************

<19:common_statement>
		= COMMON   <19a:common_body_list> ;

$LIST( <19:common_statement>)
{
  $LIST( <19:common_statement>) = ast_common_statement(
    LOCATION(0),
    $LIST(<19a:common_body_list>)
  );
}    

*******************************************************************************

*<19a:common_body_list>
*		= <19a:common_body_list> ,  <19b:common_part> ;
*<19a:common_body_list>
*		= <19b:common_part> ;
*<19a:common_body_list>
*		= <20a:scalar_name_list> ;

<19a:common_body_list>
		= <19a:common_body_list>  <,common_body> ;

$LIST( <19a:common_body_list>)
{
  $LIST( <19a:common_body_list>) = SXML_LTL(
    $LIST(<19a:common_body_list>'),
    ",",
    $LIST(<,common_body>)
  );
}    

*------------------------------------------------------------------------------

<19a:common_body_list>
		= <common_body> ;

$LIST( <19a:common_body_list>)
{
  $LIST( <19a:common_body_list>) = $LIST(<common_body>);
}    

*******************************************************************************

<,common_body>	= ,  <common_body> ;

$LIST( <,common_body>)
{
  $LIST( <,common_body>) = $LIST(<common_body>);
}

*------------------------------------------------------------------------------

* Optional ',' in the <19b:common_part> case

<,common_body>	= <19b:common_part> ;

$LIST( <,common_body>)
{
  $LIST( <,common_body>) = $LIST(<19b:common_part>);
}

*******************************************************************************

<common_body>	= <19b:common_part> ;

$LIST( <common_body>)
{
  $LIST( <common_body>) = $LIST(<19b:common_part>);
}

*------------------------------------------------------------------------------

<common_body>	= <20b:scalar_name> ;

$LIST( <common_body>)
{
  $LIST( <common_body>) = ast_common_body(
    NULL, 
    $LIST(<20b:scalar_name>)
  );
}

*******************************************************************************

*<19b:common_part>
*		= / <99:symbolic_name> /  <20a:scalar_name_list> , ;
*<19b:common_part>
*		= / <99:symbolic_name> /  <20a:scalar_name_list> ;
*<19b:common_part>
*		= / /  <20a:scalar_name_list> , ;
*<19b:common_part>
*		= / /  <20a:scalar_name_list> ;

<19b:common_part>
		= / <99:symbolic_name> /  <20b:scalar_name> ;

$LIST( <19b:common_part>)
{
  $LIST( <19b:common_part>) = ast_common_body(
    $NAME(<99:symbolic_name>), 
    $LIST(<20b:scalar_name>)
  );
}    

*------------------------------------------------------------------------------

* Voir ci-dessous le commentaire de la regle <60f:/:>. La situation est
* similaire ici. On a mis '//' à la place de '/'  '/' car on peut ne pas 
* avoir de <99:symbolic_name>.

<19b:common_part>
		= // <20b:scalar_name> ;

$LIST( <19b:common_part>)
{
  $LIST( <19b:common_part>) = ast_common_body(
    NULL, 
    $LIST(<20b:scalar_name>)
  );
}    

*******************************************************************************

<20:type_statement>
		= <10b:scalar_type>  <20a:scalar_name_list> ;
* Non standard ANSI

$LIST(<20:type_statement>)
{
  $LIST(<20:type_statement>) = ast_type_statement(
    ast_type_reference(
      $LIST (<10b:scalar_type>),
      NULL ),
    LOCATION(0), 
    $LIST( <20a:scalar_name_list>));

}

*------------------------------------------------------------------------------

<20:type_statement>
		= <10b:scalar_type> * @0 <22:len_specification>  <20a:scalar_name_list> ;
* Non standard ANSI

$LIST(<20:type_statement>)
{
  $LIST(<20:type_statement>) = ast_type_statement(
    ast_type_reference(
      $LIST( <10b:scalar_type>),
      $LIST( <22:len_specification>)),
    LOCATION(0), 
    $LIST( <20a:scalar_name_list>));

}

*------------------------------------------------------------------------------

<20:type_statement>
		= <10b:scalar_type> * @0 <22:len_specification> ,  <20a:scalar_name_list> ;

$LIST(<20:type_statement>)
{
  $LIST(<20:type_statement>) = ast_type_statement(
    ast_type_reference(
      $LIST(<10b:scalar_type>),
      $LIST( <22:len_specification>)),
    LOCATION(0), 
    $LIST( <20a:scalar_name_list>));

}

*------------------------------------------------------------------------------

<20:type_statement>
		= CHARACTER  <20c:character_name_list> ;

$LIST(<20:type_statement>)
{
  $LIST(<20:type_statement>) = ast_type_statement(
    ast_type_reference( SXML_T("CHARACTER"), NULL),
    LOCATION(0), 
    $LIST( <20c:character_name_list>));
}

*------------------------------------------------------------------------------

<20:type_statement>
		= CHARACTER * <22:len_specification>  <20c:character_name_list> ;

$LIST(<20:type_statement>)
{
  $LIST(<20:type_statement>) = ast_type_statement(
    ast_type_reference(
      SXML_T("CHARACTER"),
      $LIST(<22:len_specification>)),
    LOCATION(0), 
    $LIST( <20c:character_name_list>));
}

*------------------------------------------------------------------------------

<20:type_statement>
		= CHARACTER * <22:len_specification> ,  <20c:character_name_list> ;

$LIST(<20:type_statement>)
{
  $LIST(<20:type_statement>) = ast_type_statement(
    ast_type_reference(
      SXML_T("CHARACTER"),
      $LIST(<22:len_specification>)),
    LOCATION(0), 
    $LIST( <20c:character_name_list>));
}

*******************************************************************************

<20a:scalar_name_list>
		= <20a:scalar_name_list> ,  <20b:scalar_name> ;

$LIST( <20a:scalar_name_list>)
{
  $LIST(<20a:scalar_name_list>) = SXML_LTL (
    $LIST(<20a:scalar_name_list>'),
    ",",
    $LIST(<20b:scalar_name>));
}

*------------------------------------------------------------------------------

<20a:scalar_name_list>
		= <20b:scalar_name> ;

$LIST( <20a:scalar_name_list>)
{
  $LIST(<20a:scalar_name_list>) = $LIST( <20b:scalar_name>);
}

*******************************************************************************

<20b:scalar_name>
		= <16:array_declarator> ;

$LIST(<20b:scalar_name>)
{
  $LIST(<20b:scalar_name>) = $LIST( <16:array_declarator>);
}

*------------------------------------------------------------------------------

<20b:scalar_name>
		= <99:symbolic_name> ;

$LIST(<20b:scalar_name>)
{
  $LIST(<20b:scalar_name>) =  ast_variable_declarator(
    $NAME( <99:symbolic_name>),
    NULL);
}

*******************************************************************************

<20c:character_name_list>
		= <20c:character_name_list> ,  <20d:character_name> ;

$LIST( <20c:character_name_list>)
{
  $LIST(<20c:character_name_list>) = SXML_LTL (
    $LIST(<20c:character_name_list>'),
    ",\n",
    $LIST(<20d:character_name>));
}

*------------------------------------------------------------------------------

<20c:character_name_list>
		= <20d:character_name> ;

$LIST( <20c:character_name_list>)
{
  $LIST(<20c:character_name_list>) = $LIST( <20d:character_name>);
}

*******************************************************************************

<20d:character_name>
		= <20b:scalar_name> * <22:len_specification> ;

$LIST(<20d:character_name>)
{
  $LIST(<20d:character_name>) = ast_add_declarator_len(
    $LIST( <20b:scalar_name>),
    $LIST( <22:len_specification>) );
}

*------------------------------------------------------------------------------

<20d:character_name>
		= <20b:scalar_name> ;

$LIST(<20d:character_name>)
{
  $LIST(<20d:character_name>) = $LIST( <20b:scalar_name>);
}

*******************************************************************************

<21:implicit_statement>
		= IMPLICIT  <21a:implicit_body_list> ;

$LIST(<21:implicit_statement>)
{
  $LIST(<21:implicit_statement>) = ast_implicit_statement(
    LOCATION(0),
    $LIST(<21a:implicit_body_list>)
    );
}    


*******************************************************************************

<21a:implicit_body_list>
		= <21a:implicit_body_list> ,  <21b:implicit_body> ;

$LIST(<21a:implicit_body_list>)
{
  $LIST(<21a:implicit_body_list>) = SXML_LTL(
    $LIST(<21a:implicit_body_list>'),
    ",", 
    $LIST(<21b:implicit_body>)
    );
}    

*------------------------------------------------------------------------------

<21a:implicit_body_list>
		= <21b:implicit_body> ;

$LIST(<21a:implicit_body_list>)
{
  $LIST(<21a:implicit_body_list>) = $LIST(<21b:implicit_body>);
}     

*******************************************************************************

<21b:implicit_body>
		= <10a:type>  ( <21c:implicit_elem_list> ) ;

$LIST(<21b:implicit_body>)
{
  $LIST(<21b:implicit_body>) = ast_implicit_body_parameter(
      $LIST(<10a:type>), 
      $LIST(<21c:implicit_elem_list>)
      );
} 

*******************************************************************************

<21b:implicit_body>
		= NONE ;

$LIST(<21b:implicit_body>)
{
  $LIST(<21b:implicit_body>) = NULL;
}    

*******************************************************************************

<21c:implicit_elem_list>
		= <21c:implicit_elem_list> ,  <21d:implicit_elem> ;

$LIST(<21c:implicit_elem_list>)
{
  $LIST(<21c:implicit_elem_list>) = SXML_LTL(
    $LIST(<21c:implicit_elem_list>'), 
    ",", 
    $LIST(<21d:implicit_elem>)
    );
}

*------------------------------------------------------------------------------

<21c:implicit_elem_list>
		= <21d:implicit_elem> ;

$LIST(<21c:implicit_elem_list>)
{
  $LIST(<21c:implicit_elem_list>) = $LIST(<21d:implicit_elem>);
}    

*******************************************************************************

<21d:implicit_elem>
		= <99:symbolic_name> ;

$LIST(<21d:implicit_elem>)
{
  $LIST(<21d:implicit_elem>) = SXML_T(SXML_Q($NAME(<99:symbolic_name>)));
}

*------------------------------------------------------------------------------

<21d:implicit_elem>
		= <99:symbolic_name> - <99:symbolic_name> ;

$LIST(<21d:implicit_elem>)
{
  $LIST(<21d:implicit_elem>) = SXML_TTTTT(
    "\"", 
    $NAME(<99:symbolic_name>), 
    "-", 
    $NAME(<99:symbolic_name>'), 
    "\""
    );
}    

*******************************************************************************

<22:len_specification>
		= ( * ) ;

$LIST( <22:len_specification>)
{
  $LIST( <22:len_specification>) = SXML_T("*");
}

*------------------------------------------------------------------------------

<22:len_specification>
		= <103:nonzero_unsigned_int_constant> ;

$LIST( <22:len_specification>)
{
  $LIST( <22:len_specification>) = SXML_T($NAME(<103:nonzero_unsigned_int_constant>)) ;
}

*------------------------------------------------------------------------------

<22:len_specification>
		= %int_id ;

$LIST( <22:len_specification>)
{
  $LIST( <22:len_specification>) = SXML_T($ptext ("%int_id"));
}

*------------------------------------------------------------------------------

<22:len_specification>
		= ( <80:int_constant_expr> ) ;

$LIST( <22:len_specification>)
{
  $LIST( <22:len_specification>) = SXML_T("<22>.4");
}

*******************************************************************************

<23:parameter_statement>
		= PARAMETER  ( <23a:assign_list> ) ;

$LIST( <23:parameter_statement>)
{
  $LIST( <23:parameter_statement>) = ast_parameter_statement(
    LOCATION(0),
    $LIST(<23a:assign_list>)
    );
}    

*******************************************************************************

<23a:assign_list>
		= <23a:assign_list> ,  <23b:assign> ;

$LIST( <23a:assign_list>)
{
  $LIST( <23a:assign_list>) = SXML_LTL(
    $LIST(<23a:assign_list>'),
    ",",
    $LIST(<23b:assign>)
    );
}    

*------------------------------------------------------------------------------

<23a:assign_list>
		= <23b:assign> ;

$LIST( <23a:assign_list>)
{
  $LIST( <23a:assign_list>) = $LIST(<23b:assign>);
}    

*******************************************************************************

<23b:assign>	= <99:symbolic_name>  =  <75:constant_expr> ;

$LIST( <23b:assign>)
{
  $LIST( <23b:assign>) = ast_parameter_statement_parameter(
    $NAME(<99:symbolic_name>), 
    ast_unknown_parameter("<23b>",LOCATION(0)) 
    );
}

*******************************************************************************

<24:external_statement>
		= EXTERNAL  <99a:symbolic_name_list> ;

$LIST( <24:external_statement>)
{
  $LIST( <24:external_statement>) = $LIST(<99a:symbolic_name_list>);
}    

*******************************************************************************

<25:intrinsic_statement>
		= INTRINSIC  <99a:symbolic_name_list> ;

$LIST( <25:intrinsic_statement>)
{
  $LIST( <25:intrinsic_statement>) = $LIST(<99a:symbolic_name_list>);
}    

*******************************************************************************

<26:save_statement>
		= SAVE ;

$LIST( <26:save_statement>)
{
  $LIST( <26:save_statement>) = NULL;
}    

*------------------------------------------------------------------------------

<26:save_statement>
		= SAVE  <26a:save_statement_name_list> ;

$LIST( <26:save_statement>)
{
  $LIST( <26:save_statement>) = $LIST(<26a:save_statement_name_list>);
}    

*******************************************************************************

<26a:save_statement_name_list>
		= <26a:save_statement_name_list> ,  <26b:save_statement_name> ;

$LIST( <26a:save_statement_name_list>)
{
  $LIST( <26a:save_statement_name_list>) = SXML_LTL(
    $LIST(<26a:save_statement_name_list>'),
    ",",
    $LIST(<26b:save_statement_name>)
  );
}

*------------------------------------------------------------------------------

<26a:save_statement_name_list>
		= <26b:save_statement_name> ;

$LIST( <26a:save_statement_name_list>)
{
  $LIST( <26a:save_statement_name_list>) = $LIST(<26b:save_statement_name>);
}    

*******************************************************************************

<26b:save_statement_name>
		= <99:symbolic_name> ;

$LIST( <26b:save_statement_name>)
{
  $LIST( <26b:save_statement_name>) = SXML_T(SXML_Q($NAME(<99:symbolic_name>)));
}

*------------------------------------------------------------------------------

<26b:save_statement_name>
		= / <99:symbolic_name> / ;

$LIST( <26b:save_statement_name>)
{
  $LIST( <26b:save_statement_name>) = SXML_T(SXML_Q($NAME(<99:symbolic_name>)));
}    

*******************************************************************************

<27:data_statement>
		= DATA  <27a:data_statement_body_list> ;

$LIST( <27:data_statement>)
{
  $LIST( <27:data_statement>) = ast_data_statement(
    LOCATION(0),
    $LIST(<27a:data_statement_body_list>)
  );
}    

*******************************************************************************

<27a:data_statement_body_list>
		= <27a:data_statement_body_list> ,  <27b:data_statement_body> ;

$LIST( <27a:data_statement_body_list>)
{
  $LIST( <27a:data_statement_body_list>) = SXML_LTL(
    $LIST(<27a:data_statement_body_list>'),
    ",",
    $LIST(<27b:data_statement_body>)
  );
}

*------------------------------------------------------------------------------

<27a:data_statement_body_list>
		= <27a:data_statement_body_list> <27b:data_statement_body> ;

$LIST( <27a:data_statement_body_list>)
{
  $LIST( <27a:data_statement_body_list>) = SXML_LTL(
    $LIST(<27a:data_statement_body_list>'),
    ",",
    $LIST(<27b:data_statement_body>)
  );
}    

*------------------------------------------------------------------------------

<27a:data_statement_body_list>
		= <27b:data_statement_body> ;

$LIST( <27a:data_statement_body_list>)
{
  $LIST( <27a:data_statement_body_list>) = $LIST(<27b:data_statement_body>);
}    

*******************************************************************************

<27b:data_statement_body>
		= <27c:data_statement_name_list>  / <27e:data_statement_constant_list> / ;

$LIST( <27b:data_statement_body>)
{
  $LIST( <27b:data_statement_body>) = ast_data_statement_parameter(
    $LIST(<27c:data_statement_name_list>),
    $LIST(<27e:data_statement_constant_list>)
  );
}    

*------------------------------------------------------------------------------

<27c:data_statement_name_list>
		= <27c:data_statement_name_list> ,  <27d:data_statement_name> ;

$LIST( <27c:data_statement_name_list>)
{
  $LIST( <27c:data_statement_name_list>) = SXML_LTL(
    $LIST(<27c:data_statement_name_list>'),
    ",",
    $LIST(<27d:data_statement_name>)
  );
}    

*------------------------------------------------------------------------------

<27c:data_statement_name_list>
		= <27d:data_statement_name> ;

$LIST( <27c:data_statement_name_list>)
{
  $LIST( <27c:data_statement_name_list>) = $LIST(<27d:data_statement_name>);
}    

*******************************************************************************

<27d:data_statement_name>
		= <99:symbolic_name> ;

$LIST( <27d:data_statement_name>)
{
  $LIST( <27d:data_statement_name>) = ast_unknown_parameter(
    "<27d>.1",
    LOCATION(0)
    );
}

*------------------------------------------------------------------------------

<27d:data_statement_name>
		= <88b:function_reference_or_array_element_name> ;

$LIST( <27d:data_statement_name>)
{
  $LIST( <27d:data_statement_name>) = ast_unknown_parameter(
    "<27d>.2",
    LOCATION(0)
    );
}    

*------------------------------------------------------------------------------

<27d:data_statement_name>
		= <89:substring_name> ;

$LIST( <27d:data_statement_name>)
{
  $LIST( <27d:data_statement_name>) = ast_unknown_parameter(
    "<27d>.3",
    LOCATION(0)
    );
}    

*------------------------------------------------------------------------------

<27d:data_statement_name>
		= <28:data_imply_do_list> ;

$LIST( <27d:data_statement_name>)
{
  $LIST( <27d:data_statement_name>) = ast_unknown_parameter(
    "<27d>.4",
    LOCATION(0)
    );
}    

*******************************************************************************

<27e:data_statement_constant_list>
		= <27e:data_statement_constant_list> ,  <27f:data_statement_constant> ;

$LIST( <27e:data_statement_constant_list>)
{
  $LIST( <27e:data_statement_constant_list>) = SXML_LTL(
    $LIST(<27e:data_statement_constant_list>'),
    ",",
    $LIST(<27f:data_statement_constant>)
  );
}     

*------------------------------------------------------------------------------

<27e:data_statement_constant_list>
		= <27f:data_statement_constant>;

$LIST( <27e:data_statement_constant_list>)
{
  $LIST( <27e:data_statement_constant_list>) = $LIST(<27f:data_statement_constant>);
}     

*******************************************************************************

<27f:data_statement_constant>
		= <99:symbolic_name> ;

$LIST( <27f:data_statement_constant>)
{
  $LIST( <27f:data_statement_constant>) = ast_unknown_parameter(
    "<27f>.1",
    LOCATION(0)
    );
}    

*------------------------------------------------------------------------------

<27f:data_statement_constant>
		= <100:constant> ;

$LIST( <27f:data_statement_constant>)
{
  $LIST( <27f:data_statement_constant>) = ast_unknown_parameter(
    "<27f>.2",
    LOCATION(0)
    );
}    

*------------------------------------------------------------------------------

<27f:data_statement_constant>
		= <103:nonzero_unsigned_int_constant>  *  <100:constant> ;

$LIST( <27f:data_statement_constant>)
{
  $LIST( <27f:data_statement_constant>) = ast_unknown_parameter(
    "<27f>.3",
    LOCATION(0)
    );
}    

*------------------------------------------------------------------------------

<27f:data_statement_constant>
		= <103:nonzero_unsigned_int_constant>  *  <99:symbolic_name> ;

$LIST( <27f:data_statement_constant>)
{
  $LIST( <27f:data_statement_constant>) = ast_unknown_parameter(
    "<27f>.4",
    LOCATION(0)
    );
}    

*------------------------------------------------------------------------------

<27f:data_statement_constant>
		= <99:symbolic_name>  *  <100:constant> ;

$LIST( <27f:data_statement_constant>)
{
  $LIST( <27f:data_statement_constant>) = ast_unknown_parameter(
    "<27f>.5",
    LOCATION(0)
    );
}    

*------------------------------------------------------------------------------

<27f:data_statement_constant>
		= <99:symbolic_name>  *  <99:symbolic_name> ;

$LIST( <27f:data_statement_constant>)
{
  $LIST( <27f:data_statement_constant>) = ast_unknown_parameter(
    "<27f>.6",
    LOCATION(0)
    );
}    

*******************************************************************************

<28:data_imply_do_list>
		= ( <28a:data_imply_do_list_head_list>  =  <80:int_constant_expr> ,  <80:int_constant_expr> ) ;

*------------------------------------------------------------------------------

<28:data_imply_do_list>
		= ( <28a:data_imply_do_list_head_list>  =  <80:int_constant_expr> ,  <80:int_constant_expr> ,  <80:int_constant_expr> ) ;

*******************************************************************************

<28a:data_imply_do_list_head_list>
		= <28b:data_imply_do_list_head> ,  <28a:data_imply_do_list_head_list> ;

*------------------------------------------------------------------------------

<28a:data_imply_do_list_head_list>
		= <28b:data_imply_do_list_head> ,  <99:symbolic_name> ;

*******************************************************************************

<28b:data_imply_do_list_head>
		= <88b:function_reference_or_array_element_name> ;

*------------------------------------------------------------------------------

<28b:data_imply_do_list_head>
		= <28:data_imply_do_list> ;

*******************************************************************************

<29:assignment_statement>
		= <29a:left_hand_side>  =  <74:expression> ;

$LIST( <29:assignment_statement>)
{
  $LIST( <29:assignment_statement>) = ast_assignment_statement(
    LOCATION(0),
    $LIST(<29a:left_hand_side>),
    $LIST(<74:expression>)
  );
}

*------------------------------------------------------------------------------

<29:assignment_statement>
		= ASSIGN  <110b:label_ref>  TO  <99:symbolic_name> ;

$LIST( <29:assignment_statement>)
{
  $LIST( <29:assignment_statement>) = ast_assignment_statement(
    LOCATION(0),
    SXML_T(SXML_Q($NAME(<99:symbolic_name>))),
    SXML_T(SXML_Q($NAME(<110b:label_ref>)))
  );
}    

*******************************************************************************

<29a:left_hand_side>
		= <99:symbolic_name> ;

$LIST( <29a:left_hand_side>)
{
  $LIST( <29a:left_hand_side>) = SXML_T(SXML_Q($NAME(<99:symbolic_name>)));
}    

*------------------------------------------------------------------------------

<29a:left_hand_side>
		= <88:array_element_name> ;

$LIST( <29a:left_hand_side>)
{
  $LIST( <29a:left_hand_side>) = $LIST(<88:array_element_name>);
}    

*------------------------------------------------------------------------------

<29a:left_hand_side>
		= <89:substring_name> ;

$LIST( <29a:left_hand_side>)
{
  $LIST( <29a:left_hand_side>) = $LIST(<89:substring_name>);
}    

*******************************************************************************

<30:goto_statement>
		= <31:unconditional_goto> ;

$LIST( <30:goto_statement>)
{
  $LIST( <30:goto_statement>) = $LIST(<31:unconditional_goto>);
}    

*------------------------------------------------------------------------------

<30:goto_statement>
		= <32:computed_goto> ;

$LIST( <30:goto_statement>)
{
  $LIST( <30:goto_statement>) = $LIST(<32:computed_goto>);
}    

*------------------------------------------------------------------------------

<30:goto_statement>
		= <33:assigned_goto> ;

$LIST( <30:goto_statement>)
{
  $LIST( <30:goto_statement>) = $LIST(<33:assigned_goto>);
}    

*******************************************************************************

<31:unconditional_goto>
		= GO  TO  <110b:label_ref> ;

$LIST( <31:unconditional_goto>)
{
  $LIST( <31:unconditional_goto>) = ast_goto_statement(
    LOCATION(0),
    "unconditional",
    SXML_T(SXML_Q($NAME(<110b:label_ref>))),
    NULL
  );
}    

*******************************************************************************

<32:computed_goto>
		= GO  TO  ( <110a:label_ref_list> ) ,  <77:integer_expr> ;

$LIST( <32:computed_goto>)
{
  $LIST( <32:computed_goto>) = ast_goto_statement(
    LOCATION(0),
    "computed",
    $LIST(<110a:label_ref_list>),
    $LIST(<77:integer_expr>)
  );
}    

*------------------------------------------------------------------------------

<32:computed_goto>
		= GO  TO  ( <110a:label_ref_list> )  <77:integer_expr> ;

$LIST( <32:computed_goto>)
{
  $LIST( <32:computed_goto>) = ast_goto_statement(
    LOCATION(0),
    "computed",
    $LIST(<110a:label_ref_list>),
    $LIST(<77:integer_expr>)
  );
}    

*******************************************************************************

<33:assigned_goto>
		= GO  TO  <99:symbolic_name> ,  ( <110a:label_ref_list> ) ;

$LIST( <33:assigned_goto>)
{
  $LIST( <33:assigned_goto>) = ast_goto_statement(
    LOCATION(0),
    "assigned",
    $LIST(<110a:label_ref_list>),
    SXML_T(SXML_Q($NAME(<99:symbolic_name>)))
  );
}    

*------------------------------------------------------------------------------

<33:assigned_goto>
		= GO  TO  <99:symbolic_name>  ( <110a:label_ref_list> ) ;

$LIST( <33:assigned_goto>)
{
  $LIST( <33:assigned_goto>) = ast_goto_statement(
    LOCATION(0),
    "assigned",
    $LIST(<110a:label_ref_list>),
    SXML_T(SXML_Q($NAME(<99:symbolic_name>)))
  );
}    

*------------------------------------------------------------------------------

<33:assigned_goto>
		= GO  TO  <99:symbolic_name> ;

$LIST( <33:assigned_goto>)
{
  $LIST( <33:assigned_goto>) = ast_goto_statement(
    LOCATION(0),
    "assigned",
    NULL,
    SXML_T(SXML_Q($NAME(<99:symbolic_name>)))
  );
}    

*******************************************************************************

* <78:int_real_dp_expr> is covered by <74:expression>

<34:arithmetic_if_statement>
		= IF  ( <74:expression> )  <110b:label_ref> ,  <110b:label_ref> ,  <110b:label_ref> ;

$LIST( <34:arithmetic_if_statement>)
{
  $LIST( <34:arithmetic_if_statement>) = ast_arithmetic_if_statement(
    LOCATION(0),
    $LIST(<74:expression>),
    $NAME(<110b:label_ref>),
    $NAME(<110b:label_ref>'),
    $NAME(<110b:label_ref>'')
  );
}    

*******************************************************************************

*The executable statement contained in a logical IF statement must not be
* a DO, block IF, ELSE IF, ELSE, END IF, END, or another logical IF statement.

<35:logical_if_statement>
		= IF  ( <74:expression> )  <7:executable_statement> ;

*******************************************************************************

*<36:block_if_statement>
*		= IF  ( <74:expression> )  THEN %EOL
*		     <2c:statement_list>
*		  <36a:else_blocks> ;

* A (dummy) empty statement is allowed as a <2c:statement_list>

<36:block_if_statement>
		= IF  ( <74:expression> )  THEN %EOL
		     <2c:statement_list>
		  <36a:else_blocks> ;

*------------------------------------------------------------------------------

<36:block_if_statement>
		= IF  ( <74:expression> )  THEN %EOL
		  <36a:else_blocks> ;

*******************************************************************************

*<36a:else_blocks>
*		= <39:end_if_statement> ;
*<36a:else_blocks>
*		= <38:else_statement>
*		     <2c:statement_list>
*		  <39:end_if_statement> ;
*<36a:else_blocks>
*		= <37:else_if_statement>
*		     <2c:statement_list>
*		  <36a:else_blocks> ;

<36a:else_blocks>
		= <39:end_if_statement> ;

*------------------------------------------------------------------------------

<36a:else_blocks>
		= <38:else_statement>
		     <2c:statement_list>
		  <39:end_if_statement> ;

*------------------------------------------------------------------------------

<36a:else_blocks>
		= <38:else_statement>
		  <39:end_if_statement> ;

*------------------------------------------------------------------------------

<36a:else_blocks>
		= <37:else_if_statement>
		     <2c:statement_list>
		  <36a:else_blocks> ;

*------------------------------------------------------------------------------

<36a:else_blocks>
		= <37:else_if_statement>
		  <36a:else_blocks> ;

*******************************************************************************

<37:else_if_statement>
		= ELSE  IF  ( <74:expression> )  THEN %EOL ;

*------------------------------------------------------------------------------

<37:else_if_statement>
		= <110:label> ELSE  IF  ( <74:expression> )  THEN %EOL ;

*******************************************************************************

<38:else_statement>
		= ELSE %EOL ;

*------------------------------------------------------------------------------

<38:else_statement>
		= <110:label> ELSE %EOL ;

*******************************************************************************

<39:end_if_statement>
		= END  IF ;

*------------------------------------------------------------------------------

<39:end_if_statement>
		= <110:label> END  IF ;

*******************************************************************************

<40:do_statement>
		= DO  <110b:label_ref> ,  <99:symbolic_name>  =  <40b:do_parameters> %EOL ;

*------------------------------------------------------------------------------

<40:do_statement>
		= DO  <110b:label_ref>  <99:symbolic_name>  =  <40b:do_parameters> %EOL ;

*******************************************************************************

<40a:do_loop>	= <40:do_statement>
		     <2c:statement_list> %ENDDO ;

*******************************************************************************

<40b:do_parameters>
		= <78:int_real_dp_expr> ,  <78:int_real_dp_expr> ,  <78:int_real_dp_expr> ;

*------------------------------------------------------------------------------

<40b:do_parameters>
		= <78:int_real_dp_expr> ,  <78:int_real_dp_expr> ;

*******************************************************************************

<41:continue_statement>
		= CONTINUE ;

*******************************************************************************

* The <102:unsigned_int_constant> in a <42:stop_statement> or in a
* <43:pause_statement> must contains at most 5 digits (not tested).

<42:stop_statement>
		= STOP ;

$LIST( <42:stop_statement>)
{
  $LIST( <42:stop_statement>) = NULL;
}

*------------------------------------------------------------------------------

<42:stop_statement>
		= STOP  <102:unsigned_int_constant> ;

$LIST( <42:stop_statement>)
{
  $LIST( <42:stop_statement>) = ast_constant(
    "uint_constant",
    $NAME( <102:unsigned_int_constant>) );
}

*------------------------------------------------------------------------------

<42:stop_statement>
		= STOP  <109:character_constant> ;

$LIST( <42:stop_statement>)
{
  $LIST( <42:stop_statement>) = ast_constant(
    "character_constant",
    $NAME( <109:character_constant>));
}

*******************************************************************************

<43:pause_statement>
		= PAUSE  ;

$LIST( <43:pause_statement>)
{
  $LIST( <43:pause_statement>) = NULL;
}

*------------------------------------------------------------------------------

<43:pause_statement>
		= PAUSE  <102:unsigned_int_constant> ;

$LIST( <43:pause_statement>)
{
  $LIST( <43:pause_statement>) = ast_constant(
   "unsigned_int_constant",
   $NAME (<102:unsigned_int_constant>));
}

*------------------------------------------------------------------------------

<43:pause_statement>
		= PAUSE  <109:character_constant> ;

$LIST( <43:pause_statement>)
{
  $LIST( <43:pause_statement>) = ast_constant(
    "character_constant",
    $NAME (<109:character_constant>));
}

*******************************************************************************

<44:write_statement>
		= WRITE  ( <47:control_info_list> )  <48:io_list> ;

$LIST( <44:write_statement>)
{
  $LIST( <44:write_statement>) = ast_write_statement(
    LOCATION(0),
    $LIST(<47:control_info_list>),
    $LIST(<48:io_list>)
  );
}    

*------------------------------------------------------------------------------

<44:write_statement>
		= WRITE  ( <47:control_info_list> ) ;

$LIST( <44:write_statement>)
{
  $LIST( <44:write_statement>) = ast_write_statement(
    LOCATION(0),
    $LIST(<47:control_info_list>),
    NULL
  );
}    

*******************************************************************************

* READ introduces a read statement with control info list, READkw a format identifier.
* READkw is chosen when the next token is not a '(' or when a balanced structure
* is followed by ',' or '//'; otherwise READ is chosen

<45:read_statement>
		= READ  ( <47:control_info_list> )  <48:io_list> ;

$LIST( <45:read_statement>)
{
  $LIST( <45:read_statement>) = ast_read_statement(
    LOCATION(0),
    $LIST(<47:control_info_list>),
    $LIST(<48:io_list>),
    NULL
  );
}    

*------------------------------------------------------------------------------

<45:read_statement>
		= READ  ( <47:control_info_list> ) ;

$LIST( <45:read_statement>)
{
  $LIST( <45:read_statement>) = ast_read_statement(
    LOCATION(0),
    $LIST(<47:control_info_list>),
    NULL,
    NULL  
  );
}    

*------------------------------------------------------------------------------

<45:read_statement>
		= READkw  <57:format_identifier> ,  <48:io_list> ;

$LIST( <45:read_statement>)
{
  $LIST( <45:read_statement>) = ast_read_statement(
    LOCATION(0),
    NULL,
    $LIST(<48:io_list>),
    $LIST(<57:format_identifier>)
  );
}    

*------------------------------------------------------------------------------

<45:read_statement>
		= READkw  <57:format_identifier> ;

$LIST( <45:read_statement>)
{
  $LIST( <45:read_statement>) = ast_read_statement(
    LOCATION(0),
    NULL,
    NULL,
    $LIST(<57:format_identifier>)  
  );
}

*******************************************************************************

<46:print_statement>
		= PRINT  <57:format_identifier> ,  <48:io_list> ;

$LIST( <46:print_statement>)
{
  $LIST( <46:print_statement>) = ast_print_statement(
    LOCATION(0),
    $LIST(<48:io_list>),
    $LIST(<57:format_identifier>)
  );
}    

*------------------------------------------------------------------------------

<46:print_statement>
		= PRINT  <57:format_identifier> ;

$LIST( <46:print_statement>)
{
  $LIST( <46:print_statement>) = ast_print_statement(
    LOCATION(0),
    NULL,
    $LIST(<57:format_identifier>)
  );
}    

*******************************************************************************

* A control info list must contain exactly one unit_identifier.
* An END = specifier must not appear in a WRITE statement.
* Each info_elem must appear at most one time.

<47:control_info_list>
		= <56:unit_identifier> ;

$LIST( <47:control_info_list>)
{ //TODO : object UnitIdentifier
  $LIST( <47:control_info_list>) = $LIST(<56:unit_identifier>);
}    

*------------------------------------------------------------------------------

<47:control_info_list>
		= <47b:control_info_elem_list> ;

$LIST( <47:control_info_list>)
{
  $LIST( <47:control_info_list>) = $LIST(<47b:control_info_elem_list>);
}     

*******************************************************************************

<47b:control_info_elem_list>
		= <47b:control_info_elem_list> ,  <47a:control_info_elem> ;

$LIST( <47b:control_info_elem_list>)
{
  $LIST( <47b:control_info_elem_list>) = SXML_LTL(
    $LIST(<47b:control_info_elem_list>'),
    ",",
    $LIST(<47a:control_info_elem>)
  );
}

*------------------------------------------------------------------------------

<47b:control_info_elem_list>
		= <56:unit_identifier> ,  <57:format_identifier> ;

$LIST( <47b:control_info_elem_list>)
{
  $LIST( <47b:control_info_elem_list>) = SXML_LTL(
    $LIST(<56:unit_identifier>),
    ",",
    $LIST(<57:format_identifier>)
  );
}    

*------------------------------------------------------------------------------

<47b:control_info_elem_list>
		= <56:unit_identifier> ,  <47a:control_info_elem> ;

$LIST( <47b:control_info_elem_list>)
{
  $LIST( <47b:control_info_elem_list>) = SXML_LTL(
    $LIST(<56:unit_identifier>),
    ",",
    $LIST(<47a:control_info_elem>)
  );
}    

*------------------------------------------------------------------------------

<47b:control_info_elem_list>
		= <47a:control_info_elem> ;

$LIST( <47b:control_info_elem_list>)
{
  $LIST( <47b:control_info_elem_list>) = $LIST(<47a:control_info_elem>);
}    

*******************************************************************************

<47a:control_info_elem>
		= FMT  =  <57:format_identifier> ;

$LIST( <47a:control_info_elem>)
{
  $LIST( <47a:control_info_elem>) = $LIST(<57:format_identifier>);
}    

*------------------------------------------------------------------------------

<47a:control_info_elem>
		= UNIT  =  <56:unit_identifier> ;

$LIST( <47a:control_info_elem>)
{
  $LIST( <47a:control_info_elem>) = $LIST(<56:unit_identifier>);
}

*------------------------------------------------------------------------------

<47a:control_info_elem>
		= REC  =  <77:integer_expr> ;

$LIST( <47a:control_info_elem>)
{
  $LIST( <47a:control_info_elem>) = ast_control_info_elem(
    "REC",
    $LIST(<77:integer_expr>)
  );
}    

*------------------------------------------------------------------------------

<47a:control_info_elem>
		= END  =  <110b:label_ref> ;

$LIST( <47a:control_info_elem>)
{
  $LIST( <47a:control_info_elem>) = ast_control_info_elem(
    "END",
    SXML_T(SXML_Q($NAME(<110b:label_ref>)))
  );
}   

*------------------------------------------------------------------------------

<47a:control_info_elem>
		= ERR  =  <110b:label_ref> ;

$LIST( <47a:control_info_elem>)
{
  $LIST( <47a:control_info_elem>) = ast_control_info_elem(
    "ERR",
    SXML_T(SXML_Q($NAME(<110b:label_ref>)))
  );
}    

*------------------------------------------------------------------------------

<47a:control_info_elem>
		= IOSTAT  =  <88a:variable_or_array_element_name> ;

$LIST( <47a:control_info_elem>)
{
  $LIST( <47a:control_info_elem>) = ast_control_info_elem(
    "END",
    $LIST(<88a:variable_or_array_element_name>)
  );
}    

<47a:control_info_elem>
		= NML  =  <99:symbolic_name> ;

$LIST( <47a:control_info_elem>)
{
  $LIST( <47a:control_info_elem>) = ast_control_info_elem(
    "NML",
    SXML_T(SXML_Q($NAME(<99:symbolic_name>)))
  );
}    

*******************************************************************************

* &1 Check that the "," is not the one inside a <107:complex_constant>
* Is LALR (4) instead (checked by V4.0).
* The look-ahead in the <107:complex_constant> case is : 
* "," ["+"|"-"] ("<102:unsigned_int_constant>"|"<105:unsigned_real_constant>") ")"

<48:io_list>	= <48:io_list> , &1  <74:expression> ;

$LIST( <48:io_list>)
{
  $LIST( <48:io_list>) = SXML_LTL(
    $LIST(<48:io_list>'),
    ",",
    $LIST(<74:expression>));
}

*------------------------------------------------------------------------------

<48:io_list>	= <48:io_list> , &1  <49:io_imply_do_list> ;

$LIST( <48:io_list>)
{
  $LIST( <48:io_list>) = SXML_LTL(
    $LIST(<48:io_list>'),
    ",",
    $LIST(<49:io_imply_do_list>));
}

*------------------------------------------------------------------------------

<48:io_list>	= <74:expression> ;

$LIST( <48:io_list>)
{
  $LIST( <48:io_list>) = $LIST(<74:expression>);
}

*------------------------------------------------------------------------------

<48:io_list>	= <49:io_imply_do_list> ;

$LIST( <48:io_list>)
{
  $LIST( <48:io_list>) = $LIST(<49:io_imply_do_list>);
}

*******************************************************************************

<49:io_imply_do_list>
		= ( <48:io_list> , &1  <99:symbolic_name>  =  <78:int_real_dp_expr> ,  <78:int_real_dp_expr> ,  <78:int_real_dp_expr> ) ;

$LIST( <49:io_imply_do_list>)
{
  $LIST( <49:io_imply_do_list>) = ast_unknown_parameter(
    "<49>.1",
    LOCATION(0)
    );
}

*------------------------------------------------------------------------------

<49:io_imply_do_list>
		= ( <48:io_list> , &1  <99:symbolic_name>  =  <78:int_real_dp_expr> ,  <78:int_real_dp_expr> ) ;

$LIST( <49:io_imply_do_list>)
{
  $LIST( <49:io_imply_do_list>) = ast_unknown_parameter(
    "<49>.2",
    LOCATION(0)
    );
}    

*******************************************************************************

* A open info list must contain exactly one unit_identifier.
* Each info_elem must appear at most one time.

<50:open_statement>
		= OPEN  ( <50a:open_info_elem_list> ) ;

*------------------------------------------------------------------------------

<50a:open_info_elem_list>
		= <50a:open_info_elem_list> ,  <50b:open_info_elem> ;

*------------------------------------------------------------------------------

<50a:open_info_elem_list>
		= <56:unit_identifier> ;

*------------------------------------------------------------------------------

<50a:open_info_elem_list>
		= <50b:open_info_elem> ;

*******************************************************************************

<50b:open_info_elem>
		= UNIT  =  <56:unit_identifier> ;

*------------------------------------------------------------------------------

<50b:open_info_elem>
		= ERR  =  <110b:label_ref> ;

*------------------------------------------------------------------------------

<50b:open_info_elem>
		= FILE  =  <82a:character_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<50b:open_info_elem>
		= STATUS  =  <82a:character_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<50b:open_info_elem>
		= ACCESS  =  <82a:character_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<50b:open_info_elem>
		= FORM  =  <82a:character_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<50b:open_info_elem>
		= RECL  =  <77:integer_expr> ;

*------------------------------------------------------------------------------

<50b:open_info_elem>
		= BLANK  =  <82a:character_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<50b:open_info_elem>
		= IOSTAT  =  <88a:variable_or_array_element_name> ;

*******************************************************************************

* A close info list must contain exactly one unit_identifier.
* Each info_elem must appear at most one time.

<51:close_statement>
		= CLOSE  ( <51a:close_info_elem_list> ) ;

*******************************************************************************

<51a:close_info_elem_list>
		= <51a:close_info_elem_list> ,  <51b:close_info_elem> ;

*------------------------------------------------------------------------------

<51a:close_info_elem_list>
		= <56:unit_identifier> ;

*------------------------------------------------------------------------------

<51a:close_info_elem_list>
		= <51b:close_info_elem> ;

*******************************************************************************

<51b:close_info_elem>
		= UNIT  =  <56:unit_identifier> ;

*------------------------------------------------------------------------------

<51b:close_info_elem>
		= ERR  =  <110b:label_ref> ;

*------------------------------------------------------------------------------

<51b:close_info_elem>
		= STATUS  =  <82a:character_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<51b:close_info_elem>
		= IOSTAT  =  <88a:variable_or_array_element_name> ;

*******************************************************************************

* A inquire info list must contain exactly one unit_identifier.
* Each info_elem must appear at most one time.

<52:inquire_statement>
		= INQUIRE  ( <52a:inquire_info_elem_list> ) ;

*******************************************************************************

<52a:inquire_info_elem_list>
		= <52a:inquire_info_elem_list> ,  <52b:inquire_info_elem> ;

*------------------------------------------------------------------------------

<52a:inquire_info_elem_list>
		= <56:unit_identifier> ;

*------------------------------------------------------------------------------

<52a:inquire_info_elem_list>
		= <52b:inquire_info_elem> ;

*******************************************************************************

<52b:inquire_info_elem>
		= UNIT =   <56:unit_identifier> ;

*------------------------------------------------------------------------------

<52b:inquire_info_elem>
		= FILE  =  <82a:character_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<52b:inquire_info_elem>
		= ERR  =  <110b:label_ref> ;

*------------------------------------------------------------------------------

<52b:inquire_info_elem>
		= <52c:inquire_info_key>  =  <88a:variable_or_array_element_name> ;

*******************************************************************************

<52c:inquire_info_key>
		= IOSTAT ;

*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= EXIST ;

*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= OPENED ;

*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= NUMBER ;

*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= NAMED ;

*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= NAME ;

*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= ACCESS ;

*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= SEQUENTIAL ;

*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= DIRECT ;
*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= FORM ;

*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= FORMATTED ;

*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= UNFORMATTED ;

*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= RECL ;

*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= NEXTREC ;

*------------------------------------------------------------------------------

<52c:inquire_info_key>
		= BLANK ;

*******************************************************************************

* BACKSPACE statement must contain a unit identifier.
* Each backspace_or_endfile_or_rewind_info_elem must appear at most one time.
* Each keyword BACKSPACE, ENDFILE, or REWIND is BACKSPACEkw, ENDFILEkw, or REWINDkw
* if it is not followed by a well-balanced expression followed by EOL.

<53:backspace_statement>
		= BACKSPACEkw  <56:unit_identifier> ;

$LIST( <53:backspace_statement>)
{
  $LIST( <53:backspace_statement>) = ast_backspace_statement(
    LOCATION(0),
    $LIST(<56:unit_identifier>)
  );
}

*------------------------------------------------------------------------------

<53:backspace_statement>
		= BACKSPACE  ( <53a:backspace_or_endfile_or_rewind_info_elem_list> ) ;

$LIST( <53:backspace_statement>)
{
  $LIST( <53:backspace_statement>) = ast_backspace_statement(
    LOCATION(0),
    $LIST(<53a:backspace_or_endfile_or_rewind_info_elem_list>)
  );
}    

*******************************************************************************

<53a:backspace_or_endfile_or_rewind_info_elem_list>
		= <53a:backspace_or_endfile_or_rewind_info_elem_list> ,  <53b:backspace_or_endfile_or_rewind_info_elem> ;

$LIST( <53a:backspace_or_endfile_or_rewind_info_elem_list>)
{
  $LIST( <53a:backspace_or_endfile_or_rewind_info_elem_list>) = SXML_LTL(
    $LIST(<53a:backspace_or_endfile_or_rewind_info_elem_list>'),
    ",",
    $LIST(<53b:backspace_or_endfile_or_rewind_info_elem>));
}    

*------------------------------------------------------------------------------

<53a:backspace_or_endfile_or_rewind_info_elem_list>
		= <56:unit_identifier> ;

$LIST( <53a:backspace_or_endfile_or_rewind_info_elem_list>)
{
  $LIST( <53a:backspace_or_endfile_or_rewind_info_elem_list>) = $LIST(<56:unit_identifier>);
}    

*------------------------------------------------------------------------------

<53a:backspace_or_endfile_or_rewind_info_elem_list>
		= <53b:backspace_or_endfile_or_rewind_info_elem> ;

$LIST( <53a:backspace_or_endfile_or_rewind_info_elem_list>)
{
  $LIST( <53a:backspace_or_endfile_or_rewind_info_elem_list>) = $LIST(<53b:backspace_or_endfile_or_rewind_info_elem>);
}    

*******************************************************************************

<53b:backspace_or_endfile_or_rewind_info_elem>
		= UNIT  =  <56:unit_identifier> ;

$LIST( <53b:backspace_or_endfile_or_rewind_info_elem>)
{
  $LIST( <53b:backspace_or_endfile_or_rewind_info_elem>) = $LIST(<56:unit_identifier>);
}    

*------------------------------------------------------------------------------

<53b:backspace_or_endfile_or_rewind_info_elem>
		= ERR  =  <110b:label_ref> ;

$LIST( <53b:backspace_or_endfile_or_rewind_info_elem>)
{
  $LIST( <53b:backspace_or_endfile_or_rewind_info_elem>) = ast_control_info_elem(
    "ERR", 
    ast_text_to_map("label_ref", $NAME(<110b:label_ref>))
  );
}

*------------------------------------------------------------------------------

<53b:backspace_or_endfile_or_rewind_info_elem>
		= IOSTAT  =  <88a:variable_or_array_element_name> ;

$LIST( <53b:backspace_or_endfile_or_rewind_info_elem>)
{
  $LIST( <53b:backspace_or_endfile_or_rewind_info_elem>) = ast_control_info_elem(
    "IOSTAT", 
    $LIST( <88a:variable_or_array_element_name>)
  );
}    

*******************************************************************************

* ENDFILE statement must contain a unit identifier.

<54:endfile_statement>
		= ENDFILEkw  <56:unit_identifier> ;

*------------------------------------------------------------------------------

<54:endfile_statement>
		= ENDFILE  ( <53a:backspace_or_endfile_or_rewind_info_elem_list> ) ;

*******************************************************************************

* REWIND statement must contain a unit identifier.

<55:rewind_statement>
		= REWINDkw  <56:unit_identifier> ;

$LIST( <55:rewind_statement>)
{
  $LIST( <55:rewind_statement>) = ast_rewind_statement(
    LOCATION(0),
    $LIST(<56:unit_identifier>)
  );
}    

*------------------------------------------------------------------------------

<55:rewind_statement>
		= REWIND  ( <53a:backspace_or_endfile_or_rewind_info_elem_list> ) ;

$LIST( <55:rewind_statement>)
{
  $LIST( <55:rewind_statement>) = ast_rewind_statement(
    LOCATION(0),
    $LIST(<53a:backspace_or_endfile_or_rewind_info_elem_list>)
  );
}    

*******************************************************************************

* <77:integer_expr> covers <91:variable_name>, <92:array_name> and <88:array_element_name>

<56:unit_identifier>
		= <77:integer_expr> ;

$LIST( <56:unit_identifier>)
{
  $LIST( <56:unit_identifier>) = ast_control_info_elem(
    "UNIT", 
    $LIST( <77:integer_expr>)
  );
}    

*------------------------------------------------------------------------------

<56:unit_identifier>
		= <89:substring_name> ;

$LIST( <56:unit_identifier>)
{
  $LIST( <56:unit_identifier>) = ast_control_info_elem(
    "UNIT", 
    $LIST( <89:substring_name>)
  );
}    

*------------------------------------------------------------------------------

<56:unit_identifier>
		= * ;

$LIST( <56:unit_identifier>)
{
  $LIST( <56:unit_identifier>) = ast_control_info_elem(
    "UNIT", 
    ast_text_to_map("asterisk", "*")
  );
}

*******************************************************************************

* A format identifier that is a variable name or array name must be of
* type integer or character.
* Covered by <76:arithmetic_expression>

<57:format_identifier>
		= <110b:label_ref> ;

$LIST( <57:format_identifier>)
{
  $LIST( <57:format_identifier>) = ast_control_info_elem(
    "FMT", 
    ast_text_to_map("label_ref", $NAME(<110b:label_ref>))
  );
}

*------------------------------------------------------------------------------

* (to be tested) Covers both <99:symbolic_name> and <82:character_expression>

<57:format_identifier>
		= <82a:character_or_non_typed_expression> ;

$LIST( <57:format_identifier>)
{
  $LIST( <57:format_identifier>) = ast_control_info_elem(
    "FMT", 
    $LIST(<82a:character_or_non_typed_expression>)
  );
}

*------------------------------------------------------------------------------

*<57:format_identifier>
*		= <99:symbolic_name> ;
*<57:format_identifier>
*		= <82:character_expression> ;

<57:format_identifier>
		= * ;

$LIST( <57:format_identifier>)
{
  $LIST( <57:format_identifier>) = ast_control_info_elem(
    "FMT", 
    ast_text_to_map("asterisk", "*")
  );
}    

*******************************************************************************

<58:format_statement>
		= FORMAT  <59:format_specification> ;

$LIST( <58:format_statement>)

{
  $LIST( <58:format_statement>) = $LIST( <59:format_specification>);
}


*******************************************************************************

<59:format_specification>
		= ( ) ;

$LIST( <59:format_specification>)

{
  $LIST( <59:format_specification>) = NULL;
}    

*------------------------------------------------------------------------------

<59:format_specification>
		= ( <60:fmt_specification> ) ;

$LIST( <59:format_specification>)

{
  $LIST( <59:format_specification>) = $LIST( <60:fmt_specification>);
}    

*******************************************************************************

<60:fmt_specification>
		= <60a:fmt_spec_list> ;

$LIST( <60:fmt_specification>)

{
  $LIST( <60:fmt_specification>) = $LIST( <60a:fmt_spec_list>);
}     

*------------------------------------------------------------------------------

<60:fmt_specification>
		= <60b:fmt_spec_list_/:> ;

$LIST( <60:fmt_specification>)    

{
  $LIST( <60:fmt_specification>) = $LIST( <60b:fmt_spec_list_/:>);
}    

*******************************************************************************

<60a:fmt_spec_list>
		= <60a:fmt_spec_list> ,  <60c:fmt_spec> ;

$LIST( <60a:fmt_spec_list>)    

{
  $LIST( <60a:fmt_spec_list>) = SXML_LTL(
    $LIST(<60a:fmt_spec_list>'),
    ",",
    $LIST(<60c:fmt_spec>));
}    

*------------------------------------------------------------------------------

<60a:fmt_spec_list>
		= <60b:fmt_spec_list_/:> <60c:fmt_spec> ;

$LIST( <60a:fmt_spec_list>)    

{
  $LIST( <60a:fmt_spec_list>) = SXML_LL(
    $LIST(<60b:fmt_spec_list_/:>),
    $LIST(<60c:fmt_spec>));
}    

*------------------------------------------------------------------------------

<60a:fmt_spec_list>
		= <60b:fmt_spec_list_/:> ,  <60c:fmt_spec> ;

$LIST( <60a:fmt_spec_list>)    

{
  $LIST( <60a:fmt_spec_list>) = SXML_LTL(
    $LIST(<60b:fmt_spec_list_/:>),
    ",",
    $LIST(<60c:fmt_spec>));
}    

*------------------------------------------------------------------------------

<60a:fmt_spec_list>
		= <60c:fmt_spec> ;

$LIST( <60a:fmt_spec_list>)    

{
  $LIST( <60a:fmt_spec_list>) = $LIST(<60c:fmt_spec>);
}    

*******************************************************************************

<60b:fmt_spec_list_/:>
		= <60b:fmt_spec_list_/:> <60d:fmt_spec_/:> ;

$LIST( <60b:fmt_spec_list_/:>)    

{
  $LIST( <60b:fmt_spec_list_/:>) = SXML_LL(
    $LIST(<60b:fmt_spec_list_/:>'),
    $LIST(<60d:fmt_spec_/:>));
}    

*------------------------------------------------------------------------------

<60b:fmt_spec_list_/:>
		= <60b:fmt_spec_list_/:> ,  <60d:fmt_spec_/:> ;

$LIST( <60b:fmt_spec_list_/:>)    

{
  $LIST( <60b:fmt_spec_list_/:>) = SXML_LTL(
    $LIST(<60b:fmt_spec_list_/:>'),
    ",",
    $LIST(<60d:fmt_spec_/:>));
}    

*------------------------------------------------------------------------------

<60b:fmt_spec_list_/:>
		= <60a:fmt_spec_list> ,  <60d:fmt_spec_/:> ;

$LIST( <60b:fmt_spec_list_/:>)    

{
  $LIST( <60b:fmt_spec_list_/:>) = SXML_LTL(
    $LIST(<60a:fmt_spec_list>),
    ",",
    $LIST(<60d:fmt_spec_/:>));
}    

*------------------------------------------------------------------------------

<60b:fmt_spec_list_/:>
		= <60d:fmt_spec_/:> ;

$LIST( <60b:fmt_spec_list_/:>)    

{
  $LIST( <60b:fmt_spec_list_/:>) = $LIST(<60d:fmt_spec_/:>);
}    

*******************************************************************************

<60c:fmt_spec>	= <61a:[repeat_spec]> <60e:repeatable_edit_descriptor> ;

$LIST( <60c:fmt_spec>)    

{
  $LIST( <60c:fmt_spec>) = SXML_QUOTED_LIST(
    SXML_TL(
      $NAME(<61a:[repeat_spec]>),
      $LIST(<60e:repeatable_edit_descriptor>)));
}

*------------------------------------------------------------------------------

<60c:fmt_spec>	= <60h:nonrepeatable_edit_descriptor> ;

$LIST( <60c:fmt_spec>)    

{
  $LIST( <60c:fmt_spec>) = SXML_QUOTED_LIST(
    $LIST(<60h:nonrepeatable_edit_descriptor>));
}

*******************************************************************************

<60d:fmt_spec_/:>
		= <61a:[repeat_spec]> <60e:repeatable_edit_descriptor> <60f:/:> ;

$LIST( <60d:fmt_spec_/:>)    

{
  $LIST( <60d:fmt_spec_/:>) = SXML_QUOTED_LIST(
    SXML_TLT(
      $NAME(<61a:[repeat_spec]>),
      $LIST(<60e:repeatable_edit_descriptor>),
      $NAME(<60f:/:>)));
}    

*------------------------------------------------------------------------------

<60d:fmt_spec_/:>
		= <60h:nonrepeatable_edit_descriptor> <60f:/:> ;

$LIST( <60d:fmt_spec_/:>)    

{
  $LIST( <60d:fmt_spec_/:>) = SXML_QUOTED_LIST(
    SXML_LT(
      $LIST(<60h:nonrepeatable_edit_descriptor>),
      $NAME(<60f:/:>)));
}    

*------------------------------------------------------------------------------

<60d:fmt_spec_/:>
		= <60f:/:> ;

$LIST( <60d:fmt_spec_/:>)    

{
  $LIST( <60d:fmt_spec_/:>) = SXML_QUOTED_LIST(
    SXML_T(
      $NAME(<60f:/:>)));
}    

*******************************************************************************

<60e:repeatable_edit_descriptor>
		= ( <60:fmt_specification> ) ;

$LIST( <60e:repeatable_edit_descriptor>)    

{
  $LIST( <60e:repeatable_edit_descriptor>) = SXML_TLT(
    "(",
    $LIST(<60:fmt_specification>),
    ")");
}    

*------------------------------------------------------------------------------

<60e:repeatable_edit_descriptor>
		= I <62:w> ;

$LIST( <60e:repeatable_edit_descriptor>)    

{
  $LIST( <60e:repeatable_edit_descriptor>) = SXML_TT(
    "I",
    $NAME(<62:w>));
}    

*------------------------------------------------------------------------------

<60e:repeatable_edit_descriptor>
		= I <62:w> . <67:m> ;

$LIST( <60e:repeatable_edit_descriptor>)    

{
  $LIST( <60e:repeatable_edit_descriptor>) = SXML_TTTT(
    "L",
    $NAME(<62:w>),
    ".",
    $NAME(<67:m>));
}    

*------------------------------------------------------------------------------

<60e:repeatable_edit_descriptor>
		= A ;

$LIST( <60e:repeatable_edit_descriptor>)    

{
  $LIST( <60e:repeatable_edit_descriptor>) = SXML_T("A");
}    

*------------------------------------------------------------------------------

<60e:repeatable_edit_descriptor>
		= A <62:w> ;

$LIST( <60e:repeatable_edit_descriptor>)    

{
  $LIST( <60e:repeatable_edit_descriptor>) = SXML_TT(
    "A",
    $NAME(<62:w>));
}    

*------------------------------------------------------------------------------

<60e:repeatable_edit_descriptor>
		= L <62:w> ;

$LIST( <60e:repeatable_edit_descriptor>)    

{
  $LIST( <60e:repeatable_edit_descriptor>) = SXML_TT(
    "L",
    $NAME(<62:w>));
}    

*------------------------------------------------------------------------------

<60e:repeatable_edit_descriptor>
		= <60g:float_editing> ;

$LIST( <60e:repeatable_edit_descriptor>)    

{
  $LIST( <60e:repeatable_edit_descriptor>) = $LIST(<60g:float_editing>);
}   

*******************************************************************************

<60h:nonrepeatable_edit_descriptor>
		= <68:k> P ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_LT(
    $LIST(<68:k>),
    "P");
}    

*------------------------------------------------------------------------------

<60h:nonrepeatable_edit_descriptor>
		= <68:k> P <61a:[repeat_spec]> <60g:float_editing> ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_LTTL(
    $LIST(<68:k>),
    "P",
    $NAME(<61a:[repeat_spec]>),
    $LIST(<60g:float_editing>));
}    

*------------------------------------------------------------------------------

<60h:nonrepeatable_edit_descriptor>
		= P ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_T("P");
}

*------------------------------------------------------------------------------

<60h:nonrepeatable_edit_descriptor>
		= P <61a:[repeat_spec]> <60g:float_editing> ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_TTL(
    "P",
    $NAME(<61a:[repeat_spec]>),
    $LIST(<60g:float_editing>));
}    

*------------------------------------------------------------------------------

<60h:nonrepeatable_edit_descriptor>
		= <109:character_constant> ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_T($NAME(<109:character_constant>));
}    

*------------------------------------------------------------------------------

<60h:nonrepeatable_edit_descriptor>
		= T <65:c> ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_TT(
    "T",
    $NAME(<65:c>));
}    

*------------------------------------------------------------------------------

<60h:nonrepeatable_edit_descriptor>
		= T L <65:c> ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_TTT(
    "T",
    "L",
    $NAME(<65:c>));
}    

*------------------------------------------------------------------------------

<60h:nonrepeatable_edit_descriptor>
		= T R <65:c> ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_TTT(
    "T",
    "R",
    $NAME(<65:c>));
}

*------------------------------------------------------------------------------

<60h:nonrepeatable_edit_descriptor>
		= <64:n> X ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_TT(
    $NAME(<64:n>),
    "X");
}    

*------------------------------------------------------------------------------

<60h:nonrepeatable_edit_descriptor>
		= S ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_T ( "S");
}    

*------------------------------------------------------------------------------

<60h:nonrepeatable_edit_descriptor>
		= S P ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_T ( "S P");
}    

*------------------------------------------------------------------------------

<60h:nonrepeatable_edit_descriptor>
		= S S ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_T ( "S S");
}    

*------------------------------------------------------------------------------

<60h:nonrepeatable_edit_descriptor>
		= B N ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_T ( "B N");
}    

*------------------------------------------------------------------------------

<60h:nonrepeatable_edit_descriptor>
		= B Z ;

$LIST( <60h:nonrepeatable_edit_descriptor>)    

{
  $LIST( <60h:nonrepeatable_edit_descriptor>) = SXML_T ( "B Z");
}

*******************************************************************************

<60f:/:>	= / ;

$NAME( <60f:/:>)    

{
  $NAME( <60f:/:>) = "/";
}

*------------------------------------------------------------------------------

* En Fortran, il y a deux terminaux '/' et '//'.  Malheureusement, dans le cas 
* <19b:common_part>, un source peut comporter une sequence '/' '/' ou meme,
* dans le cas <60b:fmt_spec_list_/:>, une séquence de '/' ... '/' de longueur 
* indeterminee. Comme les blancs ne jouent aucun role, le scanner peut se
* retrouver avec des sequences de slashs de longueur quelconque. 
* L'interpretation choisie assure qu'un slash rend '/', que deux slashs
* rendent '//' et, plus generalement 2n(+1) slashs rendent n '//' suivis de
* '/'. La grammaire BNF a donc ete modifiee pour accepter le token '//'
* (plutot que '/' '/'). Noter que, lors de l'analyse du texte source '//', le
* scanner retourne '//' (et non pas '/' '/') car f77.lecl contient la regle :
*    "/" = -"/" ; Priority Shift > Reduce;

<60f:/:>	= // ;

$NAME( <60f:/:>)    

{
  $NAME( <60f:/:>) = "//";
}

*------------------------------------------------------------------------------

<60f:/:>	= : ;

$NAME( <60f:/:>)

{
  $NAME( <60f:/:>) = ":";
}

*******************************************************************************

<60g:float_editing>
		= F <62:w> . <66:d> ;

$LIST(<60g:float_editing>)

{
  $LIST(<60g:float_editing>) = SXML_TTTT(
    "F",
    $NAME(<62:w>),
    ".",
    $NAME(<66:d>));
}    

*------------------------------------------------------------------------------

<60g:float_editing>
		= D <62:w> . <66:d> ;

$LIST(<60g:float_editing>)

{
  $LIST(<60g:float_editing>) = SXML_TTTT(
    "D",
    $NAME(<62:w>),
    ".",
    $NAME(<66:d>));
}    

*------------------------------------------------------------------------------

<60g:float_editing>
		= E <62:w> . <66:d> ;

$LIST(<60g:float_editing>)

{
  $LIST(<60g:float_editing>) = SXML_TTTT(
    "E",
    $NAME(<62:w>),
    ".",
    $NAME(<66:d>));
}    

*------------------------------------------------------------------------------

<60g:float_editing>
		= E <62:w> . <66:d> E <63:e> ;

$LIST(<60g:float_editing>)

{
  $LIST(<60g:float_editing>) = SXML_TTTTTT(
    "E",
    $NAME(<62:w>),
    ".",
    $NAME(<66:d>),
    "E",
    $NAME(<63:e>));
}    

*------------------------------------------------------------------------------

<60g:float_editing>
		= G <62:w> . <66:d> ;

$LIST(<60g:float_editing>)

{
  $LIST(<60g:float_editing>) = SXML_TTTT(
    "G",
    $NAME(<62:w>),
    ".",
    $NAME(<66:d>));
}

*------------------------------------------------------------------------------

<60g:float_editing>
		= G <62:w> . <66:d> E <63:e> ;

$LIST(<60g:float_editing>)

{
  $LIST(<60g:float_editing>) = SXML_TTTTTT(
    "G",
    $NAME(<62:w>),
    ".",
    $NAME(<66:d>),
    "E",
    $NAME(<63:e>));
}    

*******************************************************************************

*<61:repeat_spec>
*		= <103:nonzero_unsigned_int_constant> ;

*------------------------------------------------------------------------------

<61:repeat_spec>
		= %repeat_spec ;

$NAME(<61:repeat_spec>)

{
  $NAME(<61:repeat_spec>) = $ptext ("%repeat_spec");
}    

*******************************************************************************

<61a:[repeat_spec]>
		= ;

$NAME(<61a:[repeat_spec]>)

{
  $NAME(<61a:[repeat_spec]>) = NULL;
}    

*------------------------------------------------------------------------------

<61a:[repeat_spec]>
		= <61:repeat_spec> ;

$NAME(<61a:[repeat_spec]>)

{
  $NAME(<61a:[repeat_spec]>) = $NAME( <61:repeat_spec>);
}    

*******************************************************************************

*<62:w>		= <103:nonzero_unsigned_int_constant> ;

<62:w>		= %repeat_spec ;

$NAME(<62:w>)

{
  $NAME(<62:w>) = $ptext ("%repeat_spec");
}

*******************************************************************************

*<63:e>		= <103:nonzero_unsigned_int_constant> ;

<63:e>		= %repeat_spec ;

$NAME(<63:e>)

{
  $NAME(<63:e>) = $ptext ("%repeat_spec");
}

*******************************************************************************

*<64:n>		= <103:nonzero_unsigned_int_constant> ;

<64:n>		= %repeat_spec ;

$NAME(<64:n>)

{
  $NAME(<64:n>) = $ptext ("%repeat_spec");
}

*******************************************************************************

*<65:c>		= <103:nonzero_unsigned_int_constant> ;

<65:c>		= %repeat_spec ;

$NAME(<65:c>)

{
  $NAME(<65:c>) = $ptext ("%repeat_spec");
}

*******************************************************************************

*<66:d>		= <102:unsigned_int_constant> ;

<66:d>		= %repeat_spec ;

$NAME(<66:d>)

{
  $NAME(<66:d>) = $ptext ("%repeat_spec");
}

*******************************************************************************

*<67:m>		= <102:unsigned_int_constant> ;

<67:m>		= %repeat_spec ;

$NAME(<67:m>)

{
  $NAME(<67:m>) = $ptext ("%repeat_spec");
}

*******************************************************************************

*<68:k>		= <104:integer_constant> ;

<68:k>		= %repeat_spec ;

$LIST(<68:k>)

{
  $LIST(<68:k>) = SXML_T($ptext ("%repeat_spec"));
}

*------------------------------------------------------------------------------

<68:k>		= <114:sign> %repeat_spec ;

$LIST(<68:k>)

{
  $LIST(<68:k>) = SXML_TT($NAME(<114:sign>), $ptext ("%repeat_spec"));
}

*******************************************************************************

*<69:h>		= <111:processor_character> ;

*******************************************************************************

<70:statement_function_statement>
		= <99:symbolic_name>  ( )  =  <74:expression> ;

$LIST(<70:statement_function_statement>)
{
  $LIST(<70:statement_function_statement>) = ast_function_statement(
    LOCATION(0),
    $NAME(<99:symbolic_name>),
    NULL,
    $LIST(<74:expression>)    
    );
}    

*------------------------------------------------------------------------------

* Covered by <29:assignment_statement>
*<70:statement_function_statement>
*		= <99:symbolic_name>  ( <99a:symbolic_name_list> )  =  <74:expression> ;

*******************************************************************************

<71:call_statement>
		= CALL  <99:symbolic_name> ;

$LIST(<71:call_statement>)
{
  $LIST(<71:call_statement>) = ast_call_statement(
    $NAME( <99:symbolic_name>),
    LOCATION(0),
    NULL );
}

*------------------------------------------------------------------------------

<71:call_statement>
		= CALL  <99:symbolic_name>  ( ) ;

$LIST(<71:call_statement>)
{
  $LIST(<71:call_statement>) = ast_call_statement(
    $NAME( <99:symbolic_name>),
    LOCATION(0),
    NULL );
}

*------------------------------------------------------------------------------

<71:call_statement>
		= CALL  <99:symbolic_name>  ( <71a:actual_argument_list> ) ;

$LIST( <71:call_statement>)
{
  $LIST(<71:call_statement>) = ast_call_statement(
    $NAME( <99:symbolic_name>),
    LOCATION(0),
    $LIST( <71a:actual_argument_list>) );
}

*******************************************************************************

<71a:actual_argument_list>
		= <71a:actual_argument_list> ,  <71b:actual_argument> ;

$LIST( <71a:actual_argument_list>)
{
  $LIST( <71a:actual_argument_list>) = SXML_LTL(
    $LIST( <71a:actual_argument_list>'),
    ",\n",
    $LIST( <71b:actual_argument>) );
}

*------------------------------------------------------------------------------

<71a:actual_argument_list>
		= <71b:actual_argument> ;

$LIST( <71a:actual_argument_list>)
{
  $LIST( <71a:actual_argument_list>) = SXML_T("\"<71a>.2\"");
}

*******************************************************************************

<71b:actual_argument>
		= <74:expression> ;

$LIST( <71b:actual_argument>)
{
  $LIST( <71b:actual_argument>) = SXML_T("\"<71b>.1\"");
}

*------------------------------------------------------------------------------

* Subsumed by <74:expression>
*<71b:actual_argument>
*		= <99:symbolic_name> ;

*------------------------------------------------------------------------------

<71b:actual_argument>
		= * <110b:label_ref> ;

$LIST( <71b:actual_argument>)
{
  $LIST( <71b:actual_argument>) = SXML_T("\"<71b>.2\"");
}

*******************************************************************************

* An alternate return is not allowed in a function subprogram.

<72:return_statement>
		= RETURN ;

$LIST( <72:return_statement>)
{
  $LIST( <72:return_statement>) = NULL;
}

*------------------------------------------------------------------------------

<72:return_statement>
		= RETURN  <77:integer_expr> ;

$LIST( <72:return_statement>)
{
  $LIST( <72:return_statement>) = SXML_T("<72>.2");
}

*******************************************************************************

* Covered by <88b:function_reference_or_array_element_name>
*<73:function_reference>
*		= <98:function_name>  ( [<74:expression> {, <74:expression>}] ) ;

*******************************************************************************

<74:expression>	= <76:arithmetic_expression> ;

$LIST( <74:expression>)
{
  $LIST( <74:expression>) = ast_unknown_parameter(
    "<74>.1",
    LOCATION(0)
    );
}

*------------------------------------------------------------------------------

<74:expression>	= <82:character_expression> ;

$LIST( <74:expression>)
{
  $LIST( <74:expression>) = ast_unknown_parameter(
    "<74>.2",
    LOCATION(0)
    );
}

*------------------------------------------------------------------------------

<74:expression>	= <84:logical_expression> ;

$LIST( <74:expression>)
{
  $LIST( <74:expression>) = ast_unknown_parameter(
    "<74>.3",
    LOCATION(0)
    );
}

*------------------------------------------------------------------------------

<74:expression>	= <74a:non_typed_expression> ;

$LIST( <74:expression>)
{
  $LIST( <74:expression>) = ast_unknown_parameter(
    "<74>.4",
    LOCATION(0)
    );
}

*******************************************************************************

<74a:non_typed_expression>
		= <99:symbolic_name> ;

*------------------------------------------------------------------------------

<74a:non_typed_expression>
		= <88b:function_reference_or_array_element_name> ;

*------------------------------------------------------------------------------

<74a:non_typed_expression>
		= ( <74a:non_typed_expression> ) ;

*******************************************************************************

<74b:expression_list>
		= <74b:expression_list> ,  <74:expression> ;

*------------------------------------------------------------------------------

<74b:expression_list>
		= <74:expression> ;

*******************************************************************************

<75:constant_expr>
		= <79:arithmetic_const_expr> ;

*------------------------------------------------------------------------------

<75:constant_expr>
		= <83:character_const_expr> ;

*------------------------------------------------------------------------------

<75:constant_expr>
		= <85:logical_const_expr> ;

*------------------------------------------------------------------------------

<75:constant_expr>
		= <75a:non_typed_const_expr> ;

*******************************************************************************

<75a:non_typed_const_expr>
		= <99:symbolic_name> ;

*------------------------------------------------------------------------------

<75a:non_typed_const_expr>
		=  ( <75a:non_typed_const_expr> ) ;

*******************************************************************************

* A constant name, variable name, array element name, or function reference in an
* arithmetic expression must be of type integer, real, double precision, or complex.
* Tables 2 and 3 (6.1.4) list prohibited combinations involving operand of type complex.

<76:arithmetic_expression>
		= <114:sign> <76b:arithmetic_or_non_typed_expression> ;

$LIST( <76:arithmetic_expression>)
{
  $LIST( <76:arithmetic_expression>) = ast_unknown_parameter(
    "<76>",
    LOCATION(0)
    );
}    

*------------------------------------------------------------------------------

<76:arithmetic_expression>
		= <76a:arithmetic_expression> ;

$LIST( <76:arithmetic_expression>)
{
  $LIST( <76:arithmetic_expression>) = ast_unknown_parameter(
    "<76>",
    LOCATION(0)
    );
}   

*******************************************************************************

<76a:arithmetic_expression>
		= <76b:arithmetic_or_non_typed_expression> + <76b:arithmetic_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<76a:arithmetic_expression>
		= <76b:arithmetic_or_non_typed_expression> - <76b:arithmetic_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<76a:arithmetic_expression>
		= <76b:arithmetic_or_non_typed_expression> * <76b:arithmetic_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<76a:arithmetic_expression>
		= <76b:arithmetic_or_non_typed_expression> / <76b:arithmetic_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<76a:arithmetic_expression>
		= <76b:arithmetic_or_non_typed_expression> ** <76b:arithmetic_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<76a:arithmetic_expression>
		= <101:unsigned_arithmetic_constant> ;

*------------------------------------------------------------------------------

<76a:arithmetic_expression>
		= ( <76:arithmetic_expression> ) ;

*******************************************************************************

<76b:arithmetic_or_non_typed_expression>
		= <76a:arithmetic_expression> ;

*------------------------------------------------------------------------------

<76b:arithmetic_or_non_typed_expression>
		= <74a:non_typed_expression> ;

*******************************************************************************

* An integer expression is an arithmetic expression of type integer.

<77:integer_expr>
		= <76:arithmetic_expression> ;

$LIST( <77:integer_expr>)
{
  $LIST( <77:integer_expr>) = $LIST(<76:arithmetic_expression>);
}

*------------------------------------------------------------------------------

<77:integer_expr>
		= <74a:non_typed_expression> ;

$LIST( <77:integer_expr>)
{
  $LIST( <77:integer_expr>) = $LIST(<74a:non_typed_expression>);
}    

*******************************************************************************

<77a:integer_const_expr>
		= <79:arithmetic_const_expr> ;

*------------------------------------------------------------------------------

<77a:integer_const_expr>
		= <75a:non_typed_const_expr> ;

*******************************************************************************

<77b:[integer_expr]>
		= <77:integer_expr> ;

*------------------------------------------------------------------------------

<77b:[integer_expr]>
		= ;

*******************************************************************************

* An int_real_dp_expression is an arithmetic expression of type integer,
* real, or double precision.

<78:int_real_dp_expr>
		= <77:integer_expr> ;

*******************************************************************************

* A constant name in an arithmetic constant expression must be of type integer,
* real, or complex.
* Tables 2 and 3 (6.1.4) list prohibited combinations involving operand of type complex.
* The right hand operand (the exponent) of the ** operator must be of type integer.

<79:arithmetic_const_expr>
		= <114:sign> <79b:arithmetic_or_non_typed_const_expr> ;

*------------------------------------------------------------------------------

<79:arithmetic_const_expr>
		= <79a:arithmetic_const_expr> ;

*******************************************************************************

<79a:arithmetic_const_expr>
		= <79b:arithmetic_or_non_typed_const_expr> + <79b:arithmetic_or_non_typed_const_expr> ;

*------------------------------------------------------------------------------

<79a:arithmetic_const_expr>
		= <79b:arithmetic_or_non_typed_const_expr> - <79b:arithmetic_or_non_typed_const_expr> ;

*------------------------------------------------------------------------------

<79a:arithmetic_const_expr>
		= <79b:arithmetic_or_non_typed_const_expr> * <79b:arithmetic_or_non_typed_const_expr> ;

*------------------------------------------------------------------------------

<79a:arithmetic_const_expr>
		= <79b:arithmetic_or_non_typed_const_expr> / <79b:arithmetic_or_non_typed_const_expr> ;

*------------------------------------------------------------------------------

<79a:arithmetic_const_expr>
		= <79b:arithmetic_or_non_typed_const_expr> ** <79b:arithmetic_or_non_typed_const_expr> ;

*------------------------------------------------------------------------------

<79a:arithmetic_const_expr>
		= <101:unsigned_arithmetic_constant> ;

*------------------------------------------------------------------------------

<79a:arithmetic_const_expr>
		= ( <79:arithmetic_const_expr> ) ;

*******************************************************************************

<79b:arithmetic_or_non_typed_const_expr>
		= <79a:arithmetic_const_expr> ;

*------------------------------------------------------------------------------

<79b:arithmetic_or_non_typed_const_expr>
		= <75a:non_typed_const_expr> ;

*******************************************************************************

* A constant name in an integer constant expression must be of type integer.

<80:int_constant_expr>
		= <114:sign> <80a:int_constant_expr> ;

$LIST( <80:int_constant_expr>)
{
  $LIST( <80:int_constant_expr>) = ast_unary_expression(
    $NAME( <114:sign>),
    $LIST( <80a:int_constant_expr>) );
}

*------------------------------------------------------------------------------

<80:int_constant_expr>
		= <80a:int_constant_expr> ;

$LIST( <80:int_constant_expr>)
{
  $LIST( <80:int_constant_expr>) = $LIST( <80a:int_constant_expr>);
}

*******************************************************************************

<80a:int_constant_expr>
		= <80a:int_constant_expr> + <80a:int_constant_expr> ;

$LIST( <80a:int_constant_expr>)
{
  $LIST( <80a:int_constant_expr>) = ast_binary_expression(
    $LIST( <80a:int_constant_expr>' ),
    "+",
    $LIST( <80a:int_constant_expr>'') );
}

*------------------------------------------------------------------------------

<80a:int_constant_expr>
		= <80a:int_constant_expr> - <80a:int_constant_expr> ;

$LIST( <80a:int_constant_expr>)
{
  $LIST( <80a:int_constant_expr>) = ast_binary_expression(
    $LIST( <80a:int_constant_expr>' ),
    "-",
    $LIST( <80a:int_constant_expr>'') );
}

*------------------------------------------------------------------------------

<80a:int_constant_expr>
		= <80a:int_constant_expr> * <80a:int_constant_expr> ;

$LIST( <80a:int_constant_expr>)
{
  $LIST( <80a:int_constant_expr>) = ast_binary_expression(
    $LIST( <80a:int_constant_expr>' ),
    "*",
    $LIST( <80a:int_constant_expr>'') );
}

*------------------------------------------------------------------------------

<80a:int_constant_expr>
		= <80a:int_constant_expr> / <80a:int_constant_expr> ;

$LIST( <80a:int_constant_expr>)
{
  $LIST( <80a:int_constant_expr>) = ast_binary_expression(
    $LIST( <80a:int_constant_expr>' ),
    "/",
    $LIST( <80a:int_constant_expr>'') );
}

*------------------------------------------------------------------------------

<80a:int_constant_expr>
		= <80a:int_constant_expr> ** <80a:int_constant_expr> ;

$LIST( <80a:int_constant_expr>)
{
  $LIST( <80a:int_constant_expr>) = ast_binary_expression(
    $LIST( <80a:int_constant_expr>' ),
    "**",
    $LIST( <80a:int_constant_expr>'') );
}

*------------------------------------------------------------------------------

<80a:int_constant_expr>
		= <102:unsigned_int_constant> ;

$LIST( <80a:int_constant_expr>)
{
  $LIST( <80a:int_constant_expr>) = ast_literal_expression(
    $NAME( <102:unsigned_int_constant>) );
}

*------------------------------------------------------------------------------

<80a:int_constant_expr>
		= <99:symbolic_name> ;

$LIST( <80a:int_constant_expr>)
{
  $LIST( <80a:int_constant_expr>) = ast_variable_expression(
    $NAME( <99:symbolic_name>) );
}

*------------------------------------------------------------------------------

<80a:int_constant_expr>
		= ( <80:int_constant_expr> ) ;

$LIST( <80a:int_constant_expr>)
{
  $LIST( <80a:int_constant_expr>) = ast_parenthesis_expression(
    $LIST( <80:int_constant_expr>) );
}

*******************************************************************************

* Each variable name in a dimension bound expression must be of type integer and
* must be a dummy argument or in a common block.

<81:dim_bound_expr>
		= <80:int_constant_expr> ;

$LIST( <81:dim_bound_expr>)
{
  $LIST( <81:dim_bound_expr>) = $LIST( <80:int_constant_expr>);
}

*------------------------------------------------------------------------------

*<81:dim_bound_expr>
*		= <114:sign> <81a:dim_bound_expr> ;

*------------------------------------------------------------------------------

*<81:dim_bound_expr>
*		= <81a:dim_bound_expr> ;

*******************************************************************************

*<81a:dim_bound_expr>
*		= <81a:dim_bound_expr> + <81a:dim_bound_expr> ;
*<81a:dim_bound_expr>
*		= <81a:dim_bound_expr> - <81a:dim_bound_expr> ;
*<81a:dim_bound_expr>
*		= <81a:dim_bound_expr> * <81a:dim_bound_expr> ;
*<81a:dim_bound_expr>
*		= <81a:dim_bound_expr> / <81a:dim_bound_expr> ;
*<81a:dim_bound_expr>
*		= <81a:dim_bound_expr> ** <81a:dim_bound_expr> ;
*<81a:dim_bound_expr>
*		= <102:unsigned_int_constant> ;
*<81a:dim_bound_expr>
*		= <99:symbolic_name> ;
*<81a:dim_bound_expr>
*		= ( <81:dim_bound_expr> ) ;

*******************************************************************************

* A constant name, variable name, array element name, or function reference
* must be of type character in a character expression.

<82:character_expression>
		= <82a:character_or_non_typed_expression> // <82a:character_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<82:character_expression>
		= <109:character_constant> ;

*------------------------------------------------------------------------------

<82:character_expression>
		= <89:substring_name> ;

*------------------------------------------------------------------------------

<82:character_expression>
		= ( <82:character_expression> ) ;

*******************************************************************************

<82a:character_or_non_typed_expression>
		= <82:character_expression> ;

$LIST( <82a:character_or_non_typed_expression>)
{
  $LIST( <82a:character_or_non_typed_expression>) = ast_unknown_parameter(
    "<82a>.1",
    LOCATION(0)
    );
}    

*------------------------------------------------------------------------------

<82a:character_or_non_typed_expression>
		= <74a:non_typed_expression> ;

$LIST( <82a:character_or_non_typed_expression>)
{
  $LIST( <82a:character_or_non_typed_expression>) = ast_unknown_parameter(
    "<82a>.2",
    LOCATION(0)
    );
}    

*******************************************************************************

* A constant name must be of type character in a character constant expression.

*------------------------------------------------------------------------------

<83:character_const_expr>
		= <83:character_const_expr> // <83:character_const_expr> ;

*------------------------------------------------------------------------------

<83:character_const_expr>
		= <109:character_constant> ;

*------------------------------------------------------------------------------

* Done by the outside world
*<83:character_const_expr>
*		= <99:symbolic_name> ;

*------------------------------------------------------------------------------

<83:character_const_expr>
		= ( <83:character_const_expr> ) ;

*******************************************************************************

* A constant name, variable name, array element name, or function reference
* must be of type logical in a logical expression.

<84:logical_expression>
		= <84b:logical_or_non_typed_expression>  .AND.  <84b:logical_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<84:logical_expression>
		= <84b:logical_or_non_typed_expression>  .OR.  <84b:logical_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<84:logical_expression>
		= <84b:logical_or_non_typed_expression>  .EQV.  <84b:logical_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<84:logical_expression>
		= <84b:logical_or_non_typed_expression>  .NEQV.  <84b:logical_or_non_typed_expression> ;

*------------------------------------------------------------------------------

<84:logical_expression>
		= <84c:logical_factor> ;

*******************************************************************************

<84c:logical_factor>
		= <84d:logical_primary> ;

*------------------------------------------------------------------------------

<84c:logical_factor>
		= .NOT.  <84e:logical_or_non_typed_primary> ;

*******************************************************************************

<84d:logical_primary>
		= <108:logical_constant> ;

*------------------------------------------------------------------------------

<84d:logical_primary>
		= <86:relational_expression> ;

*------------------------------------------------------------------------------

<84d:logical_primary>
		= ( <84:logical_expression> ) ;

*******************************************************************************

<84b:logical_or_non_typed_expression>
		= <84:logical_expression> ;

*------------------------------------------------------------------------------

<84b:logical_or_non_typed_expression>
		= <74a:non_typed_expression> ;

*******************************************************************************

<84e:logical_or_non_typed_primary>
		= <84d:logical_primary> ;

*------------------------------------------------------------------------------

<84e:logical_or_non_typed_primary>
		= <74a:non_typed_expression> ;

*******************************************************************************

* A constant name must be of type logical in a logical constant expression.
* Also, each primary in the relational expression must be a constant expression

<85:logical_const_expr>
		= <85b:logical_or_non_typed_const_expr>  .AND.  <85b:logical_or_non_typed_const_expr> ;

*------------------------------------------------------------------------------

<85:logical_const_expr>
		= <85b:logical_or_non_typed_const_expr>  .OR.  <85b:logical_or_non_typed_const_expr> ;

*------------------------------------------------------------------------------

<85:logical_const_expr>
		= <85b:logical_or_non_typed_const_expr>  .EQV.  <85b:logical_or_non_typed_const_expr> ;

*------------------------------------------------------------------------------

<85:logical_const_expr>
		= <85b:logical_or_non_typed_const_expr>  .NEQV.  <85b:logical_or_non_typed_const_expr> ;

*------------------------------------------------------------------------------

<85:logical_const_expr>
		= <85c:logical_const_fact> ;

*******************************************************************************

<85c:logical_const_fact>
		= <85d:logical_const_prim> ;

*------------------------------------------------------------------------------

<85c:logical_const_fact>
		= .NOT. <85e:logical_or_non_typed_const_prim> ;

*******************************************************************************

<85d:logical_const_prim>
		= <108:logical_constant> ;

*------------------------------------------------------------------------------

<85d:logical_const_prim>
		= <86a:relational_const_expr> ;

*------------------------------------------------------------------------------

<85d:logical_const_prim>
		= ( <85:logical_const_expr> ) ;

*******************************************************************************

<85b:logical_or_non_typed_const_expr>
		= <85:logical_const_expr> ;

*------------------------------------------------------------------------------

<85b:logical_or_non_typed_const_expr>
		= <75a:non_typed_const_expr> ;

*******************************************************************************

<85e:logical_or_non_typed_const_prim>
		= <85d:logical_const_prim> ;

*------------------------------------------------------------------------------

<85e:logical_or_non_typed_const_prim>
		= <75a:non_typed_const_expr> ;

*******************************************************************************

* An arithmetic expression of type complex is permitted only when the relational
* operator id .EQ. or .NE.

<86:relational_expression>
		= <86b:arithmetic_or_character_expression>  <87:rel_op>  <86b:arithmetic_or_character_expression> ;

*------------------------------------------------------------------------------

*<86:relational_expression>
*		= <76:arithmetic_expression> <87:rel_op> <76:arithmetic_expression> ;
*<86:relational_expression>
*		= <76:arithmetic_expression> <87:rel_op> <74a:non_typed_expression> ;
*<86:relational_expression>
*		= <82:character_expression> <87:rel_op> <82:character_expression> ;
*<86:relational_expression>
*		= <82:character_expression> <87:rel_op> <74a:non_typed_expression> ;
*<86:relational_expression>
*		= <74a:non_typed_expression> <87:rel_op> <76:arithmetic_expression> ;
*<86:relational_expression>
*		= <74a:non_typed_expression> <87:rel_op> <74a:non_typed_expression> ;
*<86:relational_expression>
*		= <74a:non_typed_expression> <87:rel_op> <82:character_expression> ;

*******************************************************************************

<86a:relational_const_expr>
		= <86c:arithmetic_or_character_const_expr> <87:rel_op> <86c:arithmetic_or_character_const_expr> ;

*------------------------------------------------------------------------------

*<86a:relational_const_expr>
*		= <79:arithmetic_const_expr> <87:rel_op> <79:arithmetic_const_expr> ;
*<86a:relational_const_expr>
*		= <79:arithmetic_const_expr> <87:rel_op> <75a:non_typed_const_expr> ;
*<86a:relational_const_expr>
*		= <83:character_const_expr> <87:rel_op> <83:character_const_expr> ;
*<86a:relational_const_expr>
*		= <83:character_const_expr> <87:rel_op> <75a:non_typed_const_expr> ;
*<86a:relational_const_expr>
*		= <75a:non_typed_const_expr> <87:rel_op> <79:arithmetic_const_expr> ;
*<86a:relational_const_expr>
*		= <75a:non_typed_const_expr> <87:rel_op> <75a:non_typed_const_expr> ;
*<86a:relational_const_expr>
*		= <75a:non_typed_const_expr> <87:rel_op> <83:character_const_expr> ;

*******************************************************************************

<86b:arithmetic_or_character_expression>
		= <77:integer_expr> ;

*------------------------------------------------------------------------------

<86b:arithmetic_or_character_expression>
		= <82:character_expression> ;

*******************************************************************************

<86c:arithmetic_or_character_const_expr>
		= <77a:integer_const_expr> ;

*------------------------------------------------------------------------------

<86c:arithmetic_or_character_const_expr>
		= <83:character_const_expr> ;

*******************************************************************************

<87:rel_op>	= .LT. ;

*------------------------------------------------------------------------------

<87:rel_op>	= .LE. ;

*------------------------------------------------------------------------------

<87:rel_op>	= .EQ. ;

*------------------------------------------------------------------------------

<87:rel_op>	= .NE. ;

*------------------------------------------------------------------------------

<87:rel_op>	= .GT. ;

*------------------------------------------------------------------------------

<87:rel_op>	= .GE. ;

*******************************************************************************

* At most 7 integer_expr are allowed as indexes

<88:array_element_name>
		= <99:symbolic_name>  ( <74b:expression_list> ) ;

$LIST( <88:array_element_name>)
{
  $LIST( <88:array_element_name>) = ast_unknown_parameter(
    "<88>",
    LOCATION(0)
    );
}   

*******************************************************************************

<88b:function_reference_or_array_element_name>
		= <88:array_element_name> ;

$LIST( <88b:function_reference_or_array_element_name>)
{
  $LIST( <88b:function_reference_or_array_element_name>) = ast_unknown_parameter(
    "<88b>.1",
    LOCATION(0)
    );
}    

*------------------------------------------------------------------------------

<88b:function_reference_or_array_element_name>
		= <99:symbolic_name>  ( ) ;

$LIST( <88b:function_reference_or_array_element_name>)
{
  $LIST( <88b:function_reference_or_array_element_name>) = ast_unknown_parameter(
    "<88b>.2",
    LOCATION(0)
    );
}    

*******************************************************************************

<88a:variable_or_array_element_name>
		= <99:symbolic_name> ;

$LIST( <88a:variable_or_array_element_name>)
{
  $LIST( <88a:variable_or_array_element_name>) = SXML_T(SXML_Q($NAME(<99:symbolic_name>)));
}    

*------------------------------------------------------------------------------

<88a:variable_or_array_element_name>
		= <88b:function_reference_or_array_element_name> ;

$LIST( <88a:variable_or_array_element_name>)
{
  $LIST( <88a:variable_or_array_element_name>) = $LIST(<88b:function_reference_or_array_element_name>);
}    

*******************************************************************************

* The lower bound <77b:[integer_expr]> is covered by <74:expression>

<89:substring_name>
		= <99:symbolic_name>  ( <74:expression>  :  <77b:[integer_expr]> ) ;

$LIST( <89:substring_name>)
{
  $LIST( <89:substring_name>) = ast_unknown_parameter(
    "<89>.1",
    LOCATION(0)
    );
}   

*------------------------------------------------------------------------------

<89:substring_name>
		= <99:symbolic_name>  ( :  <77b:[integer_expr]> ) ;

$LIST( <89:substring_name>)
{
  $LIST( <89:substring_name>) = ast_unknown_parameter(
    "<89>.2",
    LOCATION(0)
    );
}    

*------------------------------------------------------------------------------

<89:substring_name>
		= <88b:function_reference_or_array_element_name>  ( <77b:[integer_expr]>  :  <77b:[integer_expr]> ) ;

$LIST( <89:substring_name>)
{
  $LIST( <89:substring_name>) = ast_unknown_parameter(
    "<89>.3",
    LOCATION(0)
    );
}    

*******************************************************************************

*<90:constant_name>
*		= <99:symbolic_name> ;
*<91:variable_name>
*		= <99:symbolic_name> ;
*<92:array_name>
*		= <99:symbolic_name> ;
*<93:common_block_name>
*		= <99:symbolic_name> ;
*<94:program_name>
*		= <99:symbolic_name> ;
*<95:block_data_subprogram_name>
*		= <99:symbolic_name> ;
*<96:procedure_name>
*		= <97:subroutine_name> ;
*<96:procedure_name>
*		= <98:function_name> ;
*<97:subroutine_name>
*		= <99:symbolic_name> ;
*<98:function_name>
*		= <99:symbolic_name> ;

*******************************************************************************

<99:symbolic_name> 
		= %symbolic_name ;

$NAME(<99:symbolic_name>)

	$NAME(<99:symbolic_name>) = $ptext ("%symbolic_name");
	
*------------------------------------------------------------------------------

<99:symbolic_name> 
		= THEN ;

$NAME(<99:symbolic_name>)

	$NAME(<99:symbolic_name>) = "THEN";

*******************************************************************************

<99a:symbolic_name_list>
		= <99a:symbolic_name_list> ,  <99:symbolic_name> ;

$LIST(<99a:symbolic_name_list>)
{
  $LIST(<99a:symbolic_name_list>) = SXML_LTT(
    $LIST( <99a:symbolic_name_list>'),
    ",\n",
    SXML_Q ($NAME( <99:symbolic_name>)) );
}

*------------------------------------------------------------------------------

<99a:symbolic_name_list>
		= <99:symbolic_name> ;

$LIST(<99a:symbolic_name_list>)
{
  $LIST(<99a:symbolic_name_list>) = SXML_T(
    SXML_Q ( $NAME( <99:symbolic_name>)) );
}

*******************************************************************************

<100:constant>	= <101:unsigned_arithmetic_constant> ;

*------------------------------------------------------------------------------

<100:constant>	= <114:sign> <101:unsigned_arithmetic_constant> ;

*------------------------------------------------------------------------------

<100:constant>	= <109:character_constant> ;

*------------------------------------------------------------------------------

<100:constant>	= <108:logical_constant> ;

*******************************************************************************

<101:unsigned_arithmetic_constant>
		= <102:unsigned_int_constant> ;

*------------------------------------------------------------------------------

<101:unsigned_arithmetic_constant>
		= <105:unsigned_real_constant> ;

*------------------------------------------------------------------------------

<101:unsigned_arithmetic_constant>
		= <106:unsigned_dp_constant> ;

*------------------------------------------------------------------------------

<101:unsigned_arithmetic_constant>
		= <107:complex_constant> ;

*******************************************************************************

<102:unsigned_int_constant>
		= %unsigned_int_constant ;

$NAME (<102:unsigned_int_constant>)
{
  $NAME (<102:unsigned_int_constant>) = $ptext( "%unsigned_int_constant");
}

*******************************************************************************

<103:nonzero_unsigned_int_constant>
		= %unsigned_int_constant ;

$NAME( <103:nonzero_unsigned_int_constant>)
{
  $NAME( <103:nonzero_unsigned_int_constant>) = $ptext ("%unsigned_int_constant");
}

*******************************************************************************

*<104:integer_constant>
*		= <114:sign> %unsigned_int_constant ;
*<104:integer_constant>
*		= %unsigned_int_constant ;

*******************************************************************************

<105:unsigned_real_constant>
		= %unsigned_real_constant ;

*******************************************************************************

<106:unsigned_dp_constant>
		= %unsigned_dp_constant ;

*******************************************************************************

<107:complex_constant>
		= ( <107a:real_part> ,  <107b:complex_part> ) ;

*******************************************************************************

<107a:real_part>
		= <105:unsigned_real_constant> ;

*------------------------------------------------------------------------------

<107a:real_part>
		= <102:unsigned_int_constant> ;

*------------------------------------------------------------------------------

<107a:real_part>
		= <114:sign> <105:unsigned_real_constant> ;

*------------------------------------------------------------------------------

<107a:real_part>
		= <114:sign> <102:unsigned_int_constant> ;

*******************************************************************************

<107b:complex_part>
		= <107a:real_part> ;

*******************************************************************************

<108:logical_constant>
		= .TRUE. ;

$NAME( <108:logical_constant>)
{
  $NAME( <108:logical_constant>) = ".TRUE.";
}    

*------------------------------------------------------------------------------

<108:logical_constant>
		= .FALSE. ;

$NAME( <108:logical_constant>)
{
  $NAME( <108:logical_constant>) = ".FALSE.";
}

*******************************************************************************

<109:character_constant>
		= %character_constant ;

$NAME (<109:character_constant>)
{
  $NAME (<109:character_constant>) = $ptext( "%character_constant");
}

*******************************************************************************

* At most 5 digits are allowed in a label or in a label_ref
<110:label>	= %label ;

$NAME( <110:label>)
{
  $NAME( <110:label>) = $ptext ("%label");
}

*******************************************************************************

<110a:label_ref_list>
		= <110a:label_ref_list> ,  <110b:label_ref> ;

$LIST(<110a:label_ref_list>)
{
  $LIST(<110a:label_ref_list>) = SXML_LTT(
    $LIST( <110a:label_ref_list>'),
    ",\n",
    SXML_Q ($NAME( <110b:label_ref>)) );
}

*------------------------------------------------------------------------------

<110a:label_ref_list>
		= <110b:label_ref> ;

$LIST(<110a:label_ref_list>)
{
  $LIST(<110a:label_ref_list>) = SXML_T(
    SXML_Q ( $NAME( <110b:label_ref>)) );
}

*******************************************************************************

<110b:label_ref>
		= %unsigned_int_constant ;

$NAME( <110b:label_ref>)
{
  $NAME( <110b:label_ref>) = $ptext ("%unsigned_int_constant");
}    

*******************************************************************************

*<111:processor_character>
*		= <112:apostrophe> ;
*<111:processor_character>
*		= <113:nonapostrophe_character> ;

*******************************************************************************

*<112:apostrophe>
*		= ' ;

*******************************************************************************

*<113:nonapostrophe_character>
*		= <114:sign> ;
*<113:nonapostrophe_character>
*		= <115:digit> ;
*<113:nonapostrophe_character>
*		= <116:letter> ;
*<113:nonapostrophe_character>
*		= * ;
*<113:nonapostrophe_character>
*		= / ;
*<113:nonapostrophe_character>
*		= ( ;
*<113:nonapostrophe_character>
*		= ) ;
*<113:nonapostrophe_character>
*		= , ;
*<113:nonapostrophe_character>
*		= . ;
*<113:nonapostrophe_character>
*		= : ;
*<113:nonapostrophe_character>
*		= + ;
*<113:nonapostrophe_character>
*		= $ ;
*<113:nonapostrophe_character>
*		= " " ;

*******************************************************************************

<114:sign>	= + ;

$NAME( <114:sign>)
{
  $NAME( <114:sign>) = "+";
}

*------------------------------------------------------------------------------

<114:sign>	= - ;

$NAME( <114:sign>)
{
  $NAME( <114:sign>) = "-";
}

*******************************************************************************

*<115:digit>	= 0 ;
*<115:digit>	= 1 ;
*<115:digit>	= 2 ;
*<115:digit>	= 3 ;
*<115:digit>	= 4 ;
*<115:digit>	= 5 ;
*<115:digit>	= 6 ;
*<115:digit>	= 7 ;
*<115:digit>	= 8 ;
*<115:digit>	= 9 ;

*******************************************************************************

*<116:letter>	= A ;
*<116:letter>	= B ;
*<116:letter>	= C ;
*<116:letter>	= D ;
*<116:letter>	= E ;
*<116:letter>	= F ;
*<116:letter>	= G ;
*<116:letter>	= H ;
*<116:letter>	= I ;
*<116:letter>	= J ;
*<116:letter>	= K ;
*<116:letter>	= L ;
*<116:letter>	= M ;
*<116:letter>	= N ;
*<116:letter>	= O ;
*<116:letter>	= P ;
*<116:letter>	= Q ;
*<116:letter>	= R ;
*<116:letter>	= S ;
*<116:letter>	= T ;
*<116:letter>	= U ;
*<116:letter>	= V ;
*<116:letter>	= W ;
*<116:letter>	= X ;
*<116:letter>	= Y ;
*<116:letter>	= Z ;

*******************************************************************************

