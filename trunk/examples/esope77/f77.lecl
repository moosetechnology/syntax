Abbreviations
   int		= {DIGIT}+ ;
   id		= (UPPER | LOWER @6 | "_") {UPPER | LOWER @6 | DIGIT | "$" | "_"} ;
        -- "$" + "_" : extension
	-- @6 : @Lower_To_Upper + test is_ansi
   R_exp	= ("E" | "e" @6) ["+-"] DIGIT&TRUE {DIGIT} ;
   DP_exp	= ("D" | "d" @6) ["+-"] DIGIT&TRUE {DIGIT} ;
   R_exp_id	= ("E" | "e" @6) ["+-"] {DIGIT}+ ;
   DP_exp_id	= ("D" | "d" @6) ["+-"] {DIGIT}+ ;	

Zombies
   -- these are "dummy" tokens", with no lexical specification, but useful
   "!DO", %ENDDO, "!FORMAT", BACKSPACEkw, ENDFILEkw, REWINDkw, READkw, "!END";

Tokens
   %label	= DIGIT &0    -- colonne entre 1 et 5?
                   {DIGIT &0} ;
                   @0 ;  -- regarder dans la pile des boucles DO
   %letter      = LETTER &is_set(1) | "_" &is_set(1) ; @9 ;
                  -- ajout pour specifier les elements d'une instruction IMPLICIT
		  -- [[EXTENSION]] : "_" peut commencer un id
		  -- @9 : Les mots-cles d'une lettre sont aussi reconnus par %letter, on les rechange en %letter

   %symbolic_name
		= id ; @1 ;
		  -- @1 => Est-ce un mot-cle suivi d'autre chose ?
			Priority Shift > Reduce;

   %int_id	= int id ; @5 ;
		  -- ce terminal sert a resoudre des conflits LECL ; %int_id
		  -- designe un entier suivi d'un identificateur ; il est
		  -- transforme' par sa post-action lexicale @5 qui le decoupe
		  -- en une sequence de deux tokens %unsigned_int_constant et
		  -- %symbolic_name ; le scanner ne retourne donc jamais
		  -- %int_id ;
		  -- @5 redecoupage en int id si precede de CHARACTER *
			Context All But %symbolic_name ;

   %unsigned_int_constant
		= int ;
			Unbounded Context All But %symbolic_name ;
		  -- 3 caracteres de pre-vision ".E?" pour differencier un entier suivi
		  -- de l'operateur de relation .EQ. ou de l'operateur logique .EQV. d'un reel

   %unsigned_real_constant
		= Union
			without_dot : int R_exp_id ; @5 ;
		  	-- @5 redecoupage en int id si precede de CHARACTER *
				Priority Reduce > Reduce ;

   			with_inside_dot : int "." [int] [R_exp] ;

   			with_leading_dot : "." int [R_exp] ;
		  End ;

   %unsigned_dp_constant
		= Union
			without_dot : int DP_exp_id ; @5 ;
		  	-- @5 redecoupage en int id si precede de CHARACTER *
				Priority Reduce > Reduce ;

   			with_dot : int "." [int] DP_exp | "." int DP_exp ;
		  End ;

   %character_constant
		= Union
		  	apostrophe :	"'" { ^"'\n" | "'" "'" &TRUE} "'" ;
			double_quote :	quote { ^"\"\n" | quote quote &TRUE} quote ; @2 ;
		  	   -- @2 : traitement des chaines entre quotes
		  	Hollerith :	(DIGIT |DIGIT&Is_Set(0)) {DIGIT} ("H"&TRUE | "h"&TRUE @6) ; @4 ;
			   -- Is_Set(0) <=> inside a format statement.
			   -- @6 : test ansi (pas de minuscules)
		  	   -- @4 : traitement d'une zone Hollerith
		  End ;

   "/"		= -"/" ;
			Priority Shift > Reduce;

-- Dans une ligne logique, le compteur no 2 contient le niveau de parenthesage
   "("          = -"(" @Incr (2) ; @8 ;
                  -- @8 : si is_implicit_statement => @Set(1)

   ")"          = -")" @Reset(1) @Decr (2) ; -- ... dans tous les cas

   %EOL		= -EOL @Reset (2) ; @3 ; -- traitement du ENDDO

   EOF		= -NUL &False ; @7 ; -- Verifications de fin de programme


-- Format specification processing (see also %character_constant.Hollerith)
-- Is_Set(0) <=> inside a format statement.
   %repeat_spec
		= DIGIT&Is_Set(0) {DIGIT} ;

   format_kw	= (UPPER&Is_Set(0) | LOWER&Is_Set(0) @6) ;

   "."		= Union
			kw_or_dot : "." @10 id ["."&True -- Pour les mots-clés
						|"*"|"=" -- Contextes droits spécifiques à id
					       ] ; @11 ;
			-- Reconnait les mots-clefs logiques ou relationnels en premier (Ex : .EQ.)
			-- Sinon @11 remet le source manager dans l'état où il était en @10
			-- Le "." de gauche est reconnu (pointeur), le contexte droit (id ["."]) sera lu deux fois 
				Priority Shift > Reduce ;
							  
			in_a_format : -"." &Is_set(0) ;
		  End;
   
   "*"		= -"*" ; @12 ; -- Si le "*" est le flag de l'instruction
   		       	       -- SEGDES , <88a:variable_or_array_element_name> *
			       -- [ <123c:mode> | ( <123c:mode> , <123c:mode> { , <123c:mode> } ) ]
			       -- On positionne star_flag_mode_tok_no

   old_seg_kw_type
		= "*"&1 (UPPER | LOWER @6) [UPPER | LOWER @6 | digit] ;
		     -- &1 <=> On est dans une carte logique SEGMENT quelconque, et au bon niveau de parenthésage.
		     --        On reconnait un mot-clé désignant un type, par exemple "*R8"
