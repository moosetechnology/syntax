#! /bin/sh

# Hubert Garavel - August 2023

COMMAND=`basename "$0"`

SX=`dirname "$0"`/../..
ARCH=`$SX/etc/bin/arch`

F77=bin/f77
F77OUT=bin.$ARCH/f77.out

PPF77=bin/ppf77
PPF77OUT=bin.$ARCH/ppf77.out

SPLIT_OPTION=0
VALGRIND_OPTION=0

WD=`pwd`
WD=`basename "$WD"`

while true
do
	case "$1" in
		-split )
			# do not concatenate continuation lines
			SPLIT_OPTION=1
			shift
			;;
		-valgrind )
			# only run valgrind
			VALGRIND_OPTION=1
			shift
			;;
		-* )
			echo "$COMMAND: unknown option $1"
			exit 1
			;;
		* )
			break
	esac
done

#------------------------------------------------------------------------------

if [ $SPLIT_OPTION = 0 ]
then
	SCRIPT=`mktemp`
	cat > $SCRIPT << \EOF
# display comment lines
/^C/ { printf "\n%s", $0 ; next }

# non-continuation line with a zero in column 6: remove the zero
/^[ 0-9][ 0-9][ 0-9][ 0-9][ 0-9]0/ { printf "\n      %s", substr ($0, 7) ; next }

# continuation line without '0' nor ' ' in column 6
/^[ ][ ][ ][ ][ ][^0 ]/ { printf " %s", substr ($0, 7) ; next }

# non-continuation line without a zero in column 6
{ printf "\n%s", $0 }

END {
	printf "\n"
}
EOF
fi

#------------------------------------------------------------------------------

if [ $VALGRIND_OPTION = 1 ]
then
	VALGRIND="valgrind --quiet --track-origins=yes"
	export VALGRIND
fi

#------------------------------------------------------------------------------

FILTER() {
	# remove columns 72-80 of all lines not starting with a "C"
	awk '/^C/ { print ; next } { print substr ($0, 1, 72) }' |
	# remove empty lines
	grep -v '^[ ]*$' |
	# concatenate continuation lines
	if [ $SPLIT_OPTION = 0 ]
	then
		awk -f $SCRIPT -
	else
		cat
	fi
}

#------------------------------------------------------------------------------

RUN() {
	echo ""
	case "$1" in
		-X ) echo "----------- $WD:f77 -X" "$2" | sed -e 's+test/++' ;;
		* )  echo "----------- $WD:f77" "$1" | sed -e 's+test/++' ;;
	esac

	if [ $VALGRIND_OPTION = 1 ]
	then
		echo ""
		# on a positionne la variable globale $VALGRIND
		$F77 $*
		return
	fi

	$F77 $*
	STATUS=$?
	if [ $STATUS != 0 ]
	then
		echo "  exit status is $STATUS"
	fi
}

#------------------------------------------------------------------------------

if [ ! -x $F77OUT -a ! -x $PPF77OUT ]
then
	echo "$COMMAND: no executable f77.out nor ppf77.out found; run sxmake to build them"
	exit 1
fi

#------------------------------------------------------------------------------

if [ -x $F77OUT ]
then
	echo "*** testing $WD:f77 executable"

	for FILE in `ls test/esope/*.E test/evref/*.FOR test/misc/*.f test/nist/*.FOR`
	do
		case "$FILE" in
			test/esope/* )
				# only for f77+ESOPE extensions
				case `pwd` in
					*esope* )
						# one does not need to call RUN
						# with option -X since this
						# option is automatically set
						# in the esope77 binary
						RUN $FILE
						;;
					* )
						# on ignore le test
						;;
				esac
				;;

			test/evref/extension-* | test/misc/*x.f )
				# this test contains F77 extensions and only
				# succeeds when f77 is called with option -X
				RUN -X $FILE
				;;

			* )
				# standard F77
				# we can test with and without option -X
				RUN $FILE
				RUN -X $FILE
				;;
		esac
	done 
fi

#------------------------------------------------------------------------------

if [ -x $PPF77OUT ]
then
	echo "*** testing $WD:ppf77 executable"

	TMP1=`mktemp`
	TMP2=`mktemp`

	for FILE in `ls test/misc/*.f test/nist/*.FOR`
	do
		echo ""
		echo "ppf77" "$FILE" | sed -e 's+test/++'
		cp $FILE $TMP1

		case "$FILE" in
			test/evref/extension-* )
				OPTION="-X"
				;;
			* )
				OPTION=""
				;;
		esac

		if [ $VALGRIND_OPTION = 1 ]
		then
			echo ""
			# on a positionne la variable globale $VALGRIND
			$PPF77 $OPTION $TMP1
			continue
		fi

		$PPF77 $OPTION < $TMP1 > $TMP2

		$PPF77 $OPTION $TMP1
		# ici $TMP1 a ete modifie par ppf77
		STATUS=$?
		if [ $STATUS != 0 ]
		then
			echo "  exit status is $STATUS"
		fi

		cmp -s $TMP1 $TMP2
		if [ $? != 0 ]
		then
			echo "   pff77 $OPTION < FILE and pff77 FILE give different results"
		fi

		# here, files $TMP1 and $TMP2 are identical

		cat $TMP1 | FILTER > $TMP2
		# here, $TMP2 is the pretty-printed output file (filtered by FILTER)

		cat $FILE | FILTER > $TMP1
		# here, $TMP1 is the input FORTRAN file (filtered by FILTER)

		# to compare $TMP1 and $TMP2, one must understand the changes
		# made by ppf77 :
		# - it preserves the comments
		# - it removes fully empty lines
		# - it removes columns 72-80 of each non-comment line (if
		#   columns 1-71 are empty, the line is removed)
		# - it turns identifiers from upper to lower case (e.g., ZVS
		#   -> zvs)
		#   but preserves the case of keywords
		# - it inserts a few spaces, e.g., WRITE(NUVI,41) ->
		#   WRITE (nuvi, 41)
	
		diff -iw $TMP1 $TMP2 | more
done 

fi

#------------------------------------------------------------------------------

rm -f $SCRIPT $TMP1 $TMP2

exit 0

