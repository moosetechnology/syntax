Abbreviations
   int		= {DIGIT}+ ;
   id		= (UPPER | LOWER @6) {UPPER | LOWER @6 | DIGIT} ;
	-- @6 : @Lower_To_Upper + test is_ansi
   R_exp	= ("E" | "e" @6) ["+-"] int ;	
   DP_exp	= ("D" | "d" @6) ["+-"] int ;	

Zombies
   -- these are "dummy" tokens", with no lexical specification, but useful
   "!DO", %ENDDO, "!FORMAT", BACKSPACEkw, ENDFILEkw, REWINDkw, READkw;

Tokens
   %label	= DIGIT &0    -- colonne entre 1 et 5?
                   {DIGIT &0} ;
                   @0 ;  -- regarder dans la pile des boucles DO

   %symbolic_name
		= id ; @1 ;
		  -- @1 => Est-ce un mot-cle suivi d'autre chose ?
			Priority Shift > Reduce;

   %int_id	= int id ; @5 ;
		  -- @5 redecoupage en int id si precede de CHARACTER *
			Context All But %symbolic_name ;

   %unsigned_int_constant
		= int ;
			Unbounded Context All But %symbolic_name ;
		  -- 3 caracteres de pre-vision ".E?" pour differencier un entier suivi
		  -- de l'operateur de relation .EQ. ou de l'operateur logique .EQV. d'un reel

   %unsigned_real_constant
		= Union
			without_dot : int R_exp ; @5 ;
		  	-- @5 redecoupage en int id si precede de CHARACTER *
				Priority Reduce > Reduce ;

   			with_inside_dot : int "." [int] [R_exp] ;

   			with_leading_dot : "." int [R_exp] ;
		  End ;

   %unsigned_dp_constant
		= Union
			without_dot : int DP_exp ; @5 ;
		  	-- @5 redecoupage en int id si precede de CHARACTER *
				Priority Reduce > Reduce ;

   			with_dot : int "." [int] DP_exp | "." int DP_exp ;
		  End ;

   %character_constant
		= Union
		  	apostrophe :	"'" { ^"'\n" | "'" "'" &TRUE} "'" ;
			double_quote :	quote { ^"\"\n" | quote -quote &TRUE} quote ; @2 ;
		  	   -- @2 : traitement des chaines entre quotes
		  	Hollerith :	(DIGIT |DIGIT&Is_Set(0)) {DIGIT} ("H"&TRUE | "h"&TRUE @6) ; @4 ;
		  	   -- @4 : traitement d'une zone Hollerith
		  End ;

   logical_or_relational_kw
		= "." {UPPER | LOWER @6}+ "." ;


   "/"		= -"/" ;
			Priority Shift > Reduce;

   %EOL		= -EOL ; @3 ; -- traitement du ENDDO

   EOF		= -NUL &False ; @7 ; -- it exists one MAIN program


-- Format specification processing (see also %character_constant.Hollerith)
-- Is_Set(0) <=> inside a format statement.
   %repeat_spec
		= DIGIT&Is_Set(0) {DIGIT} ;

   format_kw	= (UPPER&Is_Set(0) | LOWER&Is_Set(0) @6) ;

