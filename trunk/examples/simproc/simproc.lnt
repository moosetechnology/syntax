(*
 *-----------------------------------------------------------------------------
 *                        S I M P R O C
 *-----------------------------------------------------------------------------
 *   INRIA Rhone-Alpes / VASY
 *   655, avenue de l'Europe
 *   38330 MONTBONNOT ST MARTIN cedex
 *-----------------------------------------------------------------------------
 *   Module             :       simproc.lnt
 *   Auteurs            :       Marc Herbert, Hubert Garavel, Wendelin Serwe
 *   Version            :       1.37
 *   Date               :       2023/07/03 19:05:44
 *-----------------------------------------------------------------------------
*)

module simproc
   with ==, !=
is

-------------------------------------------------------------------------------

type BLOCK is
   !implementedby "C_TYPE_BLOCK"
   !printedby "C_PRINT_BLOCK"
   !pointer
   CONS_BLOCK
	(
	DD		: DECLS,
	SS		: STMTS,
	CORRECT		: BOOL,
	ATTSYMTAB	: S_TABLE,
	PROCNAME	: ID
	)
end type

-------------------------------------------------------------------------------

function CONS_BLOCK_SEMC (D : DECLS, S : STMTS) : BLOCK is
    !implementedby "C_BLOCK"
    return CONS_BLOCK
		(
		D,
		S,
		FALSE,
		NIL_TABLE,
		NEWID ("blocupprocidtocompute")
		)
end function

-------------------------------------------------------------------------------

type DECLS is
    !implementedby "C_TYPE_DECLS"
    NIL_DECLS
    	!implementedby "C_DECLS_NIL",
    CONS_DECLS (D_HEAD : DECL, DD_QUEUE : DECLS)
	!implementedby "C_DECLS_CONS"
end type

-------------------------------------------------------------------------------

type STMTS is
    !implementedby "C_TYPE_STMTS" !pointer
    LAST_STMTS (S_HEAD : STMT)
	!implementedby "C_STMTS_TAIL",
    CONS_STMTS (S_HEAD : STMT, SS_QUEUE : STMTS)
	!implementedby "C_STMTS_CONS"
end type

-------------------------------------------------------------------------------

type DECL is
    !implementedby "C_TYPE_DECL"
    CONS_DECL (NAME : ID, UPROC : ID, DECL_CHOICE : DECL_UNION)
end type

-------------------------------------------------------------------------------

function CONS_DECL_SEMC (NAMEID : ID, DTYPE : DECL_UNION) : DECL is
    !implementedby "C_DECL_CONS"
    return CONS_DECL (NAMEID, NEWID ("uprocidtocompute"), DTYPE)
end function

-------------------------------------------------------------------------------

type DECL_UNION is
    !implementedby "C_TYPE_DECL_UNION"
    INT_DECL
	!implementedby "C_DECL_INT",
    ARRAY_DECL (DIM : NUMBER)
	!implementedby "C_DECL_ARRAY",
    PROC_DECL (VALUE_PARAMETER : ID, REFERENCE_PARAMETER : ID, BODY : BLOCK)
	!implementedby "C_DECL_PROC"
end type

-------------------------------------------------------------------------------

type STMT is
    !implementedby "C_TYPE_STMT" !pointer
    ASSIGN (V : VARIABLE, E : EXPR)
	!implementedby "C_ASSIGN",
    CONS_CALL_STMT (CS : CALL_STMT)
	!implementedby "C_CONS_CALL_STMT",
    IF_THEN_ELSE (E1, E2 : EXPR, S_THEN : STMTS, S_ELSE : STMTS)
	!implementedby "C_IF_THEN_ELSE",
    ASSIGN_REF (REFERENCE : VARIABLE, E : EXPR)
end type

-------------------------------------------------------------------------------

type CALL_STMT is
    !implementedby "C_TYPE_STMT_CALL"
    CALL (PROCID : ID, E:EXPR, REFERENCE : VARIABLE, UPROC : ID)
end type

-------------------------------------------------------------------------------

function CONS_CALL_SEMC
(
	PROCID 		: ID,
	E 		: EXPR,
	REFERENCE 	: VARIABLE
) : CALL_STMT is
    !implementedby "C_STMT_CALL"
    return CALL (PROCID, E, REFERENCE, NEWID ("calluprocidtocompute"))
end function

-------------------------------------------------------------------------------

type EXPR is
    !implementedby "C_TYPE_EXPR"
    BIN_EXPR (OPER : OP, E1 : EXPR, E2 : EXPR)
	!implementedby "C_BIN_EXPR",
    CONSTANT (C : NUMBER)
	!implementedby "C_CONSTANT",
    VAR_EXPR (V : VARIABLE)
	!implementedby "C_USED_VAR"
end type

-------------------------------------------------------------------------------

type OP is
    !implementedby "C_TYPE_OP"
    PLUS    !implementedby "C_PLUS",
    MINUS   !implementedby "C_MINUS",
    MUL     !implementedby "C_MUL",
    DIV     !implementedby "C_DIV"
end type

-------------------------------------------------------------------------------

type VARIABLE is
    !implementedby "C_TYPE_VARIABLE" !pointer
    SIMPLE_VAR (NAME : ID)
	!implementedby "C_SIMPLE_VAR",
    INDEXED_VAR (NAME : ID, INDEX : EXPR)
	!implementedby "C_INDEXED_VAR",
    REFTO_VAR (REFV : REFVAR)
end type

-------------------------------------------------------------------------------

type REFVAR is
    CONS_REFVAR (NAME:ID)
end type

-------------------------------------------------------------------------------

type NUMBER is
    !implementedby "C_TYPE_NUMBER"
    STRUCT_NUMBER (SXINDEX : NAT, TEXT : STRING, LINE : NAT, VAL : INT)
end type

-------------------------------------------------------------------------------

function CONS_STRUCT_NUMBER_SEMC
(
  SXINDEX	: NAT,
  TEXT		: STRING,
  LINE		: NAT
) : NUMBER is
    !implementedby "C_STRUCT_NUMBER"
    return STRUCT_NUMBER (SXINDEX, TEXT, LINE, INT (TEXT))
end function

-------------------------------------------------------------------------------

type ID is
    !implementedby "C_TYPE_ID"
    STRUCT_ID (SXINDEX : NAT, TEXT : STRING, LINE : NAT)
	!implementedby "C_STRUCT_ID"
end type	

-------------------------------------------------------------------------------

function SXNULL () : NAT is
    return 0
end function

-------------------------------------------------------------------------------

function LINENULL () : NAT is
    return 0
end function

-------------------------------------------------------------------------------

function NEWID (S : STRING) : ID is
    return  STRUCT_ID (SXNULL, S, LINENULL)
end function

-------------------------------------------------------------------------------
-- CHECK section : semantic check and symbol table construction --
-------------------------------------------------------------------------------

-- symbol table library sub-part

type MODE is
    VARTYPEID,
    REFTYPEID,
    ARRAYTYPEID,
    PROCTYPEID,
    UNKNOWNID
end type

-------------------------------------------------------------------------------

type SYMBOL is
	CONS_SYMBOL (TEXT : STRING, INFO : MODE)
end type

-------------------------------------------------------------------------------

type SLOT is
	SEPARATEUR,
	CONS_SLOT_SYMBOL (SYMB : SYMBOL)
end type

-------------------------------------------------------------------------------

type S_TABLE is
	!implementedby "C_S_TABLE"
	NIL_TABLE,
	CONS_TABLE (SLOT_HEAD : SLOT, SLOTS_QUEUE : S_TABLE)
end type

-------------------------------------------------------------------------------

function LOOKUP (SEARCHED : STRING , TABLE : S_TABLE) : MODE is
    case TABLE var HEAD : SLOT, QUEUE : S_TABLE in
      NIL_TABLE ->
	return UNKNOWNID
    | CONS_TABLE (HEAD,QUEUE) ->
	case HEAD var S : SYMBOL in
	  CONS_SLOT_SYMBOL (S) ->
		if SEARCHED == S.TEXT then
		  return S.INFO
		else
		  return LOOKUP (SEARCHED, QUEUE)
		end if
	| SEPARATEUR ->
		return LOOKUP (SEARCHED, QUEUE)
	end case
    end case
end function

-------------------------------------------------------------------------------

function LOOKUPINBLOCK (SEARCHED : STRING , TABLE : S_TABLE) : bool is
    case TABLE var HEAD : SLOT, QUEUE : S_TABLE in
      NIL_TABLE	->
	return FALSE
    | CONS_TABLE (HEAD,QUEUE) ->
	case HEAD var S:SYMBOL in
	  CONS_SLOT_SYMBOL (S)	->
		if SEARCHED == S.TEXT then
		  return TRUE
		else
		  return LOOKUPINBLOCK (SEARCHED,QUEUE)
		end if
	| SEPARATEUR ->
		return FALSE
	end case
    end case
end function

-------------------------------------------------------------------------------

function INSERT (INSERTED : STRING, INFO : MODE, in out TABLE : S_TABLE) is
    TABLE := CONS_TABLE
		(
		CONS_SLOT_SYMBOL
			(
			CONS_SYMBOL (INSERTED, INFO)
			),
		TABLE
		)
end function

-------------------------------------------------------------------------------

-- insert a separator in the symbol table before entering a block,
-- in order to be able to distinguish local symbols

function ENTER_BLOCK (in out TABLE : S_TABLE) is
    TABLE := CONS_TABLE ( SEPARATEUR, TABLE )
end function

-------------------------------------------------------------------------------
-- end of table library sub-part here
-------------------------------------------------------------------------------
-- remainder of "CHECK" part  following
-------------------------------------------------------------------------------

function CHECK_NUMBER (NUM : NUMBER, out CORRECT2 : BOOL)  is
    if (NUM.TEXT != "SEMC-ERROR-TOKEN")
    then
	var RESU : INT in
	    trap exception CONVERSION_ERROR is
		PRINTFERROR(NUM.LINE, NUM.TEXT, "unreadable");
		CORRECT2 := FALSE
	    in
		RESU := INT [CONVERSION_ERROR] (NUM.TEXT);
		SIDEAFFECT_INT (NUM.VAL, RESU);
		CORRECT2 := TRUE
	    end trap
	end var
    else
	CORRECT2 := FALSE;
	PRINTFERROR (NUM.LINE, "number", "not recognized")
    end if
end function

-------------------------------------------------------------------------------

function CHECK_VAR (V : VARIABLE, SYMBOLS : S_TABLE, out CORRECT2 : BOOL) is
    case V var VID : ID, IDX : EXPR in
      SIMPLE_VAR (VID) ->
	if (VID.TEXT == "SEMC-ERROR-TOKEN")
	then
	    CORRECT2 := FALSE;
	    PRINTFWRONGID (VID.LINE)
	else
	    case LOOKUP (VID.TEXT, SYMBOLS) in
	      UNKNOWNID ->
		CORRECT2 := FALSE;
		PRINTFUNKNOWN (VID.LINE, VID.TEXT)
	    | VARTYPEID
	    | REFTYPEID	->
		CORRECT2 := TRUE
	    | any ->
		CORRECT2 := FALSE;
		PRINTFERROR (VID.LINE, VID.TEXT, "is not a variable")
	    end case
	end if
    | INDEXED_VAR (VID,IDX) ->
	if (VID.TEXT == "SEMC-ERROR-TOKEN")
	then
	    CORRECT2 :=  FALSE;
	    PRINTFWRONGID (VID.LINE)
	else
	    case LOOKUP (VID.TEXT, SYMBOLS) in
	      UNKNOWNID	->
		CORRECT2 :=  FALSE;
		PRINTFUNKNOWN (VID.LINE,VID.TEXT)

	    | ARRAYTYPEID ->
		CHECK_EXPR (IDX, SYMBOLS, ?CORRECT2)

	    | any ->
		CORRECT2 :=  FALSE;
		PRINTFERROR (VID.LINE, VID.TEXT, "is not an array")
	    end case
	end if
    | REFTO_VAR (...) ->
	CORRECT2 := FALSE;
	PRINTFINTERNERROR ("CHECK_VAR, REFTO_VAR")
    end case
end function

-------------------------------------------------------------------------------

function CHECK_EXPR
(
	EXPRESSION 	: EXPR,
	SYMBOLS 	: S_TABLE,
  out 	CORRECT2	: BOOL
) is
    case EXPRESSION var K : NUMBER, V : VARIABLE, EXP1, EXP2 : EXPR in
      CONSTANT (K) ->
	CHECK_NUMBER (K, ?CORRECT2)
    | VAR_EXPR (V) ->
	CHECK_VAR (V, SYMBOLS, ?CORRECT2)
    | BIN_EXPR (any of OP, EXP1, EXP2) ->
	var CORRECT_SUB1, CORRECT_SUB2, CORRECT_OP : BOOL in
	    CORRECT_OP := TRUE;
	    CHECK_EXPR (EXP1, SYMBOLS, ?CORRECT_SUB1);
	    CHECK_EXPR (EXP2, SYMBOLS, ?CORRECT_SUB2);
	    CORRECT2 := CORRECT_SUB1 and CORRECT_SUB2 and CORRECT_OP
	end var
    end case
end function

-------------------------------------------------------------------------------

function CHECK_STMTS
(
	INSTRUCTIONS	: STMTS,
	SYMBOLS 	: S_TABLE,
  out var CORRECT2 	: BOOL
) is
    case INSTRUCTIONS var HEAD : STMT, QUEUE : STMTS in
      LAST_STMTS(HEAD) ->
	CHECK_STMT (HEAD, SYMBOLS, ?CORRECT2)
    | CONS_STMTS(HEAD,QUEUE) ->
	var CORRECT_INST : BOOL in
	    CHECK_STMT (HEAD, SYMBOLS, ?CORRECT_INST);
	    CHECK_STMTS (QUEUE, SYMBOLS, ?CORRECT2);
	    CORRECT2 := CORRECT2 and CORRECT_INST
	end var
    end case
end function

-------------------------------------------------------------------------------

function CHECK_STMT
(
	INSTR		: STMT,
	SYMBOLS		: S_TABLE,
  out 	CORRECT2	: BOOL
) is
    case INSTR var
      VAR1           	: VARIABLE,
      EXP1, EXP2     	: EXPR,
      INSTS1,INSTS2  	: STMTS,
      CALLST	 	: CALL_STMT,
      CALLID	 	: ID
    in
      ASSIGN (VAR1,EXP1) ->
	var CORRECT_SUB1, CORRECT_SUB2 : BOOL in
	    CHECK_VAR (VAR1,SYMBOLS, ?CORRECT_SUB1);
	    CHECK_EXPR (EXP1,SYMBOLS, ?CORRECT_SUB2);
	    CORRECT2 := CORRECT_SUB1 and CORRECT_SUB2
	end var
    | IF_THEN_ELSE (EXP1,EXP2,INSTS1,INSTS2) ->
	var
            CORRECT_SUB1, CORRECT_SUB2, CORRECT_SUB3, CORRECT_SUB4 : BOOL
        in
	    CHECK_EXPR  (EXP1,   SYMBOLS, ?CORRECT_SUB1);
	    CHECK_EXPR  (EXP2,   SYMBOLS, ?CORRECT_SUB2);
	    CHECK_STMTS (INSTS1, SYMBOLS, ?CORRECT_SUB3);
	    CHECK_STMTS (INSTS2, SYMBOLS, ?CORRECT_SUB4);
	    CORRECT2 := CORRECT_SUB1 and CORRECT_SUB2
			and CORRECT_SUB3 and CORRECT_SUB4
	end var
    | CONS_CALL_STMT (CALLST) ->
	CALLID	:= CALLST.PROCID;
	EXP1	:= CALLST.E;
	VAR1	:= CALLST.REFERENCE;
	if (CALLID.TEXT == "SEMC-ERROR-TOKEN")
	then
	    CORRECT2 := FALSE;
	    PRINTFWRONGID (CALLID.LINE)
	else
	    case LOOKUP (CALLID.TEXT, SYMBOLS) in
	      UNKNOWNID ->
		CORRECT2 :=  FALSE;
		PRINTFUNKNOWN (CALLID.LINE, CALLID.TEXT)
	    | PROCTYPEID ->
		var CORRECT_SUB1, CORRECT_SUB2 : BOOL in
		    CHECK_EXPR (EXP1, SYMBOLS, ?CORRECT_SUB1);
		    CHECK_VAR (VAR1,SYMBOLS, ?CORRECT_SUB2);
		    CORRECT2 := CORRECT_SUB1 and CORRECT_SUB2
		end var
	    | any ->
		CORRECT2 := FALSE;
		PRINTFERROR
			(
			CALLID.LINE,
			CALLID.TEXT,
			"is not a procedure"
			)
	    end case
	end if
    | ASSIGN_REF (...) ->
	CORRECT2 := FALSE;
	PRINTFINTERNERROR ("CHECK_STMT, ASSIGN_REF")
    end case
end function

-------------------------------------------------------------------------------

function CHECK_PROGRAM (BL : BLOCK) : BOOL is
    !implementedby "C_CHECK_PROGRAM"
    var
	B1, B2		: BOOL
    in
	CHECK_BLOCK (BL, NIL_TABLE, ?B1, ?B2, NEWID ("Prog"));
	return (B1 and B2)
    end var	
end function

-------------------------------------------------------------------------------

function CHECK_BLOCK
(
	CHECKED_BLOCK		: BLOCK,
  in 	SYMTAB			: S_TABLE,
  out 	CORRECT1		: BOOL,
  out var CORRECT2		: BOOL,
	UPROCNAME		: ID
) is
    !implementedby "C_CHECK_BLOCK"
    var
  	TEMP_ST		: S_TABLE,
	CORRECT2_DECLS	: BOOL
    in
  	TEMP_ST	:= SYMTAB;

(*
 * 2 semantics passes : the first one collects symbols of current
 * level and builds the local symbole table CHECKED_BLOCK.ATTSYMTAB that will
 * be used during the second phase (recursive traversal of blocks); the second
 * phase controls the correctness of Statements.
 *)

(* 1st pass *)
	CHECK_DECLS_FAST (CHECKED_BLOCK.DD, !?TEMP_ST);

(* symbol table updated here *)
	SIDEAFFECT_S_TABLE (CHECKED_BLOCK.ATTSYMTAB, TEMP_ST);
	SIDEAFFECT_ID (CHECKED_BLOCK.PROCNAME, UPROCNAME);

(*
 * 2nd pass, which recursively call "CHECK_BLOCK" on nested blocs.  The
 * "locally empty" symbol table coming from the upper bloc is given again
 * as an argument, cause we redo the collecting of the first pass, and
 * signal errors this time
 *)
	CHECK_DECLS_DIVE
		(
		CHECKED_BLOCK.DD,
		SYMTAB,
		CHECKED_BLOCK.ATTSYMTAB,
		?CORRECT1,
		?CORRECT2_DECLS
		);
	CHECK_STMTS
		(
		CHECKED_BLOCK.SS,
		CHECKED_BLOCK.ATTSYMTAB,
		?CORRECT2
		);
	CORRECT2 := CORRECT2 and CORRECT2_DECLS
    end var
end function (* CHECK_BLOCK *)

-------------------------------------------------------------------------------

function CHECK_DECLS_FAST (DECLARATIONS : DECLS, in out TEMP_ST : S_TABLE) is
(*
 * no error messages here, they will be printed in the second pass by
 * CHECK_DECLS_DIVE
 *)
    case DECLARATIONS var D : DECL, QUEUE : DECLS in
      NIL_DECLS	->
	null
(* we have gone through all DECLS *)
    | CONS_DECLS (D,QUEUE) ->
	var
	    NAMEID	: ID,
	    DTYPE	: DECL_UNION
	in
	    NAMEID := D.NAME;
	    DTYPE := D.DECL_CHOICE;
	    case DTYPE var	
		VID1, VID2	: ID,
		SIZE		: NUMBER
	    in
		INT_DECL ->
		    if NAMEID.TEXT == "SEMC-ERROR-TOKEN" then
			null
		    elsif LOOKUPINBLOCK (NAMEID.TEXT, TEMP_ST) then
			null
		    else
			INSERT (NAMEID.TEXT, VARTYPEID, !?TEMP_ST)
		    end if
	    | ARRAY_DECL (SIZE) ->
		var READABLE_SIZE : BOOL in
		    CHECK_NUMBER (SIZE, ?READABLE_SIZE);
		    if NAMEID.TEXT == "SEMC-ERROR-TOKEN" then
			null
		    elsif LOOKUPINBLOCK (NAMEID.TEXT, TEMP_ST) then
			null
		    elsif READABLE_SIZE then
			if SIZE.VAL == 0 then
			    null
			else
			    INSERT (NAMEID.TEXT, ARRAYTYPEID, !?TEMP_ST)
			end if
		    else
			null
		    end if
		end var
	    | PROC_DECL (VID1, VID2, any of BLOCK) ->
		if NAMEID.TEXT == "SEMC-ERROR-TOKEN" then
		    null
		elsif LOOKUPINBLOCK (NAMEID.TEXT,TEMP_ST) then
		    null
		elsif VID1.TEXT == "SEMC-ERROR-TOKEN" then
		    null
		elsif VID2.TEXT == "SEMC-ERROR-TOKEN" then
		    null
		elsif VID1.TEXT == VID2.TEXT then
		    null
		else
		    INSERT (NAMEID.TEXT, PROCTYPEID, !?TEMP_ST)
		end if
	    end case;
	    (* recursive call for next DECL *)
	    CHECK_DECLS_FAST (QUEUE, !?TEMP_ST)
	end var
    end case
end function

-------------------------------------------------------------------------------

function CHECK_DECLS_DIVE
(
	DECLARATIONS		: DECLS,
  in var TEMP_ST		: S_TABLE,
  in 	SYMTAB			: S_TABLE,
  out var CORRECT1, CORRECT2 	: BOOL
) is
    case DECLARATIONS var D : DECL, QUEUE : DECLS in
      NIL_DECLS ->
	CORRECT1 := TRUE;
	CORRECT2 := TRUE
    | CONS_DECLS (D,QUEUE) ->
	var
	    NAMEID 			: ID,
	    DTYPE			: DECL_UNION,
	    CORRECT1D, CORRECT2D	: BOOL
	in
	    NAMEID := D.NAME;
	    DTYPE := D.DECL_CHOICE;
	    case DTYPE var
	 	VID1, VID2	: ID,
		SIZE		: NUMBER,
		CORPS		: BLOCK
	    in
	      INT_DECL ->
		CORRECT2D := TRUE;
		if NAMEID.TEXT == "SEMC-ERROR-TOKEN" then
		    CORRECT1D := FALSE;
		    PRINTFWRONGID (NAMEID.LINE)
		elsif LOOKUPINBLOCK (NAMEID.TEXT, TEMP_ST) then
		    CORRECT1D := FALSE;
		    PRINTFREDEF (NAMEID.LINE, NAMEID.TEXT)
		else
	 	    CORRECT1D := TRUE;
		    INSERT (NAMEID.TEXT, VARTYPEID, !?TEMP_ST)
		end if
	    | ARRAY_DECL (SIZE) ->
		CORRECT2D := TRUE;
		var READABLE_SIZE : BOOL in
		    CHECK_NUMBER (SIZE, ?READABLE_SIZE);
		    if NAMEID.TEXT == "SEMC-ERROR-TOKEN" then
			CORRECT1D := FALSE;
			PRINTFWRONGID (NAMEID.LINE)
		    elsif LOOKUPINBLOCK (NAMEID.TEXT, TEMP_ST) then
			CORRECT1D := FALSE;
			PRINTFREDEF (NAMEID.LINE, NAMEID.TEXT)
		    elsif READABLE_SIZE then
			if SIZE.VAL == 0 then CORRECT1D := FALSE;
			PRINTFERROR
				(
				NAMEID.LINE,
				NAMEID.TEXT,
				"is null size"
				)
			else
			    INSERT (NAMEID.TEXT, ARRAYTYPEID, !?TEMP_ST);
			    CORRECT1D := TRUE
			end if
		    else CORRECT1D := FALSE
		    end if
		end var	
	    | PROC_DECL (VID1, VID2, CORPS) ->
		CORRECT1D := FALSE;
		if NAMEID.TEXT == "SEMC-ERROR-TOKEN" then
		    PRINTFWRONGID (NAMEID.LINE)
		elsif LOOKUPINBLOCK (NAMEID.TEXT, TEMP_ST) then
		    PRINTFREDEF (NAMEID.LINE, NAMEID.TEXT)
		elsif VID1.TEXT == "SEMC-ERROR-TOKEN" then
		    PRINTFWRONGID (VID1.LINE)
		elsif VID2.TEXT == "SEMC-ERROR-TOKEN" then
		    PRINTFWRONGID (VID2.LINE)
		elsif VID1.TEXT == VID2.TEXT then
		    PRINTFREDEF (VID2.LINE, VID2.TEXT)
		else
		    CORRECT1D := TRUE;
		    INSERT (NAMEID.TEXT, PROCTYPEID, !?TEMP_ST)
		end if;
		(* if this procedure DECL is CORRECT1D,
		then we dive-CHECK into it with CHECK_BLOCK () *)
		if CORRECT1D then
		    var
			CORRECT1_CORPS, CORRECT2_CORPS	: BOOL,
			SYMTAB_CORPS 			: S_TABLE
		    in
			SYMTAB_CORPS := SYMTAB;
			ENTER_BLOCK (!?SYMTAB_CORPS);
			INSERT (VID1.TEXT, VARTYPEID, !?SYMTAB_CORPS);
			INSERT (VID2.TEXT, REFTYPEID, !?SYMTAB_CORPS);
			CHECK_BLOCK
				(
				CORPS,
				SYMTAB_CORPS,
				?CORRECT1_CORPS,
				?CORRECT2_CORPS,
				NAMEID
				);
			CORRECT2D := CORRECT1_CORPS and CORRECT2_CORPS
		    end var
		else
		    CORRECT2D := FALSE
		end if
	    end case;
	    (* recursive call for next DECL *)
	    CHECK_DECLS_DIVE
			(
			QUEUE,
			TEMP_ST,
			SYMTAB,
			?CORRECT1,
			?CORRECT2
			);
	    CORRECT1 := CORRECT1 and CORRECT1D;
	    CORRECT2 := CORRECT2 and CORRECT2D
	end var
    end case
end function

-------------------------------------------------------------------------------
-- COMPUTE section
-------------------------------------------------------------------------------

function COMPUTE_BLOCK (B : BLOCK) is
    !implementedby "C_COMPUTE_BLOCK"
    COMPUTE_DECLS (B.DD, B.PROCNAME);
    COMPUTE_STMTS (B.SS, B.PROCNAME, B.ATTSYMTAB)
end function

-------------------------------------------------------------------------------

function COMPUTE_DECLS (in var DD : DECLS, PROCNAME : ID) is
    while DD != NIL_DECLS loop
    (* this case just for field extraction *)
	case DD var D_HEAD:  DECL, DD_QUEUE : DECLS in
	  CONS_DECLS (D_HEAD, DD_QUEUE) ->
		COMPUTE_DECL (D_HEAD, PROCNAME);
		DD := DD_QUEUE
	| any ->
		PRINTFINTERNERROR ("COMPUTE_DECLS, loop")
	end case
    end loop
end function

-------------------------------------------------------------------------------

function COMPUTE_DECL (D : DECL, PROCNAME : ID) is
    SIDEAFFECT_ID (D.UPROC, PROCNAME);
    var DTYPE : DECL_UNION in
	DTYPE := D.DECL_CHOICE;
	case DTYPE var B_PROC : BLOCK in
	  PROC_DECL (BODY -> B_PROC, ...) ->
		COMPUTE_BLOCK ( B_PROC )
	| INT_DECL ->
		null
	| ARRAY_DECL (...) ->
		null
	end case
    end var
end function

-------------------------------------------------------------------------------

function COMPUTE_STMTS (in var SS : STMTS, PROCNAME : ID, SYMBTAB : S_TABLE) is
    var GO_ON : bool in
	GO_ON := true;
	while GO_ON loop
	    case SS var INSTR:STMT, QUEUE:STMTS in
	      CONS_STMTS (INSTR, QUEUE) ->
		COMPUTE_STMT (INSTR, PROCNAME, SYMBTAB);
		SS := QUEUE
	    | LAST_STMTS (INSTR) ->
		GO_ON := FALSE;
		COMPUTE_STMT (INSTR, PROCNAME, SYMBTAB)
	    end case
	end loop
    end var
end function

-------------------------------------------------------------------------------

function COMPUTE_STMT (INSTR : STMT, PROCNAME : ID, SYMBTAB : S_TABLE) is
    case INSTR var
	EXP1, EXP2		: EXPR,
 	INSTR_THEN, INSTR_ELSE	: STMTS,
	VAR1			: VARIABLE,
	CALLST			: CALL_STMT
    in
      ASSIGN (VAR1,EXP1) ->
	COMPUTE_VARIABLE (VAR1,SYMBTAB);
	COMPUTE_EXPR (EXP1,SYMBTAB);
	(*
	 * if the variable assigned is a "by ref" one,
	 * then COMPUTE_VARIABLE has just changed VAR1 to
	 * REFTO_VAR. Then we must modify this branch
	 *)
	case VAR1 in
	  REFTO_VAR (...) ->
		SIDEAFFECT_STMT (INSTR, ASSIGN_REF ( VAR1, EXP1 ))
	| SIMPLE_VAR (...) ->
		null
	| INDEXED_VAR (...) ->
		null
	end case
    | IF_THEN_ELSE (EXP1,EXP2,INSTR_THEN,INSTR_ELSE) ->
	COMPUTE_EXPR (EXP1, SYMBTAB);
	COMPUTE_EXPR (EXP2, SYMBTAB);
	COMPUTE_STMTS (INSTR_THEN, PROCNAME, SYMBTAB);
	COMPUTE_STMTS (INSTR_ELSE, PROCNAME, SYMBTAB)
    | CONS_CALL_STMT (CALLST) ->
	SIDEAFFECT_ID (CALLST.UPROC, PROCNAME);
	EXP1 := CALLST.E;
	VAR1 := CALLST.REFERENCE;
	COMPUTE_EXPR (EXP1, SYMBTAB);
	COMPUTE_VARIABLE (VAR1, SYMBTAB)
    | ASSIGN_REF (...) ->
	PRINTFINTERNERROR ("COMPUTE_STMT, ASSIGN_REF")
    end case
end function

-------------------------------------------------------------------------------

function COMPUTE_EXPR (E : EXPR, SYMBTAB : S_TABLE) is
    case E var EXP1, EXP2 : EXPR, V : VARIABLE in
      VAR_EXPR (V) ->
	COMPUTE_VARIABLE (V, SYMBTAB)
    | BIN_EXPR (any of OP, EXP1, EXP2) ->
	COMPUTE_EXPR (EXP1, SYMBTAB);
	COMPUTE_EXPR (EXP2, SYMBTAB)
    | CONSTANT (...) ->
	null
    end case
end function

-------------------------------------------------------------------------------

function COMPUTE_VARIABLE (V : VARIABLE, SYMBTAB : S_TABLE) is
    case V var VID : ID, IDX : EXPR in
      SIMPLE_VAR (VID) ->
	if LOOKUP (VID.TEXT, SYMBTAB) == REFTYPEID then
	    SIDEAFFECT_VAR (V, REFTO_VAR (CONS_REFVAR (VID)))
	end if
    | INDEXED_VAR (any ID, IDX) ->
	COMPUTE_EXPR (IDX, SYMBTAB)
    | REFTO_VAR (...) ->
	PRINTFINTERNERROR ("COMPUTE_VARIABLE, REFTO_VAR")
    end case
end function

-------------------------------------------------------------------------------
-- Decompilation
-------------------------------------------------------------------------------

function TABUL () : NAT is
    return 4
end function

-------------------------------------------------------------------------------

function PRINT_PROGRAM (P_BLOCK : BLOCK) is
    !implementedby "C_DECOMPILE_PROGRAM"
    PRINTF ("#include <stdio.h>\n");
    PRINT_BLOCK (0, P_BLOCK);
    PRINTFRETURN (0, "")
end function

-------------------------------------------------------------------------------

function PRINT_BLOCK (MARGE : NAT, B : BLOCK) is
    PRINT_DECLS (MARGE, B.DD);
    PRINTF ("\n");
    if MARGE > 0 then
        PRINT_STMTS (MARGE, B.SS)
    else
        -- main function
        PRINTFRETURN (MARGE, "int main ()");
        PRINTFRETURN (MARGE, "{");
        -- statements of the main block
        PRINT_STMTS (MARGE + TABUL (), B.SS);
        -- display the value of all global variables
        PRINT_VARIABLE_VALUES (MARGE + TABUL (), B.DD);
        -- end of main function
        PRINTFRETURN (MARGE + TABUL (), "return (0);");
        PRINTFRETURN (MARGE, "}")
    end if
end function

-------------------------------------------------------------------------------

function PRINT_DECLS (MARGE : NAT, in var DD : DECLS) is
    while DD != NIL_DECLS loop
    (*
     * 'case' just for field extraction
     * needed because Traian does not know
     * that inside the loop we've checked
     * that DD != NIL_DECLS
     * and so we're sure DD.QUEUE exists
     *)
	case DD var D_HEAD : DECL, DD_QUEUE : DECLS in
	    CONS_DECLS (D_HEAD, DD_QUEUE) ->
		PRINT_DECL (MARGE, D_HEAD);
		DD := DD_QUEUE
	| any ->
		PRINTFINTERNERROR ("PRINT_DECLS, loop")
	end case
    end loop
end function

-------------------------------------------------------------------------------

function PRINT_DECL (MARGE : NAT, D : DECL) is
    var
 	NAMEID	: ID,
	DTYPE	: DECL_UNION
    in
 	NAMEID	:= D.NAME;
	DTYPE := D.DECL_CHOICE;
	case DTYPE var ID1,ID2:ID, B:BLOCK, DIM:NUMBER in
    	  PROC_DECL (ID1, ID2, B) ->
		PRINTFRETURN (MARGE, "void ");
		PRINT_ID (NAMEID);
		PRINTF (" (int ");
		PRINT_ID (ID1);
		PRINTF (", int *");
		PRINT_ID (ID2);
		PRINTF (")");
		PRINTFRETURN (MARGE, "{");
		PRINT_BLOCK (MARGE + TABUL (), B);
		PRINTFRETURN (MARGE, "}")
	    | ARRAY_DECL (DIM)	->
		PRINTFRETURN (MARGE, "int ");
		PRINT_ID (NAMEID);
		PRINTF ("[");
		PRINTF (string (DIM.VAL - 1));
		PRINTF ("];")
	    | INT_DECL	->
		PRINTFRETURN (MARGE, "int ");
		PRINT_ID (NAMEID);
	        PRINTF (";")
	end case
    end var
end function

-------------------------------------------------------------------------------

function PRINT_ID (ID2PRINT : ID) is
    PRINTF (ID2PRINT.TEXT)
end function

-------------------------------------------------------------------------------

function PRINT_STMTS (MARGE : NAT, in var SS : STMTS) is
    var	GO_ON : BOOL in
	GO_ON := true;
	while GO_ON loop
	    case SS var INSTR : STMT, QUEUE : STMTS in
	     CONS_STMTS (INSTR, QUEUE) ->
		PRINT_STMT (MARGE, INSTR);
		SS := QUEUE
	    | LAST_STMTS(INSTR)	->
		GO_ON := FALSE;
		PRINT_STMT (MARGE, INSTR)
	    end case
	end loop
    end var
end function

-------------------------------------------------------------------------------

function PRINT_STMT (MARGE : NAT, INSTR : STMT) is
    case INSTR var
	EXP1, EXP2 		: EXPR,
	INSTR_THEN,INSTR_ELSE	: STMTS,
	VAR1, RF		: VARIABLE,
	CALLST			: CALL_STMT
    in
      ASSIGN (VAR1,EXP1) ->
      PRINTFRETURN (MARGE, "");
      PRINT_VARIABLE (VAR1);
      PRINTF (" = ");
      PRINT_EXPR (EXP1);
      PRINTF (";")
    | ASSIGN_REF (RF,EXP1) ->
      PRINTFRETURN (MARGE, "");
      PRINT_VARIABLE (RF);
      PRINTF (" = ");
      PRINT_EXPR (EXP1);
      PRINTF (";")
    | IF_THEN_ELSE (EXP1,EXP2,INSTR_THEN,INSTR_ELSE) ->
      PRINTFRETURN (MARGE, "if (");
      PRINT_EXPR (EXP1);
      PRINTF (" == ");
      PRINT_EXPR (EXP2);
      PRINTF (") {");
      PRINT_STMTS (MARGE + TABUL (), INSTR_THEN);
      PRINTFRETURN (MARGE, "} else {");
      PRINT_STMTS (MARGE + TABUL (), INSTR_ELSE);
      PRINTFRETURN (MARGE, "}")
    | CONS_CALL_STMT (CALLST) ->
      PRINTFRETURN (MARGE, "");
      PRINT_ID (CALLST.PROCID);
      PRINTF (" (");
      PRINT_EXPR (CALLST.E);
      PRINTF (", &");
      PRINT_VARIABLE (CALLST.REFERENCE);
      PRINTF (");")
    end case
end function

-------------------------------------------------------------------------------

function PRINT_VARIABLE (V : VARIABLE) is
    case V var VID : ID, IDX : EXPR, RF : REFVAR in
      SIMPLE_VAR (VID) ->
	PRINT_ID (VID)
    | INDEXED_VAR (VID,IDX) ->
	PRINT_ID (VID);
	PRINTF ("[");  
	PRINT_EXPR (IDX);
	PRINTF ("- 1]")  
    | REFTO_VAR (RF) ->
	PRINT_REFVAR (RF)
    end case
end function

-------------------------------------------------------------------------------

function PRINT_REFVAR (RF : REFVAR) is
    PRINTF ("*");
    PRINT_ID (RF.NAME)
end function

-------------------------------------------------------------------------------

function PRINT_VARIABLE_VALUES (MARGE : NAT, in var DD : DECLS) is
    while DD != NIL_DECLS loop
	case DD var D_HEAD : DECL, DD_QUEUE : DECLS in
	  CONS_DECLS (D_HEAD, DD_QUEUE) ->
	    case D_HEAD var NAME : ID, DIM : NUMBER in
	      CONS_DECL (NAME, any, INT_DECL) ->
		PRINTFRETURN (MARGE, "printf (\"");
		PRINT_ID (NAME);
		PRINTF (" == %i\\n\",");
		PRINT_ID (NAME);
		PRINTF (");")
	    | CONS_DECL (NAME, any, ARRAY_DECL (DIM)) ->
		var N : INT in
		    for N := 1 while N <= DIM.VAL by N := N + 1 loop
			PRINTFRETURN (MARGE, "printf (\"");
			PRINT_ID (NAME);
			PRINTF ("[");
			PRINTF (STRING (N));
			PRINTF ("] == %i\\n\",");
			PRINT_ID (NAME);
			PRINTF ("[");
			PRINTF (STRING (N));
			PRINTF ("- 1]);")
		    end loop
		end var
	    | CONS_DECL (any, any, any) ->
		null -- no variable: no value to print
	    end case;
	    DD := DD_QUEUE
	| any ->
	    PRINTFINTERNERROR ("PRINT_VARIABEL_VALUES, loop")
	end case
    end loop
end function

-------------------------------------------------------------------------------

function PRINT_EXPR (EXP : EXPR) is
    case EXP var
	OPER		: OP,
	EXP1, EXP2	: EXPR,
	NUM		: NUMBER,
	V		: VARIABLE
    in
      CONSTANT (NUM) ->
	PRINTF (string (NUM.VAL))
    | VAR_EXPR (V) ->
	PRINT_VARIABLE (V)
    | BIN_EXPR (OPER, EXP1, EXP2) ->
	PRINT_EXPR (EXP1);
	PRINT_OP (OPER);
	PRINT_EXPR (EXP2)
    end case
end function

-------------------------------------------------------------------------------

function PRINT_OP (OPER : OP) is
    case OPER in
      PLUS ->
	PRINTF ("+")
    | MINUS ->
	PRINTF ("-")
    | MUL ->
	PRINTF ("*")
    | DIV ->
	PRINTF ("/")
    end case
end function

-------------------------------------------------------------------------------
-- BASIC PRINTERS (!external printf)
-------------------------------------------------------------------------------

function PRINTFRETURN (INDENT : NAT, S : STRING) is
    !implementedby "C_EXT_PRINTFRETURN"
    !external
end function

-------------------------------------------------------------------------------

function PRINTF (S : STRING) is
    !implementedby "C_EXT_PRINTF"
    !external
end function

-------------------------------------------------------------------------------
-- PRINT ERRORS
-------------------------------------------------------------------------------

function PRINTFERROR (LINE : NAT, S1 : STRING, S2 : STRING) is
    !implementedby "C_EXT_PRINTFERROR"
    !external
end function

-------------------------------------------------------------------------------

function PRINTFUNKNOWN (LINE : NAT, NAME : STRING) is
    PRINTFERROR (LINE, NAME, "is unknown")
end function

-------------------------------------------------------------------------------

function PRINTFWRONGID (LINE : NAT) is
    PRINTFERROR (LINE, "identifier", "unrecognized")
end function

-------------------------------------------------------------------------------

function PRINTFREDEF (LINE : NAT, TEXTID : STRING) is
    PRINTFERROR (LINE, TEXTID, "is already defined")
end function

-------------------------------------------------------------------------------

function PRINTFINTERNERROR (MESG : STRING) is
    PRINTFERROR (0, "internal error", MESG)
end function

-------------------------------------------------------------------------------
-- UPDATERS (!external)
-------------------------------------------------------------------------------

function SIDEAFFECT_VAR (ADR_V_DEST, ADR_V_SRC : VARIABLE) is
    !implementedby "C_SIDEAFFECT_VAR"
    !external
end function

-------------------------------------------------------------------------------

function SIDEAFFECT_STMT (ADR_S_DEST, ADR_S_SRC : STMT) is
    !implementedby "C_SIDEAFFECT_STMT"
    !external
end function

-------------------------------------------------------------------------------

function SIDEAFFECT_INT (I_DEST, I_SRC : INT) is
    !implementedby "C_SIDEAFFECT_INT"
    !external
end function

-------------------------------------------------------------------------------

function SIDEAFFECT_S_TABLE (T_DEST, T_SRC : S_TABLE) is
    !implementedby "C_SIDEAFFECT_S_TABLE"
    !external
end function

-------------------------------------------------------------------------------

function SIDEAFFECT_ID (ID_DEST, ID_SRC : ID) is
    !implementedby "C_SIDEAFFECT_ID"
    !external
end function

-------------------------------------------------------------------------------

end module

