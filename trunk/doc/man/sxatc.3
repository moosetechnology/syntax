.\" @(#)sxatc.3	- SYNTAX [unix] - 2 Septembre 1987
.TH SXATC 3 "SYNTAX\[rg]"
.SH NAME
sxatc \- abstract tree constructor for SYNTAX.
.SH SYNOPSIS
\fB
.nf
#include "sxunix.h"

struct sxtables  sxtables\|;

SXNODE ***sxatc_stack ()

SXVOID sxatc (what, sxtables)
.ta \w'SXVOI'u +\w'struct sxtables 'u
	int	 what\|;
	struct sxtables	*sxtables\|;

.fi
.SH DESCRIPTION
.B sxatc
is the module which performs the construction of an abstract tree (see
semat(1)) in parallel with the syntax analysis (see sxparser(3)).
This module provides also a set of macros and variables which may be used
during a semantic pass.
These macros and variables are declared in the include file
.B sxunix.h
and the declarations are close to the following\|:
.nf

#\fBifndef\fP SXNODE
/* by default SXNODE ==> \fBstruct\fP sxnode_header_s */
#\fBdefine\fP SXNODE \fBstruct\fP sxnode_header_s
#endif

/* to have the definition of sxnode_header_s look like normal C */
#\fBdefine\fP SXVOID_NAME

.ta \w'\fBdefi\fP'u +\w'\fBstruct\fP sxtoken 'u +\w' first_list_element 'u +\w'/* is this node the first element of a list 'u
#\fBdefine\fP SXNODE_HEADER_S \\
	\fBSXNODE\fP	*father	/* pointer to the father */,\\
		*brother	/* pointer to the right brother	*/,\\
		*son	/* pointer to the leftmost son	*/\|;\\
	\fBSXINT\fP	 name	/* node name	*/,\\
		 degree	/* node arity	*/,\\
		 position	/* \fIposition\fPth son of its father	*/\|;\\
	\fBSXBOOLEAN\fP	 is_list	/* is this node a list	*/,\\
		 first_list_element	/* is this node the first element of a list	*/,\\
		 last_list_element	/* is this node the last element of a list	*/\|;\\
	\fBstruct\fP sxtoken	 token	/* lexical information	*/

\fBstruct\fP sxnode_header_s {
	\fBSXNODE_HEADER_S\fP SXVOID_NAME;
	};

.fi
Each node in an abstract tree is a structure whose leading components must be
(macro expanded from) "\fBSXNODE_HEADER_S\fP SXVOID_NAME;".
For a node \fIfather\fP is a pointer to its father, \fIbrother\fP is a pointer
to its right brother (or NULL), \fIson\fP is a pointer to its first son (or NULL), \fIname\fP is (the internal code for) its name, \fIdegree\fP is its arity
i.e. its number of sons (0 for a leaf), \fIposition\fP, only valid for a non
root node, is the rank as son of its father (1<=\fIposition\fP<=\fIfather\fP->\fIdegree\fP).
.nr
If the node represents a list \fIis_list\fP is \fBSXTRUE\fP.
.nr
If the father of a node is a list and if \fIposition\fP is 1 then \fIfirst_list_element\fP
is \fBSXTRUE\fP.
If its father is a list and if \fIposition\fP is equal to \fIfather\fP->\fIdegree\fP then \fIlast_list_element\fP
is \fBSXTRUE\fP.
.nr
If the node stands for a (generic) terminal symbol, \fItoken\fP contains its
lexical attributes.
.nr
If the node stands for a non terminal symbol, the only valid fields of
\fItoken\fP are \fIsource_index\fP and \fIcomment\fP.
\fIsource_index\fP contains the coordinates of the leftmost terminal of the
sentence recognised by this non terminal or the coordinates of its look-ahead
terminal symbol if the sentence is empty.
.nf

.ta \w'\fBstru\fP'u +\w'\fBSXATC_AREA\fP 'u +\w' abstract_tree_is_error_node 'u +\w'/* is this node the first element of a list 'u
\fBstruct\fP sxatc_local_variables {
	\fBSXNODE\fP	*father	/* internal use	*/\|;
	\fBSXNODE\fP	*abstract_tree_root	/* abstract tree root node pointer	*/\|;
	\fBSXINT\fP	 node_size	/* \fBsizeof\fP(\fBSXNODE\fP) */\|;
	\fBSXATC_AREA\fP	*head	/* internal use	*/;
	\fBSXINT\fP	 areaindex	/* internal use	*/;
	\fBSXBOOLEAN\fP	 abstract_tree_is_error_node	/* \fBSXTRUE\fP if \fBERROR\fP node	*/;
	\fBSXBOOLEAN\fP	 are_comments_erased	/* internal use	*/;
	};

.fi
\fIabstract_tree_root\fP is (a pointer to) the \fBroot\fP of the abstract tree.
Usually the attribute evaluation starts at inherited visit of its first (leftmost) son.
\fInode_size\fP is the size of an abstract tree node.
\fIabstract_tree_is_error_node\fP is set if and only if there is (at least) one
error node in the whole abstract tree, that means a syntactic error involving
a global recovery had occurred.
.nf

.ta \w'\fBstru\fP'u +\w'\fBstruct\fP sxatc_local_variables 'u +\w'T_tables 'u +\w'/* abstract tree tables 'u
\fBstruct\fP sxatcvar {
	\fBstruct\fP T_tables	T_tables	/* abstract tree tables	*/;
	\fBstruct\fP sxatc_local_variables	atc_lv	/* local variables	*/;
	} sxatcvar;

.fi
\fIT_tables\fP are the tables which contain the informations about the
abstract tree construction.
\fIatc_lv\fP are the local variables which may be used by the user's
semantic pass.
.SH "FURTHER DESCRIPTION"
.I sxatc
is the main entry of the module to be called
for constructing an abstract syntax tree for given source text.
Its possible uses are:
.br
.IR sxatc \|( SXOPEN , \|sxtables )
opens the tables, initialises (some of) the local variables when a new
language is going to be processed and calls the entry point "SXOPEN" of the
(user's) semantic pass.
.br
.IR sxatc \|( SXINIT , \|sxtables )
called by the parser just before any new source text syntax analysis.
It initialises (the rest of) the local variables and, upon its first call
allocates its semantic (tree node) stack.
.br
.IR sxatc \|( SXACTION , \|action_no )
called by the parser on each reduction.
Puts an other brick in the tree.
.br
.IR sxatc \|( SXERROR , \|sxtables )
called by the parser each time a global syntax error recovery occurs.
It builds an \fBERROR\fP node.
.br
.IR sxatc \|( SXFINAL , \|sxtables )
called by the parser just after the analysis of a source text.
The variable \fIsxatcvar\fP.\fIatc_lv\fP.\fIabstract_tree_root\fP is set and
the semantic stack is freed if there is no more \fIsxatc\fP call activ.
.br
.IR sxatc \|( SXSEMPASS , \|sxtables )
calls the user's semantic pass and frees the abstract tree.
.br
.IR sxatc_stack \|()
allows the user of syntactic actions or predicates to access to the
[sub-]tree constructed so far.  For example let us consider the
grammar rules:
.nf
       <term>     = <variable> @i ;
       <variable> = %ID           ; "ID"
.fi
The following portion of C code allows to access the fields of the ID node
.nf
       case i:
          (*sxatc_stack ()) [SXSTACKtop ()]->...
.fi
Due to possible reallocations, only the value returned by sxatc_stack
(and not the object pointed to) is garanteed not to vary during the
abstract tree construction.
.SH "SEE ALSO"
sxunix(3),
sxscanner(3),
sxparser(3),
sxatc(3),
sxat_mngr(3)
and the \fISYNTAX Reference Manual\fP.
.SH NOTES
The contents of the structure
.I sxatcvar
must be saved and restored by the user when switching
between different parsers.

