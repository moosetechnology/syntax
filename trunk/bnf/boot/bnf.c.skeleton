/* ********************************************************************
   *  This program has been generated from bnf.at                     *
   *  by the SYNTAX (*) abstract tree constructor SEMAT               *
   ********************************************************************
   *  (*) SYNTAX is a trademark of INRIA.                             *
   ******************************************************************** */



/*   I N C L U D E S   */
#define SXNODE struct bnf_node
#include "sxunix.h"

struct bnf_node {
    SXNODE_HEADER_S SXVOID_NAME;

/*
your attribute declarations...
*/
};
/*
N O D E   N A M E S
*/
#define ERROR_n 1
#define ACTION_n 2
#define BNF_n 3
#define GENERIC_TERMINAL_n 4
#define LHS_NON_TERMINAL_n 5
#define NON_TERMINAL_n 6
#define PREDICATE_n 7
#define RULE_S_n 8
#define TERMINAL_n 9
#define VOCABULARY_S_n 10
#define X_NON_TERMINAL_n 11
#define X_TERMINAL_n 12
/*
E N D   N O D E   N A M E S
*/


static void bnf_pi (void) {

/*
I N H E R I T E D
*/

switch (SXVISITED->father->name) {

case ERROR_n :
break;

case BNF_n :/* SXVISITED->name = RULE_S_n */
break;

case RULE_S_n :/* SXVISITED->name = VOCABULARY_S_n */
break;

case VOCABULARY_S_n :/* SXVISITED->name = {ACTION_n, GENERIC_TERMINAL_n, LHS_NON_TERMINAL_n, NON_TERMINAL_n, TERMINAL_n, 
X_NON_TERMINAL_n, X_TERMINAL_n} */
break;

case X_NON_TERMINAL_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = NON_TERMINAL_n */
	break;

	case 2 :/* SXVISITED->name = PREDICATE_n */
	break;


	default:
	break;
	}

break;

case X_TERMINAL_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = {GENERIC_TERMINAL_n, TERMINAL_n} */
	break;

	case 2 :/* SXVISITED->name = PREDICATE_n */
	break;


	default:
	break;
	}

break;



/*
Z Z Z Z
*/

default:
break;
}
/* end bnf_pi */
}

static void bnf_pd (void) {

/*
D E R I V E D
*/

switch (SXVISITED->name) {

case ERROR_n :
break;

case ACTION_n :
break;

case BNF_n :
break;

case GENERIC_TERMINAL_n :
break;

case LHS_NON_TERMINAL_n :
break;

case NON_TERMINAL_n :
break;

case PREDICATE_n :
break;

case RULE_S_n :
break;

case TERMINAL_n :
break;

case VOCABULARY_S_n :
break;

case X_NON_TERMINAL_n :
break;

case X_TERMINAL_n :
break;



/*
Z Z Z Z
*/

default:
break;
}
/* end bnf_pd */
}

static void smpopen (SXTABLES *sxtables_ptr)
{
sxuse(sxtables_ptr);
sxatcvar.atc_lv.node_size = sizeof (struct bnf_node);
}

static void smppass (void)
{

/*   I N I T I A L I S A T I O N S   */
/* ........... */

/*   A T T R I B U T E S    E V A L U A T I O N   */
sxsmp (sxatcvar.atc_lv.abstract_tree_root, bnf_pi, bnf_pd);

/*   F I N A L I S A T I O N S   */
/* ........... */

}

int bnf_smp (SXINT what, SXTABLES *sxtables_ptr)
{
sxuse (sxtables_ptr);
switch (what) {
case SXOPEN:
smpopen (sxtables_ptr);
break;
case SXSEMPASS: /* For [sub-]tree evaluation during parsing */
break;
case SXACTION:
smppass ();
break;
case SXCLOSE:
break;
default:
break;
}
return 1;
}
