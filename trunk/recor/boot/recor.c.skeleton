/* ********************************************************************
   *  This program has been generated from recor.at                   *
   *  by the SYNTAX (*) abstract tree constructor SEMAT               *
   ********************************************************************
   *  (*) SYNTAX is a trademark of INRIA.                             *
   ******************************************************************** */



/*   I N C L U D E S   */
#define SXNODE struct recor_node
#include "sxunix.h"

struct recor_node {
    SXNODE_HEADER_S SXVOID_NAME;

/*
your attribute declarations...
*/
};
/*
N O D E   N A M E S
*/
#define ERROR_n 1
#define C_PARAM_n 2
#define C_STRING_n 3
#define DIGIT_n 4
#define DONT_DELETE_n 5
#define DONT_INSERT_n 6
#define FOLLOWERS_NUMBER_n 7
#define GLOBAL_PARSER_n 8
#define GLOBAL_SCANNER_n 9
#define ITEM_s_n 10
#define KEY_TERMINAL_S_n 11
#define LOCAL_PARSER_n 12
#define LOCAL_SCANNER_n 13
#define MODEL_n 14
#define MODEL_s_n 15
#define NUMBER_n 16
#define OCTAL_CODE_n 17
#define PARAM_n 18
#define PARAM_s_n 19
#define PARSER_n 20
#define RECOR_n 21
#define S_n 22
#define SCANNER_n 23
#define SLICE_n 24
#define STRING_n 25
#define S_PARAM_n 26
#define TITLE_s_n 27
#define TUNING_SETS_n 28
#define VALIDATION_LENGTH_n 29
#define VOID_n 30
#define X_n 31
/*
E N D   N O D E   N A M E S
*/


static void recor_pi (void) {

/*
I N H E R I T E D
*/

switch (SXVISITED->father->name) {

case ERROR_n :
break;

case DONT_DELETE_n :/* SXVISITED->name = {C_STRING_n, OCTAL_CODE_n, SLICE_n} */
break;

case DONT_INSERT_n :/* SXVISITED->name = {C_STRING_n, OCTAL_CODE_n, SLICE_n} */
break;

case FOLLOWERS_NUMBER_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = NUMBER_n */
	break;

	case 2 :/* SXVISITED->name = STRING_n */
	break;


	default:
	break;
	}

break;

case GLOBAL_PARSER_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = {KEY_TERMINAL_S_n, VOID_n} */
	break;

	case 2 :/* SXVISITED->name = VALIDATION_LENGTH_n */
	break;

	case 3 :/* SXVISITED->name = FOLLOWERS_NUMBER_n */
	break;

	case 4 :/* SXVISITED->name = STRING_n */
	break;

	case 5 :/* SXVISITED->name = STRING_n */
	break;

	case 6 :/* SXVISITED->name = {STRING_n, VOID_n} */
	break;

	case 7 :/* SXVISITED->name = STRING_n */
	break;


	default:
	break;
	}

break;

case GLOBAL_SCANNER_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = STRING_n */
	break;

	case 2 :/* SXVISITED->name = STRING_n */
	break;

	case 3 :/* SXVISITED->name = STRING_n */
	break;

	case 4 :/* SXVISITED->name = STRING_n */
	break;

	case 5 :/* SXVISITED->name = STRING_n */
	break;


	default:
	break;
	}

break;

case ITEM_s_n :/* SXVISITED->name = {DIGIT_n, S_n, X_n} */
break;

case KEY_TERMINAL_S_n :/* SXVISITED->name = C_STRING_n */
break;

case LOCAL_PARSER_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = MODEL_s_n */
	break;

	case 2 :/* SXVISITED->name = TUNING_SETS_n */
	break;


	default:
	break;
	}

break;

case LOCAL_SCANNER_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = MODEL_s_n */
	break;

	case 2 :/* SXVISITED->name = TUNING_SETS_n */
	break;


	default:
	break;
	}

break;

case MODEL_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = ITEM_s_n */
	break;

	case 2 :/* SXVISITED->name = PARAM_s_n */
	break;


	default:
	break;
	}

break;

case MODEL_s_n :/* SXVISITED->name = MODEL_n */
break;

case PARAM_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = {C_PARAM_n, S_PARAM_n, VOID_n} */
	break;

	case 2 :/* SXVISITED->name = STRING_n */
	break;


	default:
	break;
	}

break;

case PARAM_s_n :/* SXVISITED->name = PARAM_n */
break;

case PARSER_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = {LOCAL_PARSER_n, VOID_n} */
	break;

	case 2 :/* SXVISITED->name = PARAM_s_n */
	break;

	case 3 :/* SXVISITED->name = GLOBAL_PARSER_n */
	break;


	default:
	break;
	}

break;

case RECOR_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = TITLE_s_n */
	break;

	case 2 :/* SXVISITED->name = SCANNER_n */
	break;

	case 3 :/* SXVISITED->name = PARSER_n */
	break;

	case 4 :/* SXVISITED->name = {STRING_n, VOID_n} */
	break;


	default:
	break;
	}

break;

case SCANNER_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = {LOCAL_SCANNER_n, VOID_n} */
	break;

	case 2 :/* SXVISITED->name = GLOBAL_SCANNER_n */
	break;


	default:
	break;
	}

break;

case SLICE_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = {C_STRING_n, OCTAL_CODE_n} */
	break;

	case 2 :/* SXVISITED->name = {C_STRING_n, OCTAL_CODE_n} */
	break;


	default:
	break;
	}

break;

case TITLE_s_n :/* SXVISITED->name = STRING_n */
break;

case TUNING_SETS_n :
	switch (SXVISITED->position) {
	case 1 :/* SXVISITED->name = {DONT_DELETE_n, DONT_INSERT_n, VOID_n} */
	break;

	case 2 :/* SXVISITED->name = {DONT_DELETE_n, DONT_INSERT_n, VOID_n} */
	break;


	default:
	break;
	}

break;



/*
Z Z Z Z
*/

default:
break;
}
/* end recor_pi */
}

static void recor_pd (void) {

/*
D E R I V E D
*/

switch (SXVISITED->name) {

case ERROR_n :
break;

case C_PARAM_n :
break;

case C_STRING_n :
break;

case DIGIT_n :
break;

case DONT_DELETE_n :
break;

case DONT_INSERT_n :
break;

case FOLLOWERS_NUMBER_n :
break;

case GLOBAL_PARSER_n :
break;

case GLOBAL_SCANNER_n :
break;

case ITEM_s_n :
break;

case KEY_TERMINAL_S_n :
break;

case LOCAL_PARSER_n :
break;

case LOCAL_SCANNER_n :
break;

case MODEL_n :
break;

case MODEL_s_n :
break;

case NUMBER_n :
break;

case OCTAL_CODE_n :
break;

case PARAM_n :
break;

case PARAM_s_n :
break;

case PARSER_n :
break;

case RECOR_n :
break;

case S_n :
break;

case SCANNER_n :
break;

case SLICE_n :
break;

case STRING_n :
break;

case S_PARAM_n :
break;

case TITLE_s_n :
break;

case TUNING_SETS_n :
break;

case VALIDATION_LENGTH_n :
break;

case VOID_n :
break;

case X_n :
break;



/*
Z Z Z Z
*/

default:
break;
}
/* end recor_pd */
}

static void smpopen (SXTABLES *sxtables_ptr)
{
sxuse(sxtables_ptr);
sxatcvar.atc_lv.node_size = sizeof (struct recor_node);
}

static void smppass (void)
{

/*   I N I T I A L I S A T I O N S   */
/* ........... */

/*   A T T R I B U T E S    E V A L U A T I O N   */
sxsmp (sxatcvar.atc_lv.abstract_tree_root, recor_pi, recor_pd);

/*   F I N A L I S A T I O N S   */
/* ........... */

}

int recor_smp (SXINT what, SXTABLES *sxtables_ptr)
{
sxuse (sxtables_ptr);
switch (what) {
case SXOPEN:
smpopen (sxtables_ptr);
break;
case SXSEMPASS: /* For [sub-]tree evaluation during parsing */
break;
case SXACTION:
smppass ();
break;
case SXCLOSE:
break;
default:
break;
}
return 1;
}
