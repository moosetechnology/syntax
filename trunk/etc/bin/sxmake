#! /bin/sh

# Hubert Garavel (2023) - this is the entry point for compiling SYNTAX easily

set -e

COMMAND=`basename "$0"`

ETC_BIN=`dirname "$0"`

# ----------------------------------------------------------------------------

# to make sure that makes and cc emit messages in English
LANG="C"
export LANG

# ----------------------------------------------------------------------------

SX=`( cd $ETC_BIN/../.. ; pwd )`
export SX

if [ ! -w "$SX" ]
then
	echo "$COMMAND: directory $SX is not writable"
	exit 1
fi

EXTENSIONS="$SX/../extensions"

OLDIES="$SX/../outdated/oldies"

# ----------------------------------------------------------------------------

ARCH=`$ETC_BIN/arch`

case $ARCH in
	sun5 | sun64 | sol86 | sol64 )
		# cas de Solaris ou OpenIndiana : on utilise GNU make, qui
		# est dans /bin/gmake ou /usr/sfw/bin/gmake ; a defaut,
		# prendre /usr/gnu/bin/make
		MAKE="gmake"
		;;
	* )
		MAKE="make"
		;;
esac
export MAKE

# ----------------------------------------------------------------------------

# CONVECS-specific instructions

if [ "$CONVECSX" = "" ]
then
	# environment variable $CONVECSX has not been set
	if [ -d "/common/Syntax" -a $ARCH = sol64 ]
	then
		# the current machine is a Solaris server
		CONVECSX="/common/Syntax"
	fi
else
	# environment variable $CONVECSX has been set
	if [ ! -d "$CONVECSX" -o ! -f "$CONVECSX/incl/sxunix.h" ]
	then
		echo "$COMMAND: directory $CONVECSX does not contain a copy of SYNTAX"
		exit 1
	fi
fi

if [ "$CONVECSX" != "" ]
then
	# verifications specific to the CONVECS team (for win64)
	if [ "$CADP" = "" ]
	then
		echo "$COMMAND: environment variable \$CADP is not set"
		exit 1
	fi
	if [ ! -d "$CADP" ]
	then
		echo "$COMMAND: environment variable \$CADP does not point to a directory"
		exit 1
	fi
fi

# ----------------------------------------------------------------------------

BANNER() {
	echo '==============================================================================='
	echo "$*"
	echo '==============================================================================='
}

# ----------------------------------------------------------------------------

PREPARE_DIRECTORIES() {
	TARGET_ARCH="$1"
	LOCATION="$2"
	(
	if [ "$LOCATION" = "" ]
	then
		echo "starting compilation for $TARGET_ARCH"
		cd "$SX"
		mkdir -p bin.$TARGET_ARCH
		mkdir -p lib.$TARGET_ARCH
		mkdir -p aux.$TARGET_ARCH
	else
		cd "$LOCATION"
		mkdir -p bin.$TARGET_ARCH
		mkdir -p lib.$TARGET_ARCH
	fi
	)
}

# ----------------------------------------------------------------------------

SET_PERMISSIONS() {
	if [ "$CONVECSX" != "" ]
	then
		# CONVECS-specific instructions
		# set permissions on the newly created binaries, includes, shells
		find $SX/bin.* $SX/etc/bin $SX/lib.* $SX/incl ! -type l -exec chmod a+rX \{\} \;
	fi
}

# ----------------------------------------------------------------------------

CLEAN() {
	# assert `pwd` = $SX
	TARGET_ARCH="$1"
	# on nettoie les processeurs SYNTAX
	for FILE in `ls */makefile`
	do
		( cd `dirname "$FILE"` ; $MAKE -s clean ; rm -rf bin bin.$TARGET_ARCH lib.$TARGET_ARCH )
	done			
	# on nettoie les exemples SYNTAX (sans effacer les repertoires bin/)
	for FILE in `ls examples/*/makefile` 
	do
		( cd `dirname "$FILE"` ; $MAKE -s clean ; rm -rf bin.$TARGET_ARCH lib.$TARGET_ARCH )
	done			
}

# ----------------------------------------------------------------------------

FULL_CLEAN() {
	# assert `pwd` = $SX
	TARGET_ARCH="$1"
	# on nettoie ce qui traine encore dans trunk, au risque d'effacer
	# bin.backup
	for DIR in `ls -d aux.* bin.* lib.* 2>/dev/null`
	do
		rm -rf $DIR
	done
	# on efface un fichier .h qui est genere automatiquement
	rm -f incl/sxversion.h
	# on efface aussi bin (si c'est un lien symbolique)
	if [ -L bin ]
	then
		rm -f bin
	fi
	# on efface les repertoires tmp parfois crees par l'hypergenese
	for DIR in `ls -d */tmp 2> /dev/null`
	do
		rm -rf $DIR
	done
	# on efface les fichiers .out (souvent, des liens symboliques)
	# que la compilation ou le bootstrap laissent parfois dans des
	# repertoires autres que bin et bin.*
	for FILE in `ls -d */*.out 2> /dev/null`
	do
		case $FILE in
			bin* ) ;;
			* ) rm -f $FILE ;;	
		esac
	done
	# nettoyages ad hoc
	rm -rf */src/*_t.c
	# on nettoie maintenant le repertoire extensions (s'il existe)
	if [ -d ../extensions ]
	then
		(
		cd ../extensions
		for FILE in `ls */makefile`
		do
			( cd `dirname "$FILE"` ; $MAKE -s clean ; rm -rf bin bin.$TARGET_ARCH lib.$TARGET_ARCH )
		done
		)
	fi
	# on nettoie maintenant le repertoire outdated/oldies (s'il existe)
	if [ -d ../outdated/oldies ]
	then
		(
		cd ../outdated/oldies
		for FILE in `ls */makefile`
		do
			( cd `dirname "$FILE"` ; $MAKE -s clean ; rm -rf bin bin.$TARGET_ARCH lib.$TARGET_ARCH )
		done
		)
	fi
}

# ----------------------------------------------------------------------------

COMPILE() {
	TARGET_ARCH="$1"
	shift

	SRC_DONE=0
	UTIL_DONE=0
	for FILE in $SX/src/makefile $SX/util/makefile $SX/*/makefile
	do
		if [ $FILE = $SX/src/makefile ]
		then
			if [ $SRC_DONE = 1 ]
			then
				# on evite de compiler libsx.a deux fois
				continue
			else
				SRC_DONE=1
				TOOL_DIR=""
			fi
		elif [ $FILE = $SX/util/makefile ]
		then
			if [ $UTIL_DONE = 1 ]
			then
				# on evite de compiler libsxutil.a deux fois
				continue
			else
				UTIL_DONE=1
				TOOL_DIR=""
			fi
		else
			# cas des outils bnf, lecl, semc, etc.
			TOOL_DIR=`dirname "$FILE"`
		fi

		# preparation des repertoires
		PREPARE_DIRECTORIES $TARGET_ARCH
		if [ "$TOOL_DIR" != "" ]
		then
			PREPARE_DIRECTORIES $TARGET_ARCH $TOOL_DIR
		fi

		# compilation proprement dite
		( cd `dirname "$FILE"` ; $MAKE "ARCH=$TARGET_ARCH" "$@" )
	done
}

# ----------------------------------------------------------------------------

COMPUTE_GCC_WARNINGS() {
	# argument $1 : $TARGET_ARCH
	# argument $2 : $COMPILER ("gcc", "cc", etc.)

	# determination de la version de GCC
	# (code repris de $CADP/src/com/cadp_compiler)
	PREFIX='^gcc[ ]version[ ]'
	VERSION=`($2 -v 2>&1 < /dev/null) | grep "$PREFIX" | sed -e "s/$PREFIX//" | sed -e "s/[ ]*$//"`
	# ici, $VERSION vaut "" si $2 n'est pas un compilateur Gcc

	case "$2" in
		cc|gcc|*-gcc )
			case $VERSION in
				[1-8].* )
					# l'option -std=c2x n'existe pas
					GCC_STD="-std=c1x"
					if [ "$2" = "$CC_WIN64-gcc" ]
					then
						# cas specifique CONVECS : avec
						# gcc version 8.3-win32 20190406
						# -std=c1x declenche l'erreur
						# "sys/wait.h: No such file or
						# directory"
						GCC_STD=""
					fi
					;;
				* )
					# l'option -std=c2x apparait avec Gcc 9
					GCC_STD="-std=c2x"
			esac
			;;
		* )
			GCC_STD="-std=c2x"
	esac

	GCC_WARNINGS="-Wall -Wextra -Wswitch-default -Wdeclaration-after-statement -Wundef -Wshadow -Wbad-function-cast -Wcast-qual -Wredundant-decls -Wno-char-subscripts -Wcast-align -fno-common -Wstrict-prototypes -Wformat -Wuninitialized -fstrict-aliasing -Wold-style-definition $GCC_STD"

	# exportation de cette variable pour gccoptions
	export GCC_WARNINGS
}

# ----------------------------------------------------------------------------

COMPUTE_FLAGS() {
	TARGET_ARCH="$1"
	case $ARCH in
		iX86 )
			COMPILER="gcc"
			COMPUTE_GCC_WARNINGS $TARGET_ARCH $COMPILER
			if [ "$CONVECSX" != "" -a "$TARGET_ARCH" = iX86 ]
			then
				# CONVECS-specific compile options
				VASY_CFLAGS='-D_FILE_OFFSET_BITS=64'
			else
				# standard compile options
				VASY_CFLAGS=""
			fi
			CFLAGS="-m32 $GCC_WARNINGS $EXTRA_CFLAGS $VASY_CFLAGS"
			;;
		x64 )
			COMPILER="gcc"
			COMPUTE_GCC_WARNINGS $TARGET_ARCH $COMPILER
			if [ "$CONVECSX" != "" -a "$TARGET_ARCH" = iX86 ]
			then
				# CONVECS-specific compile options
				VASY_CFLAGS='-D_FILE_OFFSET_BITS=64'
				CFLAGS="-m32 $GCC_WARNINGS $EXTRA_CFLAGS $VASY_CFLAGS"
			else
				# standard compile options
				VASY_CFLAGS=""
				CFLAGS="-m64 $GCC_WARNINGS $EXTRA_CFLAGS $VASY_CFLAGS"
			fi
			;;
		sol64 )
			COMPILER="cc"
			# COMPUTE_GCC_WARNINGS $TARGET_ARCH $COMPILER
			CFLAGS="-m64 $EXTRA_CFLAGS"
			;;
		mac64|arm64 )
			COMPILER="cc"
			COMPUTE_GCC_WARNINGS $TARGET_ARCH $COMPILER
			CFLAGS="$GCC_WARNINGS $EXTRA_CFLAGS"
			;;
		win64 )
			COMPILER="cc"
			COMPUTE_GCC_WARNINGS $TARGET_ARCH $COMPILER
			CFLAGS="-m64 $GCC_WARNINGS $EXTRA_CFLAGS"
			;;
		* )
	esac
}

# ----------------------------------------------------------------------------

LOCAL_COMPILE() {
	TARGET_ARCH="$1"
	COMPUTE_FLAGS $TARGET_ARCH
	COMPILE $TARGET_ARCH \
		"COMPILER=$COMPILER" \
		"CFLAGS=$CFLAGS" \
		"LDFLAGS=$LDFLAGS"
}

# ----------------------------------------------------------------------------

LOCAL_COMPILE_BASE() {
	# compilation locale mono-architecture
	if [ "$1" != "" ]
	then
		TARGET_ARCH="$1"
	else
		TARGET_ARCH="$ARCH"
	fi
	if [ "$TARGET_ARCH" != "$ARCH" ]
	then
		BANNER "LOCAL COMPILATION ON HOST $ARCH FOR TARGET $TARGET_ARCH"
	else
		BANNER "LOCAL COMPILATION FOR ARCHITECTURE $ARCH"
	fi
	CLEAN $TARGET_ARCH
	LOCAL_COMPILE $TARGET_ARCH
	SET_PERMISSIONS
}

# ----------------------------------------------------------------------------

LOCAL_COMPILE_EXAMPLE() {
	# compilation locale mono-architecture
	EXAMPLE="$1"
	BANNER "LOCAL COMPILATION OF EXAMPLE $EXAMPLE FOR ARCHITECTURE $ARCH"
	# verification que la base a bien ete compilee
	if [ ! -f $SX/lib.$ARCH/libsx.a ]
	then
		echo "$COMMAND: SYNTAX must be compiled before example $EXAMPLE"
		exit 1	
	fi
	PREPARE_DIRECTORIES $ARCH
	PREPARE_DIRECTORIES $ARCH $SX/examples/$EXAMPLE
	( 
		PATH="$SX/bin:$PATH"
		cd $SX/examples/$EXAMPLE
		$MAKE "ARCH=$ARCH" \
			"COMPILER=$COMPILER" \
			"CFLAGS=$CFLAGS" \
			"LDFLAGS=$LDFLAGS" \
			clean all
	)
}

# ----------------------------------------------------------------------------

LOCAL_COMPILE_EXTENSION() {
	# compilation locale mono-architecture
	EXTENSION="$1"
	BANNER "LOCAL COMPILATION OF EXTENSION $EXTENSION FOR ARCHITECTURE $ARCH"
	# verification que la base a bien ete compilee
	if [ ! -f $SX/lib.$ARCH/libsx.a ]
	then
		echo "$COMMAND: SYNTAX must be compiled before extension $EXTENSION"
		exit 1	
	fi
	PREPARE_DIRECTORIES $ARCH
	PREPARE_DIRECTORIES $ARCH $EXTENSIONS/$EXTENSION
	( 
		PATH="$SX/bin:$PATH"
		cd $EXTENSIONS/$EXTENSION
		$MAKE "ARCH=$ARCH" \
			"COMPILER=$COMPILER" \
			"CFLAGS=$CFLAGS" \
			"LDFLAGS=$LDFLAGS" \
			clean all
	)
}

# ----------------------------------------------------------------------------

LOCAL_COMPILE_OLDIE() {
	# compilation locale mono-architecture
	OLDIE="$1"
	BANNER "LOCAL COMPILATION OF OLDIE $OLDIE FOR ARCHITECTURE $ARCH"
	# verification que la base a bien ete compilee
	if [ ! -f $SX/lib.$ARCH/libsx.a ]
	then
		echo "$COMMAND: SYNTAX must be compiled before oldie $OLDIE"
		exit 1	
	fi
	PREPARE_DIRECTORIES $ARCH
	PREPARE_DIRECTORIES $ARCH $OLDIES/$OLDIE
	( 
		PATH="$SX/bin:$PATH"
		cd $OLDIES/$OLDIE
		$MAKE "ARCH=$ARCH" \
			"COMPILER=$COMPILER" \
			"CFLAGS=$CFLAGS" \
			"LDFLAGS=$LDFLAGS" \
			clean all
	)
}

# ----------------------------------------------------------------------------

HYPERGENESIS() {
	N=`expr $N + 1`
	BANNER "BOOTSTRAP PHASE $N - compiling source files"

	LOCAL_COMPILE $ARCH

	N=`expr $N + 1`
	BANNER "BOOTSTRAP PHASE $N - generating source files with the new programs"

	PREPARE_DIRECTORIES $ARCH

	rm -rf $SX/*/tmp 2> /dev/null

	STATUS=0

	CHANGE=0

	for BOOT in `ls -d $SX/*/boot`
	do
		DIR=`dirname $BOOT`
		echo ""

		( cd $DIR ; $MAKE -f $DIR/makefile "ARCH=$ARCH" \
			"COMPILER=$COMPILER" \
			"CFLAGS=$CFLAGS" \
			"LDFLAGS=$LDFLAGS" \
			bootstrap all )

		for FILE in `ls $BOOT`
		do
			ORIG=`echo $BOOT | sed -e 's+/boot$+/+'`
			OLD_FILE=$BOOT/$FILE
			NEW_FILE=$ORIG/$FILE
			set +e
			cmp -s $OLD_FILE $NEW_FILE
			if [ $? != 0 ]
			then
				echo "CHANGE $FILE"
				CHANGE=1
				case $OLD_FILE in
					*.skeleton )
						# this is the complex case:
						# a source file $AT_FILE was
						# modified by the user, leading
						# to a new skeleton $NEW_FILE
						# that is different from the
						# one recorded in $OLD_FILE ;
						# all we can do is to ask the
						# user to update manually the
						# source C file $AT_UPDATE
						# derived from the old skeleton
						# ($AT_UPDATE is easily found
						# as it is the only file that
						# contains an "ERROR_n" string)
						# and, then, copy the new
						# skeleton to the old one

						AT_FILE=`echo "$OLD_FILE" | sed -e 's+/boot/+/spec/+' | sed -e 's+[.]c[.]skeleton+.at+'`
						AT_DIR=`echo "$OLD_FILE" | sed -e 's+/boot/.*++'`
						AT_UPDATE=`grep -rl "ERROR_n" $AT_DIR | grep -v "^$OLD_FILE"`
						echo "$COMMAND: WARNING: the following SEMAT source file:"
						echo "$COMMAND:    $AT_FILE"
						echo "$COMMAND: has been modified; you must update manually the following file:"
						echo "$COMMAND:    $AT_UPDATE"
						echo "$COMMAND: to propagate the changes that exist between the old skeleton file:"
						echo "$COMMAND:    $OLD_FILE"
						echo "$COMMAND: and the new skeleton file:"
						echo "$COMMAND:    $NEW_FILE"
						echo "$COMMAND: once this is done, copy the new skeleton file onto the old one"
						echo "$COMMAND: and re-run sxmake"
						diff $OLD_FILE $NEW_FILE
						return    
						;;
				esac
				PROTECTED=`svn status -q $OLD_FILE 2> /dev/null`
				if [ "$PROTECTED" = "" ]
				then	
					cp $NEW_FILE $OLD_FILE
				else
					echo "$COMMAND: overwrite $OLD_FILE, which is (according to SVN) already modified?"
					diff $OLD_FILE $NEW_FILE
					cp -i $NEW_FILE $OLD_FILE
				fi
			fi
			set -e
		done
	done

	if [ $STATUS -eq 0 ]
	then
		echo "bootstrap phase $N ok"
	else
		echo "bootstrap phase $N failed"
		exit 1 
	fi
}

# ----------------------------------------------------------------------------

SUMMARIZE_ERRORS_WARNINGS () {
	# summarize errors and warnings, if any, in long file(s)
	set +e
	BANNER "SUMMARY OF ERRORS AND WARNINGS"
	NO_ERROR=1
	for LOG_FILE in "$@"
	do
		egrep -H -i '\<error\>|\<warning\>|\<Error\>|\<Implementation restriction\>|\<No such file or directory\>|\<No rule to make target\>|\<not found\>|\<undefined reference\>|\<Segmentation fault\>|\<File exists\>|sxmake:' $LOG_FILE
		if [ $? = 0 ]
		then
			NO_ERROR=0
		fi 
	done
	if [ $NO_ERROR = 1 ]
	then
		echo "(none)"
	fi
	set -e
}

# ----------------------------------------------------------------------------

cd $SX

if [ "$1" = "-debug" ]
then
	EXTRA_CFLAGS="-g"
	OPTION_DEBUG="-debug"
	shift
else
	EXTRA_CFLAGS="-O2"
	OPTION_DEBUG=""
fi
# here, $DEBUG_CFLAGS = "" unless "all-flags" has been invoked
if [ "$DEBUG_CFLAGS" != "" ]
then
	EXTRA_CFLAGS="$EXTRA_CFLAGS $DEBUG_CFLAGS"
fi
# exporting $EXTRA_CFLAGS is mandatory
export EXTRA_CFLAGS

# dummy value that only shows up is COMPUTE_GCC_WARNINGS() has not been called
GCC_WARNINGS="sxmake-unknown-option"

# ----------------------------------------------------------------------------

if [ $# = 0 ]
then
	# no argument given
	if [ "$CONVECSX" = "" ]
	then
		# standard usage
		( LOCAL_COMPILE_BASE 2>&1 ) | tee _.log
		SUMMARIZE_ERRORS_WARNINGS _.log
	else
		# CONVECS-specific usage
		# compile the binaries for all the supported architectures
		for TARGET_ARCH in `Make-whole`
		do
			MACH=`Make-mach $TARGET_ARCH`
			# the value of $CADP must be sent for win64
			( ssh $MACH "source /common/com/path ; setenv CONVECSX $CONVECSX ; setenv CADP $CADP ; sh $SX/etc/bin/sxmake $OPTION_DEBUG $TARGET_ARCH" 2>&1 ) | tee _$TARGET_ARCH.log
			# suppression de _.log, que subsume _$TARGET_ARCH.log
			rm -f _.log
		done
		SET_PERMISSIONS
		SUMMARIZE_ERRORS_WARNINGS _*.log
	fi
	exit 0
fi

# ----------------------------------------------------------------------------

# assert $1 != ""

if [ -f "$SX/examples/$1/makefile" ]
then
	# assert $1 is the name of an example: cx, f77, pplecl, etc.
	COMPUTE_FLAGS $ARCH
	LOCAL_COMPILE_EXAMPLE "$1" 2>&1 | tee _.log
	SET_PERMISSIONS
	SUMMARIZE_ERRORS_WARNINGS _.log
	exit 0
fi

# ----------------------------------------------------------------------------

if [ -f "$EXTENSIONS/$1/makefile" ]
then
	# assert $1 is the name of a processor belonging to the extensions
	COMPUTE_FLAGS $ARCH
	LOCAL_COMPILE_EXTENSION "$1" 2>&1 | tee _.log
	SET_PERMISSIONS
	SUMMARIZE_ERRORS_WARNINGS _.log
	exit 0
fi

# ----------------------------------------------------------------------------

if [ -f "$OLDIES/$1/makefile" ]
then
	# assert $1 is the name of a processor belonging to the oldies
	COMPUTE_FLAGS $ARCH
	LOCAL_COMPILE_OLDIE "$1" 2>&1 | tee _.log
	SET_PERMISSIONS
	SUMMARIZE_ERRORS_WARNINGS _.log
	exit 0
fi

# ----------------------------------------------------------------------------

case "$1" in

	clean )
		CLEAN $ARCH
		;;

	full-clean )
		CLEAN $ARCH
		FULL_CLEAN $ARCH
		;;

	all-flags )
		shift
		# exercise all debug flags listed in $SX/incl/sxdebug.h
		(
			for FLAG in BUG EBUG EBUG_ALLOC LOG LLOG LLLOG \
			    MEASURES is_dag is_sdag STATS EBUG_PRDCT is_large
			do
				BANNER "CHECKING FLAG $FLAG"
				(
					DEBUG_CFLAGS="-D$FLAG=1"
					export DEBUG_CFLAGS
					sh $SX/etc/bin/sxmake $OPTION_DEBUG "$@"
				)
			done
		)  2>&1 | tee _flags.log
		;;

	boot|bootstrap )
		BANNER "BOOTSTRAP FOR ARCHITECTURE $ARCH - \$SX=$SX"

		(
			PATH="$SX/bin:$PATH"
			N=0
			while true
			do
				HYPERGENESIS
				# l'appel a HYPERGENESIS positionne $CHANGE a 0 ou 1
				if [ $CHANGE = 0 ]
				then
					# aucun des fichiers *_t.c n'a ete modifie'
					break
				fi
			done
		) 2>&1 | tee _.log
		SUMMARIZE_ERRORS_WARNINGS _.log
		;;

	scribble )
		if [ "$ARCH" != "mac64" -a "$ARCH" != "arm64" ]
		then
			echo "$COMMAND: warning: option scribble is only effective on macOS"
		fi
		(
		MALLOC_DEBUG=1
		export MALLOC_DEBUG
		sh $SX/etc/bin/vasy-bootstrap.sh $ARCH 2>&1
		)
		if [ "$ARCH" = "mac64" -o "$ARCH" = "arm64" ]
		then
			cat $SX/_scribble.log | egrep -v "malloc: protecting edges|malloc: recording malloc stacks|enabling scribbling to detect mods to free blocks|checks heap after|will sleep for .* seconds on heap corruption|stack logs being written into|stack logs deleted from|malloc: MallocCheckHeap: PASSED check"
		else
			echo "$COMMAND: file _scribble.log is only generated on macOS"
		fi
		;;

	valgrind )
		(
		VALGRIND="valgrind --suppressions=$SX/etc/valgrind/suppressions"
		export VALGRIND
		sh $SX/etc/bin/vasy-bootstrap.sh $ARCH 2>&1
		) | tee _.valgrind
		;;

	examples )
		(
		# first, we compile the base
		LOCAL_COMPILE_BASE
		# then, we compile the examples
		for EXAMPLE in $SX/examples/*
		do
			if [ -d $EXAMPLE ]
			then
				LOCAL_COMPILE_EXAMPLE `basename $EXAMPLE`
			fi		
		done
		) 2>&1 | tee _.log
		SET_PERMISSIONS
		SUMMARIZE_ERRORS_WARNINGS _.log
		;;

	iX86 )
		if [ $ARCH = iX86 -o $ARCH = x64 ]
		then
			LOCAL_COMPILE_BASE iX86 2>&1 | tee _.log
			SUMMARIZE_ERRORS_WARNINGS _.log
		else
			echo "$COMMAND: no cross-compilation available on $ARCH for iX86"
			exit 1
		fi
		;;

	x64 )
		if [ $ARCH = iX86 -o $ARCH = x64 ]
		then
			LOCAL_COMPILE_BASE x64 2>&1 | tee _.log
			SUMMARIZE_ERRORS_WARNINGS _.log
		else
			echo "$COMMAND: no cross-compilation available on $ARCH for x64"
			exit 1
		fi
		;;

	sol64 )
		if [ $ARCH = sol86 -o $ARCH = sol64 ]
		then
			LOCAL_COMPILE_BASE sol64 2>&1 | tee _.log
			SUMMARIZE_ERRORS_WARNINGS _.log
		else
			echo "$COMMAND: no cross-compilation available on $ARCH for sol64"
			exit 1
		fi
		;;

	arm64 )
		if [ $ARCH = arm64 ]
		then
			# local compilation (most likely using Xcode's cc)
			LOCAL_COMPILE_BASE 2>&1 | tee _.log
			SUMMARIZE_ERRORS_WARNINGS _.log
		else
			echo "$COMMAND: no cross-compilation available on $ARCH for arm64"
			exit 1
		fi
		;;
	mac64 )
		if [ $ARCH = mac64 ]
		then
			# local compilation (most likely using Xcode's cc)
			LOCAL_COMPILE_BASE 2>&1 | tee _.log
			SUMMARIZE_ERRORS_WARNINGS _.log
		else
			# cross-compilation for mac64, e.g., on x64
			if [ "$CC_MAC64" != "" ]
			then
				MAC64_SET=1
			else
				MAC64_SET=0
				# try a plausible value that works for CONVECS
				CC_MAC64="/common/Clang-macOS/OSXCROSS/target/bin/x86_64-apple-darwin19"
				export CC_MAC64
				# etend the $PATH as required by Clang
				PATH="$PATH:/common/Clang-macOS/OSXCROSS/target/bin" 
			fi
			if [ ! -x "$CC_MAC64-cc" ]
			then
				if [ "$MAC64_SET" = 1 ]
				then
					echo "$COMMAND: cross-compiler \$CC_MAC64(\"$CC_MAC64\")-cc does not exist"
				else
					echo "$COMMAND: environment variable \$CC_MAC64 is not set"
				fi
				exit 1
			fi 
			# test and set variable $FRAMEPATH_MAC64
			if [ "$FRAMEPATH_MAC64" != "" ]
			then
				MAC64_SET=1
			else
				MAC64_SET=0
				# try a CONVECS-specific value
				FRAMEPATH_MAC64="/common/Clang-macOS/OSXCROSS/target/SDK/MacOSX10.15.sdk/System/Library/Frameworks"
				export FRAMEPATH_MAC64
			fi
			if [ ! -d "$FRAMEPATH_MAC64" ]
			then
				if [ "$MAC64_SET" = 1 ]
				then
					echo "$COMMAND: environment variable \$FRAMEPATH does not point to a directory"
				else
					echo "$COMMAND: environment variable \$FRAMEPATH_MAC64 is not set"
				fi
				exit 1
			fi
			# test and set variable $LIBPATH_MAC64
			if [ "$LIBPATH_MAC64" != "" ]
			then
				MAC64_SET=1
			else
				MAC64_SET=0
				# try a CONVECS-specific value
				LIBPATH_MAC64="/common/Clang-macOS/OSXCROSS/target/SDK/MacOSX10.15.sdk/usr/lib"
				export LIBPATH_MAC64
			fi
			if [ ! -d "$LIBPATH_MAC64" ]
			then
				if [ "$MAC64_SET" = 1 ]
				then
					echo "$COMMAND: environment variable \$LIBPATH does not point to a directory"
				else
					echo "$COMMAND: environment variable \$LIBPATH_MAC64 is not set"
				fi
				exit 1
			fi
			# test and set variable MACOSX_DEPLOYMENT_TARGET
			if [ "$MACOSX_DEPLOYMENT_TARGET" = "" ]
			then
				# try a plausible value that works for CONVECS
				MACOSX_DEPLOYMENT_TARGET=10.15
				export MACOSX_DEPLOYMENT_TARGET
			fi
			# cross-compilation on the current machine
			BANNER "CROSS-COMPILATION ON HOST $ARCH FOR TARGET mac64"
			CLEAN mac64
			COMPUTE_GCC_WARNINGS mac64 $CC_MAC64-cc
			COMPILE mac64 \
				"COMPILER=$CC_MAC64-cc" \
				"CFLAGS=$GCC_WARNINGS $EXTRA_CFLAGS $VASY_CFLAGS" \
				"LDFLAGS=$LDFLAGS -dylib_file /usr/lib/system/libmathCommon.A.dylib:$LIBPATH_MAC64/system/libmathCommon.A.dylib" \
				"AR=$CC_MAC64-ar" \
				"RANLIB=$CC_MAC64-ranlib" 2>&1 | tee _.log 
			SET_PERMISSIONS
			SUMMARIZE_ERRORS_WARNINGS _.log
		fi
		;;

	win64 )
		if [ $ARCH = win64 ]
		then
			# local compilation (most likely using Cygwin's gcc)
			LOCAL_COMPILE_BASE win64 2>&1 | tee _.log
			SUMMARIZE_ERRORS_WARNINGS _.log
		else
			# cross-compilation for win64, e.g., on x64
			if [ "$CC_WIN64" != "" ]
			then
				WIN64_SET=1
			else
				WIN64_SET=0
				# try a plausible value that works for CONVECS
				CC_WIN64="/usr/bin/i686-w64-mingw64"
				export CC_WIN64
			fi
			if [ ! -x "$CC_WIN64-gcc" ]
			then
				if [ "$WIN64_SET" = 1 ]
				then
					echo "$COMMAND: cross-compiler \$CC_WIN64(\"$CC_WIN64\")-gcc does not exist"
				else
					echo "$COMMAND: environment variable \$CC_WIN64 is not set"
				fi
				exit 1
			fi 
			if [ "$CONVECSX" != "" ]
			then
				# CONVECS-specific compile options
				VASY_CFLAGS='-I$(CADP)/incl -DVASY_LIB'
				VASY_LDFLAGS='-L$(CADP)/bin.win64 -lm'
			else
				# standard compile options
				VASY_CFLAGS=""
				VASY_LDFLAGS=""
			fi	
			# cross-compilation on the current machine
			BANNER "CROSS-COMPILATION ON HOST $ARCH FOR TARGET win64"
			CLEAN win64
			COMPUTE_GCC_WARNINGS win64 $CC_WIN64-gcc
			COMPILE win64 \
				"COMPILER=$CC_WIN64-gcc" \
				"CFLAGS=-m64 $GCC_WARNINGS $EXTRA_CFLAGS $VASY_CFLAGS" \
				"LDFLAGS=$LDFLAGS $VASY_LDFLAGS" \
				"AR=$CC_WIN64-ar" \
				"RANLIB=$CC_WIN64-ranlib" 2>&1 | tee _.log
			SET_PERMISSIONS
			SUMMARIZE_ERRORS_WARNINGS _.log
		fi
		;;

	* )
		echo "$COMMAND: unexpected argument $1"
		exit 1
esac

exit 0

