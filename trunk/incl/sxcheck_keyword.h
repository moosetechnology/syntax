/******************************************************************************
 *                                S Y N T A X
 *-----------------------------------------------------------------------------
 *   Copyright (C) 1972-2023 INRIA (Institut National de Recherche en
 *   Informatique et Automatique)
 *-----------------------------------------------------------------------------
 *   URL: http://sourcesup.renater.fr/projects/syntax
 *-----------------------------------------------------------------------------
 *   The source code of SYNTAX is distributed with two different licenses,
 *   depending on the files:
 *   - The recursive content of src/ and incl/ and the non-recursive content
 *     of SYNTAX's root directory are distributed under the CeCILL-C license
 *   - The recursive content of all other repertories is distributed under
 *     the CeCILL license
 *   All code produced by SYNTAX must be considered as being under the
 *   CeCILL-C license. Information about the CeCILL and CeCILL-C licenses
 *   can be found at, e.g., http://www.cecill.info
 *****************************************************************************/

static char WHAT_SXCHECK_KEYWORD[] = "@(#)SYNTAX - $Id: sxcheck_keyword.h 3987 2024-06-01 11:07:47Z garavel $" WHAT_DEBUG;

/**
 * CAUTION: This is not a standard include file, but a file that contains
 * code fragments to be included in most *_t.c file generated by TABLES_C.
 * The definitions below rely on the following macro-definitions that must
 * be defined (to an unsigned int value) before the present file is included:
 * 	KW_NB
 *	INIT_BASE
 *	INIT_SUFFIX
 *	CLASS_MASK
 *	STOP_MASK
 *	BASE_SHIFT
 *	SUFFIX_MASK
 * They also rely on four arrays that must be defined and initialized:
 *	static SXINT kw_code2t_code [KW_NB + 1]
 *	static SXINT kw_code2lgth [KW_NB + 1]
 *	static SXUINT comb_vector [???]
 *	static unsigned char char2class [256]
**/

SXINT sxcheck_keyword (char *init_string, SXINT init_length)
{
    char	*string = init_string, *keyword;
    SXINT	length = init_length;
    SXUINT	kw_code;
    SXINT       t_code;

#if KW_NB==1
    kw_code = 1;
#else
    char	*pbs;
    unsigned char class;
    SXUINT	is_suffix, base, tooth;

    base = INIT_BASE;
    is_suffix = INIT_SUFFIX;
    pbs = init_string + init_length - 1;

    for (;;) {
	if (length == 0) {
	    tooth = comb_vector [base];

	    if ((tooth & CLASS_MASK) != 0 || (tooth & STOP_MASK) == 0)
		return 0;

	    kw_code = tooth >> BASE_SHIFT;
	    break;
	}

	if ((class = char2class [is_suffix ? *pbs-- : *string++]) == 0)
	    return 0;

	length--;
	tooth = comb_vector [base+class];

	if ((tooth & CLASS_MASK) != class)
	    return 0;

	if (tooth & STOP_MASK) {
	    /* Reconnaissance partielle */
	    kw_code = tooth >> BASE_SHIFT;
	    break;
	}

	is_suffix = tooth & SUFFIX_MASK;
	base = tooth >> BASE_SHIFT;
    }
#endif

    if (kw_code2lgth [kw_code] != init_length)
	return 0;

    t_code = kw_code2t_code [kw_code];
    keyword = sxtables.SXS_tables.S_adrp [t_code] + (string-init_string);

    while (length-- > 0) {
	if (*string++ != *keyword++)
	    return 0;
    }

#ifdef SYNO
{
    SXINT	syno;

    if ((syno = (SXINT)t_code-(EOF_CODE+1)) >= 0)
	t_code = syno2t_code [syno];
}
#endif

    (void) WHAT_SXCHECK_KEYWORD; /* pour eviter un warning de Gcc */

    return t_code;
}
