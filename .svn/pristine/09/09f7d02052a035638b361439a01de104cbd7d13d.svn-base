#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "sxunix.h"

/* from lotosnt_predefined.h */
typedef bool ADT_BOOL;
#define ADT_FALSE() false
#define ADT_TRUE() true

/* 'sxtables' _defined_ (and not declared) in sxu2.h */
extern struct sxtables sxtables;

/* defined and initialized in simproc.semc */
extern SXBOOLEAN *SYNTAX_ERROR;
extern void TREE_DUMP (void);
extern void CODE_GENERATION (void);
extern void TREE_DECORATION (void);
extern ADT_BOOL TREE_CHECKING (void);

/* generated by Traian */
extern void TRAIAN_INIT (void);

/*---------------------------------------------------------------------------*/

int  main (int argc, char *argv[])
{
     FILE *FILE_SOURCE;
     char *FILENAME;

     sxstdout = stdout;
     sxstderr = stderr;
     sxopentty ();

     if (argc == 1) {
	  fprintf (stderr, "simproc: no argument given (a file name was expected)\n");
	  exit (1);
     }
     FILENAME = argv[1];
     FILE_SOURCE = fopen (FILENAME, "r");
     if (FILE_SOURCE == NULL) {
	  fprintf (stderr, "simproc: cannot read input file \"%s\"\n", FILENAME);
	  exit (1);
     }
     TRAIAN_INIT ();

     fprintf (stderr, "simproc: syntax analysis of %s\n", FILENAME);
     sxstr_mngr (SXBEGIN);
     (*(sxtables.analyzers.parser)) (SXBEGIN);
     syntax (SXOPEN, &sxtables);
     sxsrc_mngr (SXINIT, FILE_SOURCE, FILENAME);
     sxerr_mngr (SXBEGIN);
#ifdef SX_GLOBAL_VAR
     /*
      * en Syntax V6, l'appel ci-dessous est indispensable pour avoir les
      * messages d'erreur compacts dans le style VASY ; en Syntax V3.8, il
      * est interdit car SXERR_FORMAT_LIGHTWEIGHT n'est pas defini (c'est
      * Make-syntax qui se charge de patcher le fichier source "sxerr_mngr.c"
      * pour avoir les messages d'erreur compacts)
      */
     sxerr_mngr (SXFORMAT, SXERR_FORMAT_LIGHTWEIGHT);
#endif

     syntax (SXACTION, &sxtables);

     sxsrc_mngr (SXFINAL);
     sxerr_mngr (SXEND);
     syntax (SXCLOSE, &sxtables);
     (*(sxtables.analyzers.parser)) (SXEND);

     fclose (FILE_SOURCE);

     if (*SYNTAX_ERROR == SXTRUE) {
	  fprintf (stderr, "simproc: syntax error %d\n", *SYNTAX_ERROR);
	  exit (1);
     }
     fprintf (stderr, "simproc: semantic check of %s\n", FILENAME);

     if (TREE_CHECKING () != ADT_TRUE ()) {
	  fprintf (stderr, "simproc: semantic error\n");
	  exit (1);
     }
     fprintf (stderr, "simproc: tree decoration of %s\n", FILENAME);
     TREE_DECORATION ();

     fprintf (stderr, "simproc: code generation of %s\n", FILENAME);
     CODE_GENERATION ();

     sxstr_mngr (SXEND);
     exit (0);
}

/*---------------------------------------------------------------------------*/
