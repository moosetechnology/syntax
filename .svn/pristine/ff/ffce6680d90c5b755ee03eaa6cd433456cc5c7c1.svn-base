axiome(\a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z\0\1\2\3\4\5\6\7\8\9\ \(\)\[\])
		--> &False () .
axiome(X Y)	--> &StrLen(2, X) d1(X) g1(Y) .
axiome(X Y)	--> &StrLen(2, X) d2(X) g2(Y) .
axiome(X)	--> !d(X) . @mess

d(X Y)		--> &StrLen(2, X) d1(X) .
d(X Y)		--> &StrLen(2, X) d2(X) .

d1(\1\ )	--> .
d2(\2\ )	--> .





%
% { bx | bx \in {0,1}^* et b est une repre'sentation binaire de |x|}
%
% s'execute en temps O(log n) Si c'est la representation canonique de b!!
%
% On commence par enlever les 0 de tete
% S'il reste la chaine vide ou 10 ou 11 c'est bon
% Sinon, on cherche la limite entre b et x c'est le boulot du predicat A
% si |b| = k+1 (k >= 0) on a 2^k <= |x| <= 2^{k+1}-1
% Pour tout k >= 0, les chaines de longueur k+1+2^{k+1} sont interdites
%
% Ensuite on grignote b et x tous les deux de droite a gauche, c'est le boulot du predicat C(X,Y,Z,W)
% X = b1 est un prefixe de b = b1 b2
% Y est une chaine de longueur 2^p, p=|b2|
% Z vaut toujours x, il sert a calculer les Y
% W = x1 est un prefixe de x = x1 x2 tel que |x2|=binary(b2)
%
% Le predicat B sert a faire la liaison entre A et C en assurant les bonnes conditions initiales
%


g1()			--> .
g1(0 X)			--> g1(X) .
g1(1 T)			--> &StrLen(1, T) . % 10 ou 11 
g1(1 X T2)		--> &StrLen(1, T2) gtr(X, T2) A(1 X T2, X, T2, 1 X T2) .

gtr(X1 X2, Y)		--> &StrEqLen(X1, Y) !&StrLen(0, X2) .

A(P T V,T X Y,Z,U Y Z)	--> &StrEqLen(Y, Z) &StrLen(1, T) gtr(X, Y Z) A(P T V,X,Y Z,U Y Z) .
A(P T V,T X Y,Z,U Y Z)	--> &StrEqLen(Y, Z) &StrLen(1, T) gtr(Y Z, X) B(P T,V) .

B(X 1, Y T)		--> &StrLen(1, T) C(X,T,Y T,Y) .
B(X 0, Y T)		--> &StrLen(1, T) C(X,T,Y T,Y T) .

C(X 1,Y,Z1 Z2 Y,W1 W2)	--> &StrEqLen(Z2, Y) &StrEqLen(W2, Z2 Y) C(X,Z2 Y,Z1 Z2 Y,W1) .
C(X 0,Y,Z1 Z2 Y,W)	--> &StrEqLen(Z2, Y) C(X,Z2 Y,Z1 Z2 Y,W) .
C(,Y,Z,)		--> .


%
% Let T=\set{(,),[,]}
% We define for each w \in T^* the unary Cmp operation denoted by w^c as follows
% w=\varepsilon \Longrightarrow w^c=\varepsilon
% \forall w \in T^*, 
% w_1= ( w \Longrightarrow w_1^c= [ w^c
% w_1= ) w \Longrightarrow w_1^c= ] w^c
% w_1= [ w \Longrightarrow w_1^c= ( w^c
% w_1= ] w \Longrightarrow w_1^c= ) w^c
%
% Using Cmp we inductively define  the language L by
% [level 0] L_0 = \set{\varepsilon}
% [level i] i>0, L_i = \set{(w)[w^c] \mid w \in L_{i-1}} \cup \set{[w](w^c) \mid w \in L_{i-1}}
% L = \cup_{i \geq 0} L_i
%
% {\cal O}(n \log n)
%
g2(X Y)			--> &StrEqLen(X,Y) Cmp(X,Y) Bal(X) .
g2()			--> .

Cmp(\(X,\[Y)		--> Cmp(X,Y) .
Cmp(\[X,\(Y)		--> Cmp(X,Y) .
Cmp(\)X,\]Y)		--> Cmp(X,Y) .
Cmp(\]X,\)Y)		--> Cmp(X,Y) .
Cmp(,)			--> .

Bal(\( X \))		--> g2(X) .
Bal(\[ X \])		--> g2(X) .

