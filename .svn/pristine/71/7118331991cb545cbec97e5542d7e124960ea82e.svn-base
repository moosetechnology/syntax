* #############################################################
* #DECLARATION DES OBJETS DE LA GRAMMAIRE LEXICALE
* #############################################################

<axiome>		= <declaration_LIST> <rule_LIST> ;				"LEXICAL_GRAMMAR"

<declaration_LIST>	= <declaration_LIST> <declaration> ;
<declaration_LIST>	= ;								"DECLARATION_S"

<declaration>		= ATTRIBUTE <attribut_LIST> ;					"ATTRIBUTE"
<declaration>		= ARGUMENT <argument_LIST> ;					"ARGUMENT"
<declaration>		= CATEGORY <argument_LIST> ;					"CATEGORY"
<declaration>		= TERMINAL <argument_LIST> ;					"TERMINAL"
<declaration>		= AMALGAM <amalgam_LIST> ;					"AMALGAM"
<declaration>		= COMPOUND <compound_LIST> ;					"COMPOUND"
<declaration>		= %MACRO_NAME "=" <structure> ";" ;				"MACRO_STRUCTURE"
* Le 20/06/05 Ca permet specifier la liste des non-terminaux dont les f_structures doivent etre complete et coherentes
<declaration>		= COMPLETE <pair_LIST> ;					"COMPLETE"

<argument_LIST>		= <argument_LIST> <graphie> ";" ;
<argument_LIST>		= <graphie> ";" ;						"ARGUMENT_S"

<pair_LIST>		= <pair_LIST> <pair> ";" ;
<pair_LIST>		= <pair> ";" ;							"PAIR_S"

<pair>                  = <graphie> ;
<pair>                  = <graphie> %CHAINE ;						"PAIR"	

<attribut_LIST>		= <attribut_LIST> <attribut_pass_nb> ";" ;
<attribut_LIST>		= <attribut_pass_nb> ";" ;					"ATTRIBUTE_S"

<attribut_pass_nb>	= <attribut> <pass_nb> ;					"ATTRIBUTE_PASS_NB"

<attribut>		= %IDENT "=" "{" <disjonction_LIST> "}" ;			"ATTR_ATOMS"
<attribut>		= %IDENT "=" "{" <disjonction*> "." "." "." "}" ;		"ATTR_DOTS"
<attribut>		= %IDENT "=" "[" "]" ;						"ATTR_STRUCT"
<attribut>		= %IDENT "=" "<" "[" "]" ">" ;					"ATTR_ARG_STRUCT"
<attribut>		= %IDENT "=" "{" "[" "]" "}" ;					"ATTR_SET_OF_STRUCT"

* Le 10/05/05 Ca permet de specifier le No de la passe au cours de laquelle le champ est e'value'
<pass_nb>               = ;								"VOID"
<pass_nb>               = %ENTIER ;
<pass_nb>               = "," %ENTIER ;

<disjonction*>		= <disjonction_LIST> ;
<disjonction*>		= ;

<main_structure>	= "[" <attr_val_LIST> "]" ;
<main_structure>	= "[" <attr_val_LIST> "]" %ENTIER ;				"NAMED_STRUCTURE"
<main_structure>	= "[" "]" ;							"EMPTY_STRUCT"

<structure>		= <main_structure> ;
<structure>		= "[" "]" %ENTIER ;						"EMPTY_NAMED_STRUCT"

<attr_val_LIST> 	= <attr_val_LIST> "," <attr_val> ;
<attr_val_LIST> 	= <attr_val> ;							"ATTR_VAL_S"

<attr_val> 		= <attr> <field_oper> <val> ;					"ATTR_VAL"
<attr_val> 		= pred <field_oper> "\"" <graphie> <sous_cat> "\"" ;		"PRED_FIELD"
<attr_val> 		= %MACRO_NAME ;							"MACRO"

<attr>			= %IDENT ;							"FIELD"	
<attr>			= "(" %IDENT ")" ;						"OPT_FIELD"

<field_oper>		= "=" ;								"FIELD_EQUAL"
<field_oper>		= CONTRAINT ;							"FIELD_CONSTRAINT"
<field_oper>		= OPTIONAL ;							"FIELD_OPTIONAL"

<val>			= <structure> ;
<val>			= <atom_LIST> ;
<val>			= "(" <atom_LIST> ")" %ENTIER ;					"NAMED_ATOM"
<val>			= "(" ")" ;							"EMPTY_ATOM"
<val>			= "(" ")" %ENTIER ;						"EMPTY_NAMED_ATOM"
<val>			= "{" <structure_LIST> "}" ;
<val>			= "{" <structure_LIST> "}" %ENTIER ;				"NAMED_ADJUNCT"
<val>			= "{" "}" ;							"EMPTY_ADJUNCT"
<val>			= "{" "}" %ENTIER ;						"EMPTY_NAMED_ADJUNCT"

<structure_LIST>	= <structure_LIST> "," <structure> ;
<structure_LIST>	= <structure> ;							"STRUCTURE_S"

<sous_cat>		= "<" <disjonction_LIST> ">" ;
<sous_cat>		= "<" <disjonction_LIST> ">" <disjonction_LIST> ;		"SOUS_CAT"
<sous_cat>		= ;								"EMPTY_SOUS_CAT"

<disjonction_LIST>	= <disjonction_LIST> "," <disjonction> ;
<disjonction_LIST>	= <disjonction> ;						"DISJONCTION_S"

<disjonction>		= "(" <disjonction> ")" ;					"OPT_DISJONCTION"
<disjonction>		= <atom_LIST> ;

<atom_LIST>		= <atom_LIST> "|" <atome> ;
<atom_LIST>		= <atome> ;							"ATOM_S"

<atome>			= <champ> ;
<atome>			= "+" ;								"ATOM_PLUS"
<atome>			= "-" ;								"ATOM_MINUS"

<champ>			= <graphie> ;
<champ>			= %ENTIER ;

<graphie>		= <IDENT> ;
<graphie>		= %CHAINE ;

<IDENT>			= %IDENT ;
<IDENT>			= pred ;							"PRED"

<amalgam_LIST>		= <amalgam_LIST> <ident2_LIST> ";" ;
<amalgam_LIST>		= <ident2_LIST> ";" ; 						"AMALGAM_S"

<compound_LIST>		= <compound_LIST> <ident2_LIST> ";" ;
<compound_LIST>		= <ident2_LIST> ";" ; 						"COMPOUND_S"

<ident2_LIST>		= <ident2_LIST> <word> ;
<ident2_LIST>		= <word> <word> ; 						"IDENT_S"

<word>			= %IDENT ;
<word>			= %CHAINE ;

* RULE_PART

<rule_LIST>		= <rule_LIST> <rule> ";" ;
<rule_LIST>		= <rule> ";" ;  						"RULES_S"

* Si AMALGAM, ARGUMENT, ATTRIBUTE, CATEGORY, COMPLETE, COMPOUND, TERMINAL ou pred sont des formes flechies (ecrites ds cette casse), 
* ils doivent etre ecrits entre ' et ' ds les regles lexicales les definissant
<rule>			= %MOT_1COL <priority_LIST> <graphie> <[main_structure]> ;	"RULE"
* <rule>		= %PRED_1COL <priority_LIST> <IDENT> <[main_structure]> ;	"RULE"

* <rule>		= %MOT_1COL <priority> <IDENT> <[main_structure]> ;		"RULE_PRIO"
* <rule>		= %MOT_1COL <IDENT> <[main_structure]> ;			"RULE"
* <rule>		= %PRED_1COL <priority> <IDENT> <[main_structure]> ;		"RULE_PRIO"
* <rule>		= %PRED_1COL <IDENT> <[main_structure]> ;			"RULE"

<priority_LIST>		= <priority_LIST> <priority> ;
<priority_LIST>		= ;								"PRIORITY_S"

<priority>		= ! ;								"PRIORITY_MAX"
<priority>		= %ENTIER ;							"PRIORITY"	

<[main_structure]>	= <main_structure> ;
<[main_structure]>	= ;

