
Pierre Boullier - sept 2023

Ne pas appeler des fonctions comme sxcurrent_scanned_token_string() etc. 
dans les predicats syntaxiques du parser. Voir a ce sujet le commentaire
dans sxunix.h /* acces a l'etat du scanner et au caractere courant */

Ces macros ne sont utilisables que pour accéder à des variables du scanner 
(donc depuis des actions et prédicats du scanner) et certainement pas depuis 
quelque chose appelé depuis le parser. 

Le seul moyen safe est de consulter la liste des tokens par un appel à 
sxget_token() sachant que le numéro du dernier token précédant le prédicat 
est stocké dans sxplocals.ptok_no. Donc, pour accéder au token suivant un 
prédicat il faut appeler
	sxget_token (sxplocals.ptok_no + 1)
qui retourne un pointeur vers le token et permet donc d’accéder au contenu 
de ce token.

Voici par exemple le code du prédicat &1 dans f77_analyse.c

	case 1:
	    /* On est sur une virgule dans une io_list, une io_imply_do_list ou une
	       constante complexe. retourne VRAI si on n'est pas dans un complexe. */
	    if ((lahead = sxget_token (tok_no = sxplocals.ptok_no + 1)->lahead) == ID_t)
		return 1;

	    if (lahead == PLUS_t || lahead == MINUS_t)
		lahead = sxget_token (++tok_no)->lahead;

	    if ((lahead == UIC_t || lahead == URC_t) &&
		sxget_token (tok_no + 1)->lahead == RIGHTP_t)
		return 0;
		
	    return 1;

Pour avoir la chaîne de caractères de ce token il faut appeler
   sxstrget (pt->string_table_entry)
ou` pt est le pointeur vers le token d’intérêt.

---

Pierre Boullier - sept 2023

Les prédicats du parser ont été créés pour palier la faiblesse de la puissance
théorique du LALR(1), en permettant en particulier (mais pas uniquement) à 
l’utilisateur d’aller voir manuellement les tokens du contexte droit pour
l’aider à prendre sa décision.  Il dispose pour cela de la fonction 

extern struct sxtoken		*sxget_token (SXINT token_number);

sachant que le numéro du dernier token précédant le prédicat est stocké dans 
sxplocals.ptok_no. 

Cette fonction appelle le scanner le nombre de fois nécessaire pour traiter le
token demandé.  

Cette scrutation du contexte droit peut être plus ou moins compliquée.
L’exemple le plus compliqué est donné par le traitement des FORMAT et DO de 
f77 où ce contexte droit est analysé (récursivement) par l’analyseur de f77
lui-même par l’intermédiaire de la fonction sxparse_in_la() (même si cette
analyse ne se fait pas depuis un prédicat syntaxique, mais depuis une action
du scanner car le but est de savoir si le FORMAT/DO est un mot-clé ou un id).

Ces prédicats qui examinent le look-ahead doivent donc utiliser des mêmes
choses que le parser pour rendre leur verdict à savoir les tokens et plus
précisément le champ lahead de ces tokens, celui qui contient la valeur du
code du terminal (comme le parser qui fonde ses décisions sur ce look-ahead).

L’idée d’utiliser les chaînes de caractères accessibles par :
	sxstrget (pt->string_table_entry) 
n’est pas sûre car ces chaînes ont peut-être subies pleins de modifcations
(lower/upper/suppression, ...) au niveau du scanner ; les comparer à des
constantes (par exemple "external") peut être problématique. Si "external"
est un mot-clé réservé du langage, sxstrget (pt->string_table_entry) retourne
un pointeur vers une chaîne vide !

Bref, la bonne pratique est d’utiliser lahead et non pas string_table_entry.

Afin d’éviter la comparaison à des chaînes il y a le mécanisme tdef (voir par
exemple f77.tdef) qui permet d’associer à un identifier C un terminal de la
BNF), par exemple  :
	rightp_t                = ")" ;

La sortie de tdef est un .h (f77_td.h) qui contient des #define :
	#define rightp_t	9

Et il suffit d'écrire

	  case 1:
	       /*
	        * predicat syntaxique #1 qui renvoie vrai ssi le token
	        * courant est "external", "pointer" ou "nopointer"
	        */
	       look_ahead = sxget_token (sxplocals.ptok_no)->lahead;
	       if (look_ahead == external_t) ||
		   look_ahead == pointer_t) ||
		   look_ahead == nopointer_t))
		    return (1);
	       else
		    return (0);
	  case 2:
	       /*
		* predicat syntaxique #2 qui renvoie vrai ssi le token
		* suivant est ")"
		*/
	       look_ahead = sxget_token (sxplocals.ptok_no+1????)->lahead;
	       /* look_ahead est un numero de token, strictement positif */
	       if (look_ahead == rightp_t)
		    return (1);
	       else
		    return (0);


