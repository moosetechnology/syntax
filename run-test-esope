#! /bin/sh

# Hubert Garavel - August 2023
# Updated for esope testing - Safina - 2024


#------------------------------------------------------------------------------

if [ -z "$1" ]; then
  echo "Usage: $0 <config_file>"
  exit 1
fi


# Read configuration file
CONFIG_FILE="$1"
if [ ! -f "$CONFIG_FILE" ]; then
  echo "Configuration file $CONFIG_FILE not found!"
  exit 1
fi

# Source the configuration file to load variables
source "$CONFIG_FILE"

# Ensure project_root_dir is set
if [ -z "$project_root_dir" ]; then
  echo "project_root_dir is not defined in the configuration file."
  exit 1
fi

# Ensure necessary directories are provided
if [ -z "$g_inc_dirs" ] || [ -z "$src_dirs" ]; then
  echo "g_inc_dirs and src_dirs must be defined in the configuration file."
  exit 1
fi

# Ensure extensions are defined
if [ -z "$extensions" ]; then
  echo "extensions must be defined in the configuration file."
  exit 1
fi


SYNTAX_DIR=$(pwd)

RESULTS_DIR="${SYNTAX_DIR}/test-results"
if [ ! -d "$RESULTS_DIR" ]; then
  mkdir "$RESULTS_DIR"
fi

#------------------------------------------------------------------------------

cd "${SYNTAX_DIR}"/trunk/examples/esope77

COMMAND=`basename "$0"`

SX=`dirname "$0"`/../..
ARCH=`$SX/etc/bin/arch`

F77=bin/f77
F77OUT=bin.$ARCH/f77.out

PPF77=bin/ppf77
PPF77OUT=bin.$ARCH/ppf77.out

SPLIT_OPTION=0
VALGRIND_OPTION=0

WD=`pwd`
WD=`basename "$WD"`

while true
do
	case "$1" in
		-split )
			# do not concatenate continuation lines
			SPLIT_OPTION=1
			shift
			;;
		-valgrind )
			# only run valgrind
			VALGRIND_OPTION=1
			shift
			;;
		-* )
			echo "$COMMAND: unknown option $1"
			exit 1
			;;
		* )
			break
	esac
done

#------------------------------------------------------------------------------

if [ $SPLIT_OPTION = 0 ]
then
	SCRIPT=`mktemp`
	cat > $SCRIPT << \EOF
# display comment lines
/^C/ { printf "\n%s", $0 ; next }

# non-continuation line with a zero in column 6: remove the zero
/^[ 0-9][ 0-9][ 0-9][ 0-9][ 0-9]0/ { printf "\n      %s", substr ($0, 7) ; next }

# continuation line without '0' nor ' ' in column 6
/^[ ][ ][ ][ ][ ][^0 ]/ { printf " %s", substr ($0, 7) ; next }

# non-continuation line without a zero in column 6
{ printf "\n%s", $0 }

END {
	printf "\n"
}
EOF
fi

#------------------------------------------------------------------------------

if [ $VALGRIND_OPTION = 1 ]
then
	VALGRIND="valgrind --quiet --track-origins=yes"
	export VALGRIND
fi

#------------------------------------------------------------------------------

FILTER() {
	# remove columns 72-80 of all lines not starting with a "C"
	awk '/^C/ { print ; next } { print substr ($0, 1, 72) }' |
	# remove empty lines
	grep -v '^[ ]*$' |
	# concatenate continuation lines
	if [ $SPLIT_OPTION = 0 ]
	then
		awk -f $SCRIPT -
	else
		cat
	fi
}

#------------------------------------------------------------------------------

RUN() {
	echo ""
	#case "$1" in
	#	-X ) echo "----------- $WD:f77 -X" "$2" | sed -e 's+test/++' ;;
	#	* )  echo "----------- $WD:f77" "$1" | sed -e 's+test/++' ;;
	#esac

	if [ $VALGRIND_OPTION = 1 ]
	then
		echo ""
		# on a positionne la variable globale $VALGRIND
		$F77 $*
		return
	fi

	$F77 $*
	STATUS=$?
	if [ $STATUS != 0 ]
	then
		echo "  exit status is $STATUS"
	fi
}

#------------------------------------------------------------------------------

if [ ! -x $F77OUT -a ! -x $PPF77OUT ]
then
	echo "$COMMAND: no executable f77.out nor ppf77.out found; run sxmake to build them"
	exit 1
fi

#------------------------------------------------------------------------------

# Generate the result and stats file names
RESULT_FILE="$RESULTS_DIR/${project_name}_results.txt"
STATS_FILE="$RESULTS_DIR/${project_name}_stats.txt"

# Initialize counters for statistics
TOTAL_COUNT=0
FAILED_COUNT=0

# Function to process files based on extensions
process_files() {
  local dir
  local ext
  local file

  for dir in $1; do
    # Resolve absolute path
    ABSOLUTE_DIR="$project_root_dir/$dir"
    
    # Loop through each file in the directory
    for file in $(find "$ABSOLUTE_DIR" -type f); do
      # Check if file matches any of the specified extensions
      for ext in $extensions; do
      	upper_extension=$(echo "${file##*.}" | tr '[:lower:]' '[:upper:]')

        if [[ "$upper_extension" == $ext ]]; then
        
          TOTAL_COUNT=$((TOTAL_COUNT + 1))
          ERR_OUTPUT=$(RUN "$file" 2>&1)

          if [[ -n "$ERR_OUTPUT" ]]; then
            FAILED_COUNT=$((FAILED_COUNT + 1))
            echo "----------- Errors in: $file -----------" >> "$RESULT_FILE"
            
            while IFS= read -r line; do
              if [[ "$line" =~ ^([^\\ ]+),[[:space:]]line[[:space:]]([0-9]+): ]]; then
                LINE_NUM=${BASH_REMATCH[2]}  # Extract line number
                START=$((LINE_NUM - 1))
                END=$((LINE_NUM + 1))
                sed -n "${START},${END}p" "$file" >> "$RESULT_FILE"
                echo "" >> "$RESULT_FILE"
              else
                echo "$line" >> "$RESULT_FILE"
              fi
            done <<< "$ERR_OUTPUT"
            
            echo "" >> "$RESULT_FILE"
          fi
        fi
      done
    done
  done
}

extensions=$(echo "$extensions" | tr '[:lower:]' '[:upper:]' | tr ' ' '\n' | sort | uniq | tr '\n' ' ')

# Process both g_inc_dirs and src_dirs
process_files "$g_inc_dirs"
process_files "$src_dirs"

# Calculate statistics
PASSED_COUNT=$((TOTAL_COUNT - FAILED_COUNT))
PASSED_PERCENT=$((100 * PASSED_COUNT / TOTAL_COUNT))

# Output statistics to the stats file
echo "Total files: $TOTAL_COUNT" > "$STATS_FILE"
echo "Files failed: $FAILED_COUNT" >> "$STATS_FILE"
echo "Percentage passed: $PASSED_PERCENT%" >> "$STATS_FILE"


#------------------------------------------------------------------------------

rm -f $SCRIPT $TMP1 $TMP2

exit 0