%
% RCG qui calcule la distance entre les chaines d'entree
%

% distance(L,X,Y) regarde si la distance entre les chaine X et Y est |L|


% S(\a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z\ )
% 		--> &False() . % sert uniquement a definir l'ensemble T
% S(L\ X\ Y)	--> &distance(L,X,Y) . % pour tester

% &distance(L,X,Y)			--> &StrEqLen(X,Y) dist_eq(L,X,Y) .
% &distance(L,X1 X2,Y)			--> !&StrLen(0,X1) &StrEqLen(X2,Y) dist(L,Y,X1 X2) .
% &distance(L,X,Y1 Y2)			--> !&StrLen(0,Y1) &StrEqLen(X,Y2) dist(L,X,Y1 Y2) .

% dist_eq(L,X,Y)	|X| = |Y|
% dist_eq(,X,Y)				--> &StrEq(X,Y) .
% dist_eq(L,X1 X2,Y1 Y2)			--> !&StrLen(0,L) &StrLen(1,X1) &StrEq(X1,Y1) dist_eq(L,X2,Y2) .	
% dist_eq(L1 L2,X1 X2 X3,Y1 Y2 Y3)	--> &StrLen(1,L1) &StrLen(1,X1) &StrLen(1,X2) &StrEq(X1,Y2)
% 					    &StrEq(X2,Y1) !&StrEq(X1,Y1) dist_eq(L2,X3,Y3) . @rcvr_swap
% dist_eq(L1 L2,X1 X2,Y1 Y2)		--> &StrLen(1,L1) &StrLen(1,X1) &StrLen(1,Y1) !&StrEq(X1,Y1)
% 					    dist_eq(L2,X2,Y2) . @rcvr_change	


% dist(L,X,Y)	|X| < |Y|
% dist(L,X1 X2,Y1 Y2)			--> !&StrLen(0,L) &StrLen(1,X1) &StrEq(X1,Y1)
% 					    dist(L,X2,Y2) .	
% dist(L1 L2,X1 X2 X3,Y1 Y2 Y3)		--> &StrLen(1,L1) &StrLen(1,X1) &StrLen(1,X2) &StrEq(X1,Y2)
% 					    &StrEq(X2,Y1) !&StrEq(X1,Y1)
% 					    dist(L2,X3,Y3) . @rcvr_swap
% dist(L1 L2,X,Y1 Y2)			--> &StrLen(1,L1) &StrLen(1,Y1) &StrEqLen(X,Y2)
% 					    dist_eq(L2,X,Y2) . @rcvr_del
% dist(L1 L2,X,Y1 Y2)			--> &StrLen(1,L1) &StrLen(1,Y1) !&StrEqLen(X,Y2)
% 					    dist(L2,X,Y2) . @rcvr_del
% dist(L1 L2,X1 X2,Y1 Y2)			--> &StrLen(1,L1) &StrLen(1,X1) &StrLen(1,X2) !&StrEq(X1,Y1) 
% 					    dist(L2,X2,Y2) . @rcvr_change	


%
% Soit x une chaine de m symbols sur un alphabet T.
% On considere les operations d'edition suivantes :
% 	- suppression d'un symbole de x, cout D
% 	- insertion d'un symbole de T dans x, cout I
% 	- substitution d'un symbole de x par un autre symbole de T, cout S
% 	- echange de deux symboles consecutifs de x, cout E
% On appelle distance d'edition de deux chaines x et y, le nombre minimal d'operation d'edition
% qui permet de passer de x a y
% Si un cout est associe a chaque operation, on appelle cout d'edition de x a` y le cout minimal
% associe a la distance entre x et y. Attention, on cherche d'abord le nb min d'operations puis
% parmi tous ces scripts possibles, un de cout min.  Il serait donc possible d'avoir un cout + faible
% avec une distance + grande

%
% Si 0 <= i <= |x| et 0 <= j <= |y|, soit Dist(i,j) la distance entre les prefixes de x et y
% de longueur i et j.
% On a Dist(0,0)=0, Dist(i,0)=i, Dist(0,j)=j et
% Dist(i,j) = min{Dist(i-1,j-1)+(xi==yj?0:1, Dist(i-1,j)+1, Dist(i,j-1)+1}
%

%
% La RCG suivante regarde si les chaines X et Y sont a la distance |L|
% La semantique associee calcule les couts associes a chaque script (arbre) et ne conserve
% qu'un arbre de cout minimal
%


S(\a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z\ )
				--> &False() . % sert uniquement a definir l'ensemble T
S(L\ X\ Y)			--> &distance(L,X,Y) . % pour tester

&distance(,,)			--> .
&distance(L,,Y)			--> !&StrLen(0,L) &StrEqLen(L,Y) . @rcvr_insert
&distance(L,X,)			--> !&StrLen(0,L) &StrEqLen(L,X) . @rcvr_delete
&distance(L,X1 X2,Y1 Y2)	--> &StrLen(1,X2) &StrLen(1,Y2) &StrEq(X2,Y2) &distance(L,X1,Y1) .
&distance(L1 L2,X1 X2,Y1 Y2)	--> &StrLen(1,L2) &StrLen(1,X2) &StrLen(1,Y2) !&StrEq(X2,Y2)
				    &distance(L1,X1,Y1) . @rcvr_substitute
&distance(L1 L2,X1 X2,Y)	--> &StrLen(1,L2) &StrLen(1,X2) &distance(L1,X1,Y) . @rcvr_delete
&distance(L1 L2,X,Y1 Y2)	--> &StrLen(1,L2) &StrLen(1,Y2) &distance(L1,X,Y1) . @rcvr_insert
&distance(L1 L2,X1 X2 X3,Y1 Y2 Y3)
				--> &StrLen(1,L2) &StrLen(1,X2) &StrLen(1,X3) &StrEq(X2,Y3)
				    &StrEq(X3,Y2) !&StrEq(X2,Y2) &distance(L1,X1,Y1) . @rcvr_swap
