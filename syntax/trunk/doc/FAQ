
-------------------------------------------------------------------------------

QUESTION [Yves Guerte - Tue, 15 May 2007 13:58:58 +0200]

      SEMC fait une *erreur* (et s'arrête) lorsque des symboles non terminaux ne
      sont pas atteignables (message d'erreur dans le fichier simproc.bn.l généré).
      Un *warning* serait plus pratique : pour débugger une grosse grammaire, on
      peut vouloir la couper en remplaçant une partie droite de règle par une
      chaîne constante.

      Exemple de fichier .semc sur lequel SEMC s'arrête sur une erreur :

    $SEMC_PROGRAM (<BNF_PROGRAM>) : C_TYPE_BLOC ;
    $SEMC_BLOCK (<BNF_BLOCK>) : C_TYPE_BLOC ;
    .....
    *==========================================================================
    <BNF_PROGRAM>    = <BNF_BLOCK> ;

    $SEMC_PROGRAM (<BNF_PROGRAM>)
        $SEMC_PROGRAM (<BNF_PROGRAM>) = $SEMC_BLOCK (<BNF_BLOCK>) ;
        ROOT_BLOCK = $SEMC_BLOCK (<BNF_BLOCK>) ;
    *==========================================================================
    <BNF_BLOCK>    = "DEBUG" ;

    $SEMC_BLOCK (<BNF_BLOCK>)
        $SEMC_BLOCK (<BNF_BLOCK>) = 0 ;
    *==========================================================================

REPONSE [Pierre Boullier]

     Les outils semc, bnf, semat, semact, ... supposent que la grammaire est
     réduite (propre) et ils le vérifient avant de poursuivre leur travail.

     Je rappelle qu'il est possible (et souhaitable en période de construction de la
    grammaire) de ne passer que bnf sur une grammaire semc en faisant
        bnf ma_grammaire.semc.

-------------------------------------------------------------------------------

INFORMATION [Romain Lacroix 03/11/2008 17:16]

J'ai pu constater que les outils Syntax avaient le même comportement une fois que j'ai activé les variables suivantes :

MallocScribble=1
MallocPreScribble=1
MallocStackLogging=1
MallocCheckHeapEach=1000
MallocCheckHeapStart=1000
MallocGuardEdges=1

J'ai essayé dans un premier temps de positionner ces variables dans le terminal, mais ca ne fonctionnait pas. Nous avons enquêté avec l'aide de Wendelin pour conclure que

   - le programme "as" (de gcc) semble ne pas fonctionner correctement quand on active MallocScribble

Plus précisément, lors de la compilation du programme lecl, as dit les messages suivants si on active MallocScribble:

/var/tmp//cc5YgCKd.s:3229:section difference divide by two expression, "L_fsa_trans$non_lazy_ptr" minus "L00000000017$pb" divide by 2 will not produce an assembly time constant

(message répété de nombreuses fois, la partie "L_fsa_trans$non_lazy_ptr" est remplacée par une autre variable à chaque fois)

Toutefois, la compilation se termine sans erreurs, mais les programmes produits ainsi ne sont pas corrects (ils n'arrivent plus à bootstrapper Syntax).

Pour contourner ce problème, nous avons positionné les variables MallocScribble et autre dans les wrappers des outils Syntax plutôt que pour tout le terminal qui appelle les outils Syntax puis la compilation. On peut les utiliser avec :

	sxmake scribble

En conclusion, je pense que Syntax est compatible avec les options de type MallocScribble.

-------------------------------------------------------------------------------

QUESTION : Quel est le rapport de FNC et FNC-2 avec SYNTAX ?

REPONSE : FNC et son evolution FNC-2 etaient des systemes de construction de
compilateurs definis au-dessus de SYNTAX et bases sur les grammaires 
attribuees. Ils ne sont plus disponibles aujourd'hui.

FNC2 was the system used to build versions 1.* and 2.* of the TRAIAN compiler.
Bruno Vivien, a former member of the VASY Team, has published a 54 page study
(in French) about the SYNTAX and FNC2 systems, including valuable information
about the Simproc example. See:
        http://vasy.inria.fr/publications/Vivien-96.html

-------------------------------------------------------------------------------


