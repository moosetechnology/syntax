<definite_clause_grammar>	= <grammar_rule_LIST>				; "DCG"

<grammar_rule_LIST>		= <grammar_rule_LIST> <grammar_rule>		; 
<grammar_rule_LIST>		= <grammar_rule>				; "RULE_S"

<grammar_rule>			= <grammar_head> --> <grammar_body_LIST> .	; "RULE"

<grammar_head>			= <non_terminal> <>				; "LHS"
<grammar_head>			= <non_terminal> , <terminal>			; "LHS"

<grammar_body_LIST>		= <grammar_body_LIST> | <grammar_item_LIST>	;
<grammar_body_LIST>		= <grammar_body_LIST> ";" <grammar_item_LIST>	;
<grammar_body_LIST>		= <grammar_item_LIST> 				; "BODY_S"

<grammar_item_LIST>		= <grammar_item_LIST> , <grammar_item>		;
<grammar_item_LIST>		= <grammar_item>				; "RHS_ITEM_S"
<grammar_item_LIST>		= 						; "RHS_ITEM_S"

<grammar_item>			= <terminal>					;
<grammar_item>			= <non_terminal>				;
<grammar_item>			= <prolog_goal>					;

<terminal>			= [ <constant_LIST> ]				;
<terminal>			= [ ]						;

<constant_LIST>			= <constant_LIST> , <constant>			;
<constant_LIST>			= <constant>					; "TERMINAL_S"

<prolog_goal>			= { <prolog_LIST> }				;

<prolog_LIST>			= <prolog_LIST> , <prolog>			;
<prolog_LIST>			= <prolog>					; "PROLOG_S"

<prolog>			= <compound_term>				;
<prolog>			= %variable is <argument>			; "IS"
<prolog>			= <rel_expr>					;

<non_terminal>			= %atom ( <argument_LIST> )			; "MAIN_FUNCTOR"
<non_terminal>			= %atom <>					; "MAIN_FUNCTOR"

<constant>			= <arith_constant>				;
<constant>			= %string					;
<constant>			= %atom						;

<arith_constant>		= %integer_number				;
<arith_constant>		= %floating_point_number			;
<arith_constant>		= %variable					;

<compound_term>			= %atom ( <argument_LIST> )			; "TERM"

<argument_LIST>			= <argument_LIST> , <argument>			;
<argument_LIST>			= <argument>					; "ARGUMENT_S"

<argument>			= <expr>					;
<argument>			= <compound_term>				;
<argument>			= <list>					;
<argument>			= %string					;
<argument>			= %atom						;

<rel_expr>			= <expr> "<" <expr>				; "LESS"
<rel_expr>			= <expr> "=<" <expr>				; "LESS_EQUAL"
<rel_expr>			= <expr> ">" <expr>				; "SUP"
<rel_expr>			= <expr> ">=" <expr>				; "SUP_EQUAL"

<expr>				= <expr> + <term>				; "PLUS"
<expr>				= <expr> - <term>				; "MINUS"
<expr>				= <term>					;

<term>				= <term> * <factor>				; "MULT"
<term>				= <term> / <factor>				; "DIV"
<term>				= <term> mod <factor>				; "MOD"
<term>				= <factor>					;

<factor>			= - <primary>					; "UNARY_MINUS"
<factor>			= <primary>					;

<primary>			= ( <expr> )					;
<primary>			= <arith_constant>				;

<list>				= [ ]						; "EMPTY_LIST"
<list>				= [ <list_body> ]				;

<list_body>			= <argument> , <list_body>			; "LIST_BODY"
<list_body>			= <argument> <>					; "LIST_BODY"
<list_body>			= <argument> | <list>				; "CATENATE"
<list_body>			= <argument> | %variable			; "CATENATE"

<>				=						;