








                    Br`eve Pr'esentation du Syst`eme SYNTAX*


                                Martin JOURDAN

       Institut National de Recherche en Informatique et en Automatique
                     Domaine de Voluceau -- Rocquencourt
                                   B.P. 105
                            78153 LE CHESNAY Cedex
                        E-mail: jourdan@minos.inria.fr





_1.  _Q_u'_e_s_t-_c_e _q_u_e _S_Y_N_T_A_X?

     SYNTAX est un syst`eme de production d'analyseurs lexico-syntaxiques,  qui
a  'et'e con,cu et r'ealis'e par l''equipe "Langages et Traducteurs" de l'INRIA.  Il
poursuit donc les m^emes buts que les utilitaires  standards  d'UNIX**  _l_e_x  et
_y_a_c_c,  mais  il est beaucoup plus puissant et performant, en particulier en ce
qui concerne le traitement des erreurs.

     De plus, les analyseurs produits peuvent ^etre associ'es `a  des  formes  de
traitement  s'emantique  de  plus  haut  niveau que celle disponible dans _y_a_c_c,
c'est-`a-dire la simple ex'ecution de fragments de code associ'es `a  chaque  pro-
duction.

_2.  _L_e_s _p_r_o_c_e_s_s_e_u_r_s _d_e _b_a_s_e

_2._1.  _I_n_t_r_o_d_u_c_t_e_u_r _s_y_n_t_a_x_i_q_u_e: _b_n_f

     _b_n_f  lit  une  grammaire  ind'ependante  du  contexte,  effectue  quelques
v'erifications  simples  de  coh'erence,  et  produit une forme interne de cette
grammaire (des "tables") qui sera utilis'ee par les autres processeurs.

     La grammaire d'entr'ee est 'ecrite dans un langage proche  de  la  "Backus-
Naur  Form"  bien  connue.  Les non-terminaux et les terminaux sont distingu'es
lexicalement.  Chaque alternative donne lieu `a une production diff'erente.

     _b_n_f accepte des grammaires  ambigu"es,  `a  condition  que  ces  ambigu"it'es
puissent  ^etre  lev'ees  par  la donn'ee de niveaux de priorit'e (voir la section
concernant _c_s_y_n_t et _p_r_i_o ci-dessous).  De plus, l'analyse syntaxique peut ^etre
influenc'ee  par  des  _p_r'_e_d_i_c_a_t_s  et  des _a_c_t_i_o_n_s programm'es par l'auteur de la
grammaire, ce qui permet de  traiter  des  langages  non-d'eterministes,  voire
_________________________
  * SYNTAX est une marque d'epos'ee de l'INRIA.
  ** UNIX est une marque  d'epos'ee  des  Laboratoires  Cloche  (AT&T  Bell
Labs).










                                    - 2 -


d'ependants du contexte.

_2._2.  _C_o_n_s_t_r_u_c_t_e_u_r _l_e_x_i_c_a_l: _l_e_c_l

     _l_e_c_l est le constructeur lexical.  Il lit les tables  produites  par  _b_n_f
(en  particulier  la  table  donnant  pour chaque terminal ceux qui peuvent le
suivre), ainsi qu'une description lexicale du langage, et produit  des  tables
d'ecrivant l'analyseur lexical engendr'e.

     Chaque terminal de la grammaire, ainsi que les _c_o_m_m_e_n_t_a_i_r_e_s  du  langage,
doit ^etre d'ecrit par une _e_x_p_r_e_s_s_i_o_n _r'_e_g_u_l_i`_e_r_e sur un alphabet dont les lettres
sont des classes de caract`eres.  _l_e_c_l propose un certain  nombre  d'op'erations
ensemblistes  pour  d'efinir  ces  classes.  Les op'erations disponibles pour la
construction d'expressions r'eguli`eres  sont  la  s'equence,  l'alternative,  la
r'ep'etition, l'optionnalit'e et le groupement.  Il est aussi possible de d'efinir
des _a_b_r'_e_v_i_a_t_i_o_n_s correspondant `a des "morceaux" d'expressions  r'eguli`eres,  et
de les utiliser pour d'efinir d'autres expressions.

     _l_e_c_l  utilise,  pour  construire  l'automate  d''etats  finis   implantant
l'analyseur  lexical,  des  techniques  d'eriv'ees de la m'ethode LR pour la con-
struction d'analyseurs syntaxiques; ceci lui permet d'obtenir  directement  un
automate d'eterministe.

     Les  (in'evitables)  conflits  d'etect'es  lors  de   la   construction   de
l'analyseur  qui  ne  seraient  pas  r'esolus  par la lecture d'un caract`ere en
avance peuvent l'^etre de plusieurs autres mani`eres:

-    par  l'auteur  de  la  description,  soit  en  r'eduisant  les   contextes
     d'etermin'es  `a  partir de la grammaire, soit en utilisant des pr'edicats et
     des actions semblables `a ceux du niveau syntaxique, soit en  for,cant  des
     niveaux de priorit'e;

-    automatiquement par _l_e_c_l, soit statiquement en utilisant  des  r`egles  de
     r'esolution   pr'ed'efinies   (par  exemple  "Shift"  prend  pr'ec'edence  sur
     "Reduce"), soit dynamiquement en  lisant  un  nombre  'eventuellement  _n_o_n
     _b_o_r_n'_e de caract`eres en avance.

     _l_e_c_l construit aussi une fonction de hachage parfaite et minimale permet-
tant de reconna^itre les mots-cl'es en une seule comparaison.

     Les automates produits par _l_e_c_l sont repr'esent'es  par  des  tables.   Sur
option,  l'analyseur  lexical  peut aussi ^etre produit sous la forme d'un pro-
gramme C sp'ecifique, ce qui permet d'augmenter la vitesse d'analyse.

_2._3.  _C_o_n_s_t_r_u_c_t_e_u_r _s_y_n_t_a_x_i_q_u_e: _c_s_y_n_t _e_t _p_r_i_o

     _c_s_y_n_t est le constructeur syntaxique.  Il lit les  tables  produites  par
_b_n_f  et  construit  un  analyseur syntaxique ascendant en utilisant la m'ethode
LALR(1).  Les conflits d'etect'es lors de la construction de l'analyseur qui  ne
seraient  pas  r'esolus  par  la lecture d'une unit'e lexicale en avance peuvent
l'^etre de plusieurs autres mani`eres:

-    par l'auteur de la description, soit en utilisant des  pr'edicats  et  des
     actions comme d'ecrit dans la section consacr'ee `a _b_n_f, soit en for,cant des









                                    - 3 -


     niveaux de priorit'e (voir ci-dessous);

-    automatiquement  par  _c_s_y_n_t,  en  utilisant  des  r`egles  de   r'esolution
     pr'ed'efinies (par exemple "Shift" prend pr'ec'edence sur "Reduce").

     La sp'ecification de r'esolution des conflits est trait'ee par  _p_r_i_o.   Elle
se  fait  en utilisant une syntaxe et une s'emantique tr`es proches de celles de
_y_a_c_c, mais la description est s'epar'ee de la grammaire proprement dite.

     Sur option, _c_s_y_n_t produit un  listage  d'etaill'e  d'ecrivant  les  conflits
d'etect'es, ce qui permet `a un utilisateur averti de les r'esoudre facilement.

     Le second composant de _c_s_y_n_t r'eduit tr`es fortement (typiquement mieux que
95%)  la taille des tables repr'esentant l'automate implantant l'analyseur syn-
taxique.  En outre, sur option,  il  est  capable  d''eliminer  _t_o_t_a_l_e_m_e_n_t  les
r'eductions  par des productions simples, ce qui augmente en g'en'eral la vitesse
de l'analyse.

_2._4.  _T_r_a_i_t_e_m_e_n_t _d_e_s _e_r_r_e_u_r_s: _r_e_c_o_r

     L'avantage le plus appr'eciable  de  SYNTAX  sur  _y_a_c_c  est  son  puissant
traitement   d'erreurs;   il   faut   d'ailleurs   reconna^itre  que  _y_a_c_c  est
particuli`erement rustique sur ce point.

     Tout traitement d'erreur se d'ecompose en trois ou quatre phases:

1.   d'etection,

2.   affichage,

3.   tentative de correction,

4.   rattrapage, si la correction a 'echou'e.

     En ce qui concerne la d'etection, les  m'ethodes  d'analyse  employ'ees  par
SYNTAX  poss`edent  la  propri'et'e  du  pr'efixe  correct, ce qui garantit qu'une
erreur est d'etect'ee d`es que la partie du texte d'ej`a lue ne peut pas faire par-
tie d'un texte correct.

     En ce qui concerne l'affichage, SYNTAX 'emet des  messages  d'erreur  tr`es
clairs,  avec  rappel au terminal de la ligne du texte source et marqueur sous
l'erreur.  De plus, si les analyseurs sont construits en cons'equence, un  lis-
tage  est produit, contenant le texte source et les messages d'erreur au "bon"
endroit.

     L'analyse se poursuit apr`es une correction ou un rattrapage.

_2._4._1.  _C_o_r_r_e_c_t_i_o_n _l_o_c_a_l_e

     Quand une erreur est d'etect'ee, l'analyseur produit  virtuellement  toutes
les  parties  de texte syntaxiquement correctes `a partir du point en erreur et
les compare `a une liste ordonn'ee  de  _m_o_d`_e_l_e_s  _d_e  _c_o_r_r_e_c_t_i_o_n.   Ces  mod`eles,
fournis  `a  la construction par l'auteur de la grammaire, peuvent sp'ecifier un
nombre _q_u_e_l_c_o_n_q_u_e de suppressions, d'insertions et/ou de remplacements dans le









                                    - 4 -


texte  source.   Si l'une des parties de texte engendr'ees correspond `a l'un de
ces mod`eles, la correction est accept'ee:  le  nouveau  texte  vient  remplacer
l'ancien, et l'analyse reprend.

     De nombreux dispositifs annexes -- correction de fautes d'orthographe sur
les  mots-cl'es,  longueur  de  validation,  terminaux-cl'es,  ensembles  "Don't
Delete" et "Don't  Insert",  possibilit'e  d'agir  sur  le  terminal  pr'ec'edant
l'erreur,  ...  -- permettent `a l'auteur de la sp'ecification de contr^oler tr`es
finement le m'ecanisme de correction.

     Notons que l'analyseur lexical b'en'eficie du m^eme m'ecanisme de  correction
que  l'analyseur  syntaxique.   Notons  aussi  que ce m'ecanisme est totalement
ind'ependant de la grammaire et ne n'ecessite pas de modifier cette derni`ere.

_2._4._2.  _R_a_t_t_r_a_p_a_g_e _g_l_o_b_a_l

     Si la correction locale 'echoue -- ce qui se produit dans moins de 20% des
cas en pratique --, l'analyseur doit tout de m^eme pouvoir analyser le reste du
texte.  Ceci est possible gr^ace au rattrapage global.

     Pour ce qui est du rattrapage syntaxique, le texte est  lu  sans  analyse
jusqu'`a rencontrer un _t_e_r_m_i_n_a_l-_c_l'_e tel qu'il existe dans la pile un 'etat ayant
une transition non-terminale valide  pouvant  ^etre  suivie  du  dit  terminal.
L'analyseur  est  ensuite  red'emarr'e  avec ce terminal en entr'ee, apr`es que la
pile ait 'et'e 'ecr^et'ee jusqu'`a cet  'etat.   L'effet  net  de  ce  m'ecanisme  est
d'ignorer  une partie de texte entourant le point d'erreur, ce qui est un pis-
aller mais permet d'analyser la suite du texte.

     Le rattrapage lexical consiste  `a  d'etruire  purement  et  simplement  le
caract`ere en erreur.

     L'action combin'ee des deux phases du traitement d'erreur de SYNTAX est en
pratique  tr`es  satisfaisante,  et  en  tous cas incomparablement sup'erieure `a
celle de _y_a_c_c.

_2._4._3.  _S_p'_e_c_i_f_i_c_a_t_i_o_n _d_u _t_r_a_i_t_e_m_e_n_t _d'_e_r_r_e_u_r

     Tous les aspects du traitement d'erreur -- affichage, correction  locale,
rattrapage global, et ce aussi bien pour l'analyse lexicale que l'analyse syn-
taxique -- sont  d'ecrits  s'epar'ement  de  la  grammaire.   L'auteur  de  cette
description  sp'ecifie en particulier les mod`eles de correction, les terminaux-
cl'es et les messages d'erreur: aucune  partie  de  message  n''etant  fabriqu'ee
directement  par  SYNTAX,  ceci  permet de les adapter par exemple `a la langue
naturelle des utilisateurs ou `a leur niveau de comp'etence.

     Cette description est trait'ee par le processeur _r_e_c_o_r.

_2._5.  _P_r_o_d_u_c_t_i_o_n _d_e_s _t_a_b_l_e_s: _t_a_b_l_e_s__c

     Ce dernier processeur lit les tables produites par les  autres  construc-
teurs  et  construit un "programme" C -- compos'e essentiellement de structures
de donn'ees initialis'ees -- contenant toutes les  informations  n'ecessaires  au
syst`eme  d'ex'ecution  de SYNTAX, d'ecrit ci-dessous, pour traiter le langage en
question.  Ce programme doit ^etre compil'e et li'e au syst`eme  d'ex'ecution  pour









                                    - 5 -


former un analyseur complet.

_3.  _L_e _S_y_s_t`_e_m_e _d'_E_x'_e_c_u_t_i_o_n

     SYNTAX ne produit pas directement un programme ex'ecutable, mais un ensem-
ble  de  donn'ees  C  `a  compiler  et  lier  avec diff'erents modules du syst`eme
d'ex'ecution.  Ces modules comprennent bien entendu un analyseur lexical et  un
analyseur  syntaxique  qui  vont interpr'eter les tables du langage `a analyser,
mais aussi de nombreux modules utilitaires permettant de  r'ealiser  `a  peu  de
frais un "squelette" de compilateur:

-    gestionnaire du texte source, permettant en particulier  de  traiter  les
     "includes";

-    gestionnaire des messages d'erreur, permettant de les afficher  au  cours
     de l'analyse et de les stocker pour les inclure dans le listage;

-    gestionnaire de cha^ines de caract`eres, permettant de stocker  des  textes
     de  longueur  quelconque,  de  leur  affecter  un  "num'ero unique" et d'y
     acc'eder facilement;

-    encha^ineur de passes;

-    modules de traitement d'erreur;

-    module de production du listage;

-    gestionnaire de cha^ines de bits destin'ees `a repr'esenter des ensembles...

     Tous  ces  modules  sont  disponibles  sous  forme   binaire   dans   une
biblioth`eque  manipulable  par l''editeur de liens, et aussi sous forme source,
ce qui permet de les modifier pour les adapter `a des besoins particuliers.

_4.  _L_e_s _D_i_f_f'_e_r_e_n_t_e_s _F_o_r_m_e_s _d_e _T_r_a_i_t_e_m_e_n_t _S'_e_m_a_n_t_i_q_u_e

     L'utilit'e d'un pur analyseur lexico-syntaxique est  faible.   Certes,  il
peut  ^etre utile de savoir si un programme est syntaxiquement correct avant de
le soumettre `a un compilateur, a priori plus lent, mais, dans la  plupart  des
cas, il faut compl'eter l'analyse par un traitement s'emantique.  SYNTAX propose
plusieurs m'ethodes pour 'ecrire un tel  traitement,  d'ecrites  ci-apr`es.   Pour
chacune  d'elles,  un unique fichier source contient `a la fois la grammaire du
niveau  syntaxique  et  la  sp'ecification  du  traitement  s'emantique.   Cette
sp'ecification se fait en ins'erant du texte apr`es chaque production de la gram-
maire.  Un  unique  processeur  traite  `a  la  fois  la  grammaire,  avec  des
fonctionnalit'es h'erit'ees de _b_n_f, et la sp'ecification de la s'emantique.

_4._1.  _A_c_t_i_o_n_s

     La m'ethode de  plus  bas  niveau,  mais  aussi  la  plus  puissante,  est
d'associer  un  num'ero d'action `a chaque production, et d''ecrire une proc'edure
comportant un fragment de programme pour  chacun  de  ces  num'eros.   Lors  de
chaque  r'eduction,  l'analyseur  appellera  cette  proc'edure en lui passant le
num'ero de l'action associ'ee `a la production par  laquelle  on  r'eduit.   Cette
action  pourra  alors  acc'eder  `a la pile d'analyse et effectuer un traitement









                                    - 6 -


appropri'e.

     Cette forme de s'emantique est la plus difficile `a manipuler,  mais  c'est
aussi  la plus puissante puisque tout y est permis.  On pourrait la consid'erer
comme "l'assembleur" du traitement s'emantique.  Cette comparaison est d'autant
plus  justifi'ee  que, vu de l'analyseur syntaxique, tout traitement s'emantique
est constitu'e d'actions appel'ees `a chaque r'eduction...

     Cette forme de s'emantique est trait'ee par le processeur _s_e_m_a_c_t.

_4._2.  _A_c_t_i_o_n_s `_a _l_a _Y_a_c_c

     Cette forme de traitement s'emantique est un peu plus  structur'ee  que  la
pr'ec'edente  en  ce  sens que les fragments de code implantant les actions sont
'ecrits directement apr`es  les  productions,  sous  forme  de  blocs  C  (entre
accolades).   Le  processeur  _y_a_x  produit lui-m^eme les num'eros d'action et la
proc'edure correspondante.

     En outre, les acc`es `a la pile sont "d'eguis'es" par l'emploi d'une notation
h'erit'ee  de  _y_a_c_c,  dont _y_a_x est fortement inspir'e.  La gestion de la pile est
aussi effectu'ee automatiquement.  Il faut noter tout de  m^eme  une  diff'erence
importante:  _y_a_x n'accepte pas, contrairement `a _y_a_c_c, que de tels fragments de
code soient ins'er'es _a_u _m_i_l_i_e_u des parties droites des productions.

     SYNTAX propose un traducteur, nomm'e _y_s_x, transformant  (purement  syntax-
iquement)  une  sp'ecification  pour  _y_a_c_c  en une sp'ecification pour _y_a_x.  Les
actions au milieu des productions sont correctement traduites en les attachant
`a  des  non-terminaux  d'erivant  la cha^ine vide, produits automatiquement.  Il
faut noter que l'introduction de ces nouveaux non-terminaux peut  remettre  en
cause l'appartenance de la grammaire `a la classe LALR(1).

     Une version de _y_a_x avec des actions en Pascal est actuellement `a l''etude.

_4._3.  _A_t_t_r_i_b_u_t_s _s'_e_m_a_n_t_i_q_u_e_s _p_u_r_e_m_e_n_t _s_y_n_t_h'_e_t_i_s'_e_s

     La formalisation des notions d'"acc`es `a la pile" et  de  "gestion  de  la
pile"  employ'ees  ci-dessus est la notion de _g_r_a_m_m_a_i_r_e _a_t_t_r_i_b_u'_e_e.  La descrip-
tion de cette technique demande trop de place pour figurer  ici,  mais  disons
seulement  qu'elle  permet  d'exprimer  de fa,con purement _d'_e_c_l_a_r_a_t_i_v_e tous les
calculs dirig'es par la syntaxe.

     SYNTAX propose  une  forme  restreinte  de  grammaires  attribu'ees,  dans
laquelle les valeurs des attributs sont calcul'ees de bas en haut de l'arbre de
d'erivation (purement synth'etis'es).  Le calcul de ces valeurs peut ^etre  d'ecrit
soit en C (processeur _t_a_b_c), soit en Pascal (processeur _t_a_b_a_c_t).  Dans ce der-
nier cas, plusieurs modules d'interface, inclus dans le  syst`eme  d'ex'ecution,
permettent d'acc'eder en Pascal aux fonctionnalit'es de la version C.

_4._4.  _A_r_b_r_e_s _a_b_s_t_r_a_i_t_s

     Si le traitement s'emantique d'esir'e ne peut pas s'effectuer en  une  passe
au  cours de l'analyse syntaxique, il faut construire un arbre repr'esentant le
texte source et susceptible d'^etre parcouru plusieurs  fois.   SYNTAX  propose
une  telle  forme  de traitement s'emantique, dans laquelle les arbres produits









                                    - 7 -


sont  des  arbres  abstraits,  ce  qui  signifie  qu'ils  ne  contiennent  pas
d'information  purement  syntaxique  comme les terminaux non g'en'eriques et les
productions simples.  De plus, les notions du  langage  exprimant  des  listes
sont  effectivement  repr'esent'ees  par  des  noeuds listes, et non pas par des
peignes.

     La sp'ecification de ce traitement se fait en attachant des noms de  noeud
`a  certaines productions.  La description est trait'ee par le processeur _s_e_m_a_t.
Ce dernier produit, outre  des  tables  permettant  `a  un  module  du  syst`eme
d'ex'ecution  de  construire  l'arbre  au  cours  de  l'analyse syntaxique, des
"squelettes" de programmes C, dans lesquels les actions `a effectuer sur chaque
noeud  visit'e  peuvent  ^etre ins'er'ees.  Un autre module du syst`eme d'ex'ecution
permet de parcourir ces arbres du haut en bas et de  gauche  `a  droite[1],  en
appelant  les actions associ'ees `a chaque noeud.  Des informations peuvent ^etre
attach'ees `a chaque noeud.  Un autre module du syst`eme d'ex'ecution produit  une
repr'esentation   graphique   de   ces   arbres.    Le  processeur  _m_i_x  permet
d'automatiser la mise `a jour des "passes s'emantiques" apr`es modification de la
grammaire et/ou de la sp'ecification des arbres abstraits.

_4._5.  _P_a_r_a_g_r_a_p_h_a_g_e

     L'exp'erience prouve rapidement qu'il est beaucoup plus agr'eable et  effi-
cace  de  travailler sur des programmes dont la mise en page refl`ete la struc-
ture.  Des processeurs permettant  de  produire  automatiquement  une  version
_p_a_r_a_g_r_a_p_h'_e_e  de  textes 'ecrits sans prendre en compte leur structure sont donc
bienvenus.

     SYNTAX propose un moyen de construire automatiquement  de  tels  paragra-
pheurs,  en  utilisant  une technique bas'ee sur la remarque suivante: quand on
'ecrit la grammaire d'un langage, on pr'esente souvent les productions de  cette
grammaire  de  la  m^eme fa,con qu'on voudrait voir paragrapher les textes de ce
langage (voir figure 1).

     Le processeur _p_a_r_a_d_i_s permet donc d'obtenir `a peu de  frais  un  paragra-
pheur  pour  un  langage une fois qu'on en a 'ecrit la grammaire, en pr'esentant
cette derni`ere de fa,con `a ce qu'elle soit agr'eable `a l'oeil.

     En fait, cette approche est un peu simpliste.  _p_a_r_a_d_i_s propose  donc,  en
plus  de  ce  principe  g'en'eral, des directives de paragraphage qui permettent
d'obtenir des mises en page plus sophistiqu'ees.  En outre, les probl`emes clas-
siques  de  longueur  born'ee de la ligne de sortie et de placement des commen-
taires sont trait'es  de  mani`ere  g'en'eralement  satisfaisante  ('etant  entendu
qu'ils n'ont pas de solution compl`ete).

_4._6.  _U_t_i_l_i_t_a_i_r_e_s _d_i_v_e_r_s

     Outre les constructeurs de base et les  outils  traitant  la  s'emantique,
SYNTAX comprend un certain nombre d'utilitaires:

-    _c_x, un g'en'erateur de r'ef'erences crois'ees pour le langage C;
_________________________
  [1] On peut aussi "programmer" des parcours diff'erents.










                                    - 8 -



______________________________________________________________________________

     Voici un extrait d'une grammaire de Pascal "bien pr'esent'ee":

        <PROC DECL>     = <PROC HEAD>
                          <BLOCK> ;
        <PROC HEAD>     = procedure  %ID  <FORMALS *>  ";" ;
        <BLOCK>         = <DECL *>
                          <COMPOUND STMT>  ";" ;
        <COMPOUND STMT> = begin
                              <STMT +>
                          end ;


     Un paragrapheur produit  automatiquement  par  _p_a_r_a_d_i_s  `a  partir  de  la
sp'ecification pr'ec'edente transformera le texte suivant:

        ProCedure TRuc
        ; begin instruction1;
        Instruction2           end
        ;


en la forme paragraph'ee suivante:

        procedure TRUC ;
        begin
            INSTRUCTION1 ;
            INSTRUCTION2
        end ;



            _F_i_g_u_r_e _1.  _U_n _e_x_e_m_p_l_e _d_e _s_p'_e_c_i_f_i_c_a_t_i_o_n _d_e _p_a_r_a_g_r_a_p_h_a_g_e

______________________________________________________________________________

-    _p_p_c et _p_p_a_d_a, des paragrapheurs pour les langages C et Ada[2] respective-
     ment.

     Ces outils ont bien s^ur 'et'e construits `a l'aide de SYNTAX.

_5.  _M_i_s_e _e_n _O_e_u_v_r_e _d_e _S_Y_N_T_A_X _s_u_r _U_N_I_X

     SYNTAX est disponible  sur  de  nombreuses  machines  munies  du  syst`eme
d'exploitation UNIX (ou l'un de ses d'eriv'es).  Soit $_s_x le r'epertoire o`u a 'et'e
install'e SYNTAX.  Le contenu des diff'erents sous-r'epertoires  de  $_s_x  est  le
suivant:
_________________________
  [2] Ada  est  une  marque  d'epos'ee  du  Gouvernement   des   Etats-Unis
d'Am'erique (AJPO).










                                    - 9 -


$sx/bin   contient les ex'ecutables de tous les processeurs de  SYNTAX.   Habi-
          tuellement,  ces  binaires  sont  aussi  li'es (au sens UNIX) dans un
          r'epertoire standard, comme /usr/local/bin, ce qui 'evite aux utilisa-
          teurs d'avoir `a changer leur PATH.

$sx/doc   contient la documentation.  Outre le fichier que vous ^etes en  train
          de  lire,  et  _s_y_n_t_a_x._g_i._i_n_f_o  qui  est  une version imprimable (par
          _l_p_r(1) ou une commande similaire) du manuel de r'ef'erence[3], il con-
          tient  les  sous-r'epertoires _m_a_n (les "pages de manuel", habituelle-
          ment li'ees ou copi'ees dans /usr/man ou autre pour acc`es imm'ediat) et
          _h_e_l_p  (courtes descriptions des commandes de SYNTAX, utilisables par
          la fonction "help" de _t_c_s_h(1)), ainsi que divers fichiers facilitant
          la  mise en oeuvre de SYNTAX, dont l'usage est d'ecrit dans le manuel
          de r'ef'erence.

$sx/incl  contient des fichiers "include" permettant l'acc`es  aux  modules  du
          syst`eme d'ex'ecution.  Le plus important est _s_x_u_n_i_x._h qui est utilis-
          able en C.  Il existe aussi des versions  Pascal,  disponibles  dans
          des sous-r'epertoires.

$sx/lib   contient les binaires des modules du syst`eme  d'ex'ecution,  r'epartis
          entre  une  biblioth`eque  _l_i_b_s_x._a et quelques fichiers ._o.  Ces der-
          niers sont essentiellement des versions de mise au point de  modules
          existant   dans  la  biblioth`eque  en  version  de  production.   La
          biblioth`eque est g'en'eralement li'ee dans un r'epertoire standard  pour
          ^etre utilis'ee automatiquement par l''editeur de liens.

$sx/src   contient les sources de tous les  modules  du  syst`eme  d'ex'ecution.
          Leur disponibilit'e permet de les adapter `a tous les besoins.

_6.  _C_o_n_c_l_u_s_i_o_n

     SYNTAX  est  donc  un  syst`eme  de  construction   d'analyseurs   lexico-
syntaxiques `a la fois puissant, efficace et souple d'emploi.  Il surpasse _y_a_c_c
sur tous les plans, sauf peut-^etre en ce qui concerne  la  facilit'e  d'emploi,
mais c'est le corollaire de sa puissance.












_________________________
  [3] Il existe aussi une version de ce manuel de r'ef'erence produite  par
un  syst`eme  de  traitement  de  texte 'evolu'e, donc plus agr'eable `a lire.
Cette version est disponible sur demande.







