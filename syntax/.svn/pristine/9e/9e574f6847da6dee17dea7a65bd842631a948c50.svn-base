
% See http://www.ccl.kuleuven.ac.be/LKR/dtr/mix1.dtr

% MIX is a language that consists of strings in {a, b, c}* such that each
% string contains the same number of occurrences of each letter.  The language
% was originally described by Emmon Bach.  MIX is interesting because it has
% a very simple and intuitive characterization and yet may well be outside
% the class of indexed languages (as conjectured by Bill Marsh in an
% unpublished 1985 ASL paper).


% The RCG that follows assume that the real input text of length 3*l has been appended with
% the string a^l b^l c^l

S(X Y Z A B C)		--> &StrEqLen(X,Y) &StrEqLen(X,Z) &StrEqLen(X,A) &StrEqLen(X,B) &StrEqLen(X,C)
			    MIX(X Y Z,A,B,C) . 

MIX(,,,)		--> .
MIX(a X,a A,B,C)	--> MIX(X,A,B,C) .
MIX(b X,A,b B,C)	--> MIX(X,A,B,C) .
MIX(c X,A,B,c C)	--> MIX(X,A,B,C) .
MIX(X,A,B,C)		--> MIX(X,A,B,C) .


% Ici chaque arg traite une lettre
% Temps d'analyse lineaire

S(X)			--> MIX(X,X,X) .

MIX(T X,Y,Z)		--> &StrLen(1,T) !a(T) MIX(X, Y, Z) .
MIX(X,T Y,Z)		--> a(X) &StrLen(1,T) !b(T) MIX(X, Y, Z) .
MIX(X,Y,T Z)		--> a(X) b(Y) &StrLen(1,T) !c(T) MIX(X, Y, Z) .
MIX(a X,b Y,c Z)	--> MIX(X, Y, Z) .
MIX(,,)			--> .

a(a X)			--> .
a()			--> .
b(b X)			--> .
b()			--> .
c(c X)			--> .
c()			--> .

% Ici les 3 premiers args representent le nombre de a, b et c attendus ds le 4eme arg
% Temps d'analyse lineaire

S(X Y Z)		--> &StrEqLen(X,Y) &StrEqLen(X,Z) MIX(X,Y,Z,X Y Z) .

MIX (X T,Y,Z,a W)	--> &StrLen(1,T) MIX(X,Y,Z,W) .
MIX (X,Y T,Z,b W)	--> &StrLen(1,T) MIX(X,Y,Z,W) .
MIX (X,Y,Z T,c W)	--> &StrLen(1,T) MIX(X,Y,Z,W) .
MIX(,,,)		--> .

% Ici, generalisation de MIX
% Si MIX_k = \set{\pi(a_1^p ... a_k^p) \mid  p>0, i \neq j => a_i \neq a_j}
% On definit MIX = \cup_{k>0} MIX_k
% Temps d'analyse quadratique


% On decompte ds le 3eme arg les lettres du source identiques a` la lettre de gauche
S(T X)			--> &StrLen(1,T) A(T,X,X) .

% C'est la 1ere lettre
A(T,T1 W,P T2)		--> &StrLen(1,T) &StrLen(1,T1) &StrLen(1,T2) &StrEq(T,T1) A(T,W,P) .
% Ce n'est pas la 1ere lettre
A(T,T1 W,P)		--> &StrLen(1,T) &StrLen(1,T1) !&StrEq(T,T1) A(T,W,P) .
% Le source a ete parcouru en entier une premiere fois en temps lineaire
A(T,,P)			--> B(P,..,..) .

% Pour chaque 1ere occurrence d'une lettre ds le source, on verifie que son nombre d'occurrence
% est identique au nombre d'occurrence de la 1ere lettre
B(P,T X, Y T X)		--> &StrLen(1,T) !TinT*(T,Y) C(T,X,P) B(P,X,Y T X) .
B(P,,W)			--> .

% On a trouve un T
C(T,T1 X,P T2)		--> &StrLen(1,T) &StrLen(1,T1) &StrLen(1,T2) &StrEq(T,T1) C(P,T,X) .
% Ce n'est pas un T
C(T,T1 X,P)		--> &StrLen(1,T) &StrLen(1,T1) !&StrEq(T,T1) C(P,T,X) .
% OK pour T
C(T,,)			--> .

% Ce n'est pas T1
TinT*(T,T1 Y) 		--> &StrLen(1,T)  &StrLen(1,T1) !&StrEq(T,T1) TinT*(T,Y) .
% on l'a trouve'
TinT*(T,T1 Y) 		--> &StrLen(1,T)  &StrEq(T,T1) .



