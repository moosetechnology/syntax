/******************************************************************************
 *                                S Y N T A X
 *-----------------------------------------------------------------------------
 *   Copyright (C) 1972-2018 INRIA (Institut National de Recherche en
 *   Informatique et Automatique)
 *-----------------------------------------------------------------------------
 *   URL: http://syntax.gforge.inria.fr
 *-----------------------------------------------------------------------------
 *   The source code of SYNTAX is distributed with two different licenses,
 *   depending on the files:
 *   - The recursive content of src/ and incl/ and the non-recursive content
 *     of SYNTAX's root directory are distributed under the CeCILL-C license
 *   - The recursive content of all other repertories is distributed under
 *     the CeCILL license
 *   All code produced by SYNTAX must be considered as being under the
 *   CeCILL-C license. Information about the CeCILL and CeCILL-C licenses
 *   can be found at, e.g., http://www.cecill.fr
 *****************************************************************************/


/* Beginning of sxtables for lfg_lex [Thu Nov 29 14:04:16 2012] */
#define SXP_MAX 258
#include "sxunix.h"
#include "sxba.h"
static struct SXP_reductions reductions[]={{0,0,0,0},
{2, 2, 1, -88},
{1, 20, 1, 189},
{2, 79, 1, 207},
{6, 80, 1, 207},
{2, 86, 1, -97},
{6, 37, 0, -143},
{1, 85, 3, 209},
{6, 65, 0, 201},
{6, 61, 0, 192},
{2, 36, 2, -143},
{1, 38, 2, 196},
{2, 60, 2, 192},
{2, 64, 2, 201},
{6, 56, 0, -150},
{2, 55, 2, -150},
{6, 3, 0, -88},
{0, 0, 2, -132},
{5, 72, 0, 187},
{5, 73, 0, 187},
{1, 74, 0, 187},
{5, 82, 0, 208},
{5, 81, 0, 208},
{6, 87, 0, -97},
{1, 1, 2, -132},
{6, 84, 1, -89},
{1, 4, 2, -1},
{6, 19, 1, -90},
{5, 27, 0, -2},
{1, 26, 0, -2},
{1, 5, 2, -1},
{6, 13, 1, 182},
{1, 6, 2, -1},
{1, 7, 2, -1},
{1, 8, 2, -1},
{6, 76, 1, -93},
{1, 9, 2, -1},
{6, 78, 1, -95},
{1, 11, 2, -1},
{1, 17, 1, 188},
{0, 16, 1, 188},
{6, 15, 1, -96},
{5, 89, 0, -5},
{1, 88, 0, -5},
{2, 83, 2, -89},
{2, 18, 2, -90},
{5, 28, 1, -2},
{2, 12, 2, 182},
{2, 75, 2, -93},
{2, 77, 2, -95},
{5, 40, 0, 196},
{5, 41, 0, -122},
{1, 10, 3, -1},
{2, 14, 2, -96},
{1, 91, 0, -7},
{5, 70, 0, 204},
{1, 67, 0, 204},
{1, 68, 0, 204},
{1, 30, 0, -145},
{5, 23, 3, -91},
{5, 35, 2, 185},
{1, 33, 2, 194},
{1, 43, 0, 198},
{1, 44, 0, 198},
{1, 45, 0, 198},
{1, 33, 1, 194},
{1, 21, 4, -91},
{0, 29, 1, -145},
{0, 63, 1, 203},
{5, 42, 2, -122},
{1, 32, 3, 194},
{0, 31, 3, 194},
{5, 25, 5, -91},
{1, 62, 2, 203},
{5, 24, 5, -91},
{0, 47, 1, -11},
{1, 59, 0, -152},
{5, 54, 2, -11},
{1, 53, 2, -11},
{5, 50, 2, -11},
{1, 49, 2, -11},
{1, 22, 7, -91},
{1, 39, 5, 196},
{1, 52, 3, -11},
{0, 51, 3, -11},
{1, 48, 3, -11},
{0, 57, 3, -152},
{1, 58, 4, -152},
};
static struct SXP_bases t_bases[]={{0,0,0},
{0, 190, 0},
{-24, 104, 31},
{-26, 156, 12},
{-29, 192, 0},
{-30, 222, 0},
{-34, 220, 0},
{0, 220, 201},
{-36, 220, 0},
{-38, 222, 0},
{0, 222, 195},
{-54, 127, 16},
{0, 231, 193},
{-76, 130, 18},
{0, 156, 12},
{0, 222, 0},
{0, 220, 0},
{-23, 0, 0},
{0, 106, 16},
{0, 228, 203},
{-58, 231, 187},
{0, 221, 0},
{0, 231, 202},
{0, 228, 0},
{0, 231, 0},
{0, 191, 0},
{0, 231, 199},
{-86, 231, 202},
{-16, 0, 0},
{-32, 222, 0},
{-33, 222, 0},
{0, 220, 0},
{0, 220, 205},
{0, 220, 207},
{0, 220, 209},
{0, 221, 0},
{0, 222, 0},
{0, 222, 0},
{0, 220, 0},
{0, 222, 0},
{0, 228, 206},
{0, 231, 202},
{0, 222, 0},
{0, 231, 202},
{0, 106, 16},
{0, -17, 33},
{0, 25, 9},
{0, 27, 9},
{0, 31, 9},
{-40, 39, 11},
{0, 41, 9},
{0, 44, 9},
{0, 45, 9},
{0, 47, 9},
{0, 52, 9},
{0, 53, 9},
{0, 237, 0},
{-67, 215, 188},
{0, 168, 15},
{-68, 111, 28},
{0, 129, 23},
{0, 73, 25},
{-75, 111, 28},
{0, 224, 0},
{0, 194, 0},
{0, 82, 23},
{0, 215, 189},
{-87, 128, 21},
{0, 105, 8},
{0, 157, 8},
{0, 212, 0},
{0, 46, 20},
{0, 59, 17},
{0, 164, 16},
{-61, 60, 20},
{0, 165, 12},
{0, 167, 17},
{0, 169, 17},
{0, 69, 25},
{-71, 70, 20},
{0, 72, 14},
{0, 170, 15},
{0, 74, 19},
{0, 173, 15},
{-78, 77, 20},
{-80, 79, 20},
{0, 81, 14},
{-84, 83, 20},
{0, 85, 20},
{0, 115, 33},
};
static struct SXP_bases nt_bases[]={{0,0,0},
{-133, 185, 0},
{-138, 0, 0},
{-139, -91, 14},
{-2, 0, 0},
{-140, 0, 0},
{-120, -118, 32},
{-3, 0, 0},
{-121, -118, 32},
{-142, -136, 11},
{-5, -98, 11},
{-7, 0, 0},
{-11, 245, 0},
{-152, 0, 0},
{-91, 258, 0},
{-135, -92, 6},
{-118, 248, 0},
{-97, 0, 0},
{-141, 0, 0},
{-122, 247, 0},
{-8, 214, 182},
{-147, 0, 0},
{-8, 234, 210},
{-10, -122, 21},
{-13, 0, 0},
{-14, -150, 26},
{-8, -151, 25},
{-8, 214, 233},
{-88, -132, 1},
{-140, 0, 0},
{-140, 0, 0},
{-4, 0, 0},
{-3, 0, 0},
{-3, 0, 0},
{-3, 0, 0},
{-99, 0, 0},
{-116, -135, 11},
{-117, -135, 11},
{-119, 249, 0},
{-137, 254, 0},
{-122, 247, 0},
{-8, 234, 177},
{-100, 0, 0},
{-8, 214, 230},
{-15, 0, 0},
};
static struct SXP_item vector[]={
{3, -89},
{4, -1},
{0, 0},
{1, 101},
{2, 102},
{3, 123},
{4, 124},
{5, 103},
{6, 125},
{7, 155},
{16, -144},
{17, -145},
{10, 126},
{0, 0},
{14, 66},
{16, 163},
{27, -12},
{14, 171},
{13, 112},
{16, 106},
{19, 114},
{16, 106},
{9, 35},
{24, 109},
{20, 28},
{21, 158},
{9, 37},
{20, 42},
{9, 48},
{24, 113},
{9, 49},
{25, 175},
{17, 161},
{31, 104},
{28, 111},
{17, 65},
{25, 172},
{13, 107},
{24, 109},
{32, 43},
{16, 159},
{8, 62},
{18, 160},
{11, 21},
{12, 22},
{11, 18},
{12, 19},
{7, 50},
{21, 128},
{27, -148},
{14, 174},
{25, -146},
{12, 51},
{27, -9},
{11, 18},
{12, 19},
{22, 20},
{21, 131},
{16, -153},
{26, 63},
{27, 64},
{16, -154},
{22, 108},
{20, 55},
{24, 162},
{22, 20},
{17, 166},
{7, -93},
{11, -8},
{8, -95},
{21, 110},
{25, -146},
{29, 56},
{30, 57},
{0, 0},
{5, -90},
{10, -96},
{11, -136},
{19, -143},
{20, -6},
{0, 0},
{0, 0},
{25, -149},
{13, -134},
{0, 0},
{28, -8},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{31, -94},
{0, 0},
{32, -118},
};

static  SXBA_ELT SXPBA_kt9
#if SXBITS_PER_LONG==32
 [5] = {90, 0X7005C3EE, 0X00FDC0F7, 0X02000010, 0X00000000, }
#else
 [3] = {90, 0X00FDC0F77005C3EE, 0X0000000002000010, }
#endif
/* End SXPBA_kt9 */;
static SXBA SXPBM_trans[]={NULL,
&SXPBA_kt9[0],
};
static SXINT P_lrgl[]={
5,0,-1,1,2,3,0,0,
5,0,-1,2,3,4,0,0,
4,0,2,3,4,0,0,0,
7,0,-1,-1,1,2,3,4,
5,-1,0,1,2,3,0,0,
5,-1,1,2,3,4,0,0,
4,1,2,3,4,0,0,0,
4,-1,2,3,4,0,0,0,
5,-1,-1,1,2,3,0,0,
};
static SXINT *P_lregle[]={NULL,
&P_lrgl[0],
&P_lrgl[8],
&P_lrgl[16],
&P_lrgl[24],
&P_lrgl[32],
&P_lrgl[40],
&P_lrgl[48],
&P_lrgl[56],
&P_lrgl[64],
};
static SXINT P_right_ctxt_head[]={0,
1,2,2,1,1,1,1,2,1,};
static SXINT P_param_ref[]={
-2,1,
1,-2,
1,
-2,-3,1,
-1,0,1,
0,1,-1,
0,1,
0,1,-1,
0,1,-1,-2,
-1,1,
};
static struct SXP_local_mess SXP_local_mess[]={{0,NULL,NULL},
{2,"%s\"%s\" is inserted before \"%s\".",&P_param_ref[0]},
{2,"%s\"%s\" is replaced by \"%s\".",&P_param_ref[2]},
{1,"%s\"%s\" is deleted.",&P_param_ref[4]},
{3,"%s\"%s %s\" is inserted before \"%s\".",&P_param_ref[5]},
{3,"%s\"%s\" is inserted before \"%s %s\".",&P_param_ref[8]},
{3,"%s\"%s\" before \"%s\" is replaced by \"%s\".",&P_param_ref[11]},
{2,"%s\"%s\" before \"%s\" is deleted.",&P_param_ref[14]},
{3,"%s\"%s %s\" is replaced by \"%s\".",&P_param_ref[16]},
{4,"%s\"%s\" before \"%s\" is replaced by \"%s %s\".",&P_param_ref[19]},
{2,"%s\"%s\" is forced before \"%s\".",&P_param_ref[23]},
};
static SXINT P_no_delete[]={
0};
static SXINT P_no_insert[]={
0};
static char *P_global_mess[]={
"%s\"%s\" is expected",
"%s\"%s\", \"%s\" is expected",
"%s\"%s\", \"%s\", \"%s\" is expected",
"%s\"%s\", \"%s\", \"%s\", \"%s\" is expected",
"%s\"%s\", \"%s\", \"%s\", \"%s\", \"%s\" is expected",
"%sGlobal recovery.",
"%sParsing resumes on \"%s\"",
"End Of File",
"%sParsing stops on End Of File.",
};
static SXINT PER_tset[]={
1,9};

static char *err_titles[SXSEVERITIES]={
"\000",
"\001Warning:\t",
"\002Error:\t",
};
static char abstract []= "%ld warnings and %ld errors are reported.";
extern SXBOOLEAN sxprecovery (SXINT what_to_do, SXINT *at_state, SXINT latok_no);

static unsigned char S_char_to_simple_class[]={
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,27,3,27,3,27,27,3,3,27,3,27,27,3,27,27,27,27,
3,27,3,27,27,3,3,27,27,27,27,3,27,27,27,27,27,27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,27,27,27,27,3,27,27,27,27,27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,3,27,27,27,27,27,
27,27,27,3,3,3,3,3,3,3,3,3,4,5,6,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,4,7,8,9,3,3,3,10,11,12,13,14,15,16,17,
18,19,19,19,19,19,19,19,19,19,19,20,21,22,23,24,25,26,27,27,28,29,30,27,27,
27,31,27,27,32,27,33,27,27,27,27,27,27,34,27,27,27,27,27,35,36,37,3,27,3,
27,27,38,29,30,27,27,27,31,27,27,32,27,33,27,27,27,27,27,27,34,27,27,27,27,
27,39,40,41,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,27,3,27,3,27,27,3,3,27,3,27,
27,3,27,27,27,27,3,27,3,27,27,3,3,27,27,27,27,3,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,3,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,
3,27,27,27,27,27,27,27,27,};
static SXSTMI SXS_transition[]={0,
0x0,0x4021,0x0,0x2402,0x2402,0x2402,0x4420,0x9002,0x9004,0x9006,0x4418,0x4419,
0x0,0x441d,0x4415,0x9008,0x440f,0x2405,0x2c06,0x2c07,0x4409,0x4412,0x2408,0x4413,
0x0,0x2409,0x900a,0x900a,0x900a,0x900a,0x900a,0x900a,0x900a,0x900a,0x4410,0x0,
0x4411,0x900a,0x440d,0x4c1c,0x440e,
0x0,0x4000,0x0,0x1402,0x1402,0x1402,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,
0x0,0x4000,0x4000,0x4000,0x4000,0x240e,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,
0x0,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x0,
0x4000,0x4000,0x4000,0x4000,0x4000,
0x0,0x0,0x1c03,0x1c03,0x0,0x1c03,0x1c03,0x1c03,0x1c03,0x440b,0x1c03,0x1c03,
0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,
0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,0x240f,
0x1c03,0x1c03,0x1c03,0x1c03,0x1c03,
0x0,0x401e,0x0,0x401e,0x401e,0x401e,0x2c07,0x401e,0x401e,0x2c07,0x0,0x401e,
0x0,0x2c07,0x401e,0x2c07,0x2c07,0x2c07,0x2c07,0x2c07,0x300c,0x300c,0x300c,0x401e,
0x2c07,0x0,0x2c07,0x2c07,0x2c07,0x2c07,0x2c07,0x2c07,0x2c07,0x2c07,0x300c,0x0,
0x401e,0x2c07,0x0,0x401e,0x401e,
0x0,0x900c,0x0,0x900c,0x900c,0x900c,0x0,0x0,0x900c,0x900c,0x0,0x0,
0x2410,0x900c,0x0,0x900c,0x0,0x2411,0x900c,0x900c,0x0,0x0,0x0,0x0,
0x0,0x0,0x900c,0x900c,0x900c,0x900c,0x900c,0x900c,0x900c,0x900c,0x0,0x0,
0x0,0x900c,0x0,0x0,0x0,
0x0,0x4014,0x0,0x4014,0x4014,0x4014,0x4014,0x4014,0x4014,0x4014,0x0,0x4014,
0x0,0x0,0x4014,0x4014,0x4014,0x4014,0x1c06,0x4014,0x4014,0x0,0x0,0x4014,
0x0,0x0,0x4014,0x4014,0x4014,0x4014,0x4014,0x4014,0x4014,0x4014,0x0,0x0,
0x4014,0x4014,0x0,0x4014,0x4014,
0x0,0x300c,0x0,0x300c,0x300c,0x300c,0x1c07,0x300c,0x300c,0x1c07,0x0,0x300c,
0x0,0x1c07,0x300c,0x1c07,0x1c07,0x1c07,0x1c07,0x1c07,0x300c,0x300c,0x300c,0x300c,
0x1c07,0x0,0x1c07,0x1c07,0x1c07,0x1c07,0x1c07,0x1c07,0x1c07,0x1c07,0x300c,0x0,
0x300c,0x1c07,0x0,0x300c,0x300c,
0x0,0x4008,0x0,0x4008,0x4008,0x4008,0x0,0x4008,0x4008,0x4008,0x4008,0x0,
0x0,0x4008,0x0,0x4008,0x0,0x4008,0x4008,0x4008,0x0,0x4008,0x0,0x0,
0x2412,0x0,0x4008,0x4008,0x4008,0x4008,0x4008,0x4008,0x4008,0x4008,0x4008,0x0,
0x0,0x2413,0x4008,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c14,0x0,0x0,
0x0,0x0,0x0,0x2c14,0x0,0x0,0x2c14,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x2c14,0x2c14,0x2c14,0x2c14,0x2c14,0x2c14,0x2c14,0x2c14,0x0,0x0,
0x0,0x2c14,0x0,0x0,0x0,
0x0,0x0,0x2415,0x140a,0x4400,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2416,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,
0x0,0x0,0x1c0b,0x1c0b,0x0,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x341f,0x1c0b,0x1c0b,
0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,
0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x2417,
0x1c0b,0x1c0b,0x1c0b,0x1c0b,0x1c0b,
0x0,0x0,0x1c0c,0x1c0c,0x0,0x1c0c,0x1c0c,0x341f,0x1c0c,0x1c0c,0x1c0c,0x1c0c,
0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,
0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x2418,
0x1c0c,0x1c0c,0x1c0c,0x1c0c,0x1c0c,
0x0,0x301f,0x0,0x301f,0x301f,0x301f,0x301f,0x0,0x301f,0x1c0d,0x0,0x0,
0x0,0x0,0x0,0x1c0d,0x1c0d,0x1c0d,0x1c0d,0x301f,0x0,0x0,0x0,0x0,
0x0,0x0,0x1c0d,0x1c0d,0x1c0d,0x1c0d,0x1c0d,0x1c0d,0x1c0d,0x1c0d,0x0,0x0,
0x0,0x1c0d,0x0,0x1c0d,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2410,0x0,0x0,0x0,0x0,0x2411,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x2403,0x0,0x0,0x0,0x0,0x2c03,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c03,
0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,
0x2419,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,
0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,0x1410,
0x1410,0x1410,0x1410,0x1410,0x1410,
0x0,0x0,0x1411,0x1411,0x2402,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,
0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,
0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,0x1411,
0x1411,0x1411,0x1411,0x1411,0x1411,
0x0,0x0,0x9c0d,0x441b,0x441b,0x441b,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,
0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,
0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,
0x9c0d,0x9c0d,0x9c0d,0x9c0d,0x9c0d,
0x0,0x0,0x9c0e,0x441a,0x441a,0x441a,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,
0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,
0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,
0x9c0e,0x9c0e,0x9c0e,0x9c0e,0x9c0e,
0x0,0x4007,0x0,0x4007,0x4007,0x4007,0x0,0x0,0x4007,0x1c14,0x0,0x0,
0x0,0x0,0x4007,0x1c14,0x0,0x4007,0x1c14,0x0,0x0,0x0,0x4007,0x0,
0x0,0x0,0x1c14,0x1c14,0x1c14,0x1c14,0x1c14,0x1c14,0x1c14,0x1c14,0x0,0x0,
0x4007,0x1c14,0x0,0x0,0x0,
0x0,0x0,0x1415,0x1415,0x4400,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,
0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,
0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,0x1415,
0x1415,0x1415,0x1415,0x1415,0x1415,
0x0,0x0,0x2415,0x2415,0x4400,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x241a,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,
0x0,0x0,0x0,0x0,0x240b,0x0,0x0,0x0,0x0,0x2c0b,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c0b,
0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x240c,0x0,0x0,0x2c0c,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c0c,
0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x2410,0x2410,0x2410,0x2410,0x2410,0x2410,0x2410,0x2410,0x2410,0x2410,
0x1419,0x2410,0x2410,0x2410,0x2410,0x2402,0x2410,0x2410,0x2410,0x2410,0x2410,0x2410,
0x2410,0x2410,0x2410,0x2410,0x2410,0x2410,0x2410,0x2410,0x2410,0x2410,0x2410,0x2410,
0x2410,0x2410,0x2410,0x2410,0x2410,
0x0,0x0,0x2415,0x2415,0x4400,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x241b,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x241b,0x2415,0x2415,0x2415,
0x0,0x0,0x2415,0x2415,0x4400,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x241c,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,
0x0,0x0,0x2415,0x2415,0x4400,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x241d,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,
0x0,0x0,0x2415,0x2415,0x4400,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x241e,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,
0x0,0x0,0x2415,0x2415,0x4400,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,0x241f,0x2415,0x2415,0x2415,0x2415,0x2415,0x2415,
0x2415,0x2415,0x2415,0x2415,0x2415,
0x0,0x0,0x0,0x2420,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x2c21,0x1420,0x0,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,
0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,
0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,
0x2c21,0x2c21,0x2c21,0x2c21,0x2c21,
0x0,0x0,0x1c21,0x2422,0x9413,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,
0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,
0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,
0x1c21,0x1c21,0x1c21,0x1c21,0x1c21,
0x0,0x0,0x0,0x1422,0x9413,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,
};
static SXSTMI *S_transition_matrix[]={NULL,
&SXS_transition[0],
&SXS_transition[41],
&SXS_transition[82],
&SXS_transition[123],
&SXS_transition[164],
&SXS_transition[205],
&SXS_transition[246],
&SXS_transition[287],
&SXS_transition[328],
&SXS_transition[369],
&SXS_transition[410],
&SXS_transition[451],
&SXS_transition[492],
&SXS_transition[533],
&SXS_transition[574],
&SXS_transition[615],
&SXS_transition[656],
&SXS_transition[697],
&SXS_transition[738],
&SXS_transition[779],
&SXS_transition[820],
&SXS_transition[861],
&SXS_transition[902],
&SXS_transition[943],
&SXS_transition[984],
&SXS_transition[1025],
&SXS_transition[1066],
&SXS_transition[1107],
&SXS_transition[1148],
&SXS_transition[1189],
&SXS_transition[1230],
&SXS_transition[1271],
&SXS_transition[1312],
&SXS_transition[1353],
};
static struct SXS_action_or_prdct_code SXS_action_or_prdct_code[]={{0,0,0,0,0},
{0x2001,6,2,1,0},
{0x240c,1,0,1,1},
{0x4417,0,0,1,1},
{0x240a,1,0,1,1},
{0x0,0,0,1,1},
{0x240b,1,0,1,1},
{0x2403,0,0,1,1},
{0x2c0d,1,0,1,1},
{0x2c04,0,0,1,1},
{0x2c0d,1,0,1,1},
{0x2c07,0,0,1,1},
{0x401c,3,0,0,0},
{0x900f,4,0,0,0},
{0x9010,4,0,0,0},
{0x9011,11,0,1,0},
{0x9012,11,0,1,0},
{0x401b,5,0,1,0},
{0x401a,5,0,1,0},
{0x9001,1,0,0,0},
};
static char *S_adrp[]={0,
"ATTRIBUTE",
"ARGUMENT",
"CATEGORY",
"TERMINAL",
"AMALGAM",
"COMPOUND",
"%MACRO_NAME",
"=",
";",
"COMPLETE",
"%CHAINE",
"%IDENT",
"{",
"}",
".",
"[",
"]",
"<",
">",
"%ENTIER",
",",
"pred",
"\"",
"(",
")",
"CONTRAINT",
"OPTIONAL",
"|",
"+",
"-",
"%MOT_1COL",
"!",
"End Of File",
};
static SXINT S_is_a_keyword[]={
8,1,2,3,4,5,6,10,22};
static SXINT S_is_a_generic_terminal[]={
5,7,11,12,20,31};
static SXINT S_lrgl[]={
4,1,2,3,4,0,
5,-1,1,2,3,4,
5,-1,0,1,2,3,
};
static SXINT *S_lregle[]={NULL,
&S_lrgl[0],
&S_lrgl[6],
&S_lrgl[12],
};
static SXINT S_param_ref[]={
0,
0,-1,
-1,0,
};
static struct SXS_local_mess SXS_local_mess[]={{0,NULL,NULL},
{1,"%sThe invalid character \"%s\" is deleted.",&S_param_ref[0]},
{2,"%sThe invalid character \"%s\" is replaced by \"%s\".",&S_param_ref[1]},
{2,"%sThe character \"%s\" is inserted before \"%s\".",&S_param_ref[3]},
};
static SXINT S_no_delete[]={
0};
static SXINT S_no_insert[]={
0};
static char *S_global_mess[]={0,
"%s\"%s\" is deleted.",
"%sThis unknown keyword is erased.",
"End Of Line",
"End Of File",
"%sScanning stops on End Of File.",
};
#ifdef SCANACT
extern SXINT SCANACT(SXINT what, SXINT act_no);
#endif /* SCANACT */
extern SXINT sxscan_it(void);
extern SXBOOLEAN sxsrecovery (SXINT sxsrecovery_what, SXINT state_no, unsigned char *class);
static SXINT check_keyword(char *init_string, SXINT init_length);
static struct SXT_node_info SXT_node_info[]={{0,0},
{40,1},{0,3},{24,5},{9,5},{4,6},{19,7},{61,8},{2,9},{22,10},{43,11},{21,13},{0,14},
{5,16},{0,17},{51,19},{0,20},{50,21},{0,23},{11,25},{10,26},{13,28},{14,30},{16,32},{12,33},
{15,34},{62,35},{33,35},{33,36},{0,37},{62,38},{0,38},{47,39},{32,41},{0,41},{30,42},{0,43},
{18,45},{17,46},{53,49},{41,52},{34,53},{49,54},{36,55},{35,55},{37,55},{0,55},{0,56},{46,57},
{27,59},{29,59},{0,60},{45,61},{26,63},{28,63},{0,64},{60,66},{0,67},{59,68},{31,70},{0,70},
{25,72},{48,73},{0,74},{0,75},{8,77},{0,78},{7,79},{6,79},{0,79},{33,80},{0,81},{20,82},
{38,83},{52,84},{0,84},{3,86},{0,87},{23,89},{0,90},{39,92},{38,94},{20,95},{0,96},{58,98},
{57,99},{0,103},{56,105},{55,105},{54,105},{0,106},{62,107},{0,107},};
static SXINT T_ter_to_node_name[]={
0,0,0,0,0,0,0,42,0,0,0,20,38,0,0,0,0,0,0,0,33,0,0,0,0,
0,0,0,0,0,0,44,};
static char *T_node_name[]={NULL,
"ERROR",
"AMALGAM",
"AMALGAM_S",
"ARGUMENT",
"ARGUMENT_S",
"ATOM_MINUS",
"ATOM_PLUS",
"ATOM_S",
"ATTRIBUTE",
"ATTRIBUTE_PASS_NB",
"ATTRIBUTE_S",
"ATTR_ARG_STRUCT",
"ATTR_ATOMS",
"ATTR_DOTS",
"ATTR_SET_OF_STRUCT",
"ATTR_STRUCT",
"ATTR_VAL",
"ATTR_VAL_S",
"CATEGORY",
"CHAINE",
"COMPLETE",
"COMPOUND",
"COMPOUND_S",
"DECLARATION_S",
"DISJONCTION_S",
"EMPTY_ADJUNCT",
"EMPTY_ATOM",
"EMPTY_NAMED_ADJUNCT",
"EMPTY_NAMED_ATOM",
"EMPTY_NAMED_STRUCT",
"EMPTY_SOUS_CAT",
"EMPTY_STRUCT",
"ENTIER",
"FIELD",
"FIELD_CONSTRAINT",
"FIELD_EQUAL",
"FIELD_OPTIONAL",
"IDENT",
"IDENT_S",
"LEXICAL_GRAMMAR",
"MACRO",
"MACRO_NAME",
"MACRO_STRUCTURE",
"MOT_1COL",
"NAMED_ADJUNCT",
"NAMED_ATOM",
"NAMED_STRUCTURE",
"OPT_DISJONCTION",
"OPT_FIELD",
"PAIR",
"PAIR_S",
"PRED",
"PRED_FIELD",
"PRIORITY",
"PRIORITY_MAX",
"PRIORITY_S",
"RULE",
"RULES_S",
"SOUS_CAT",
"STRUCTURE_S",
"TERMINAL",
"VOID",
};
extern SXINT sempass(SXINT what, struct sxtables *sxtables_ptr);
static char T_stack_schema[]={0,
0,1,0,1,0,0,0,0,0,0,1,3,0,1,2,1,1,2,1,0,0,1,1,2,1,
0,1,1,4,4,7,3,5,5,0,0,0,1,0,2,0,0,0,2,0,0,1,2,1,2,
4,0,0,1,0,0,0,2,0,1,0,2,0,0,2,0,1,0,2,0,2,0,1,0,0,
2,0,0,0,0,0,0,0,1,2,1,1,2,1,0,1,0,1,0,0,1,2,1,0,1,
2,3,0,1,0,0,0,};

static struct SXT_tables SXT_tables=
{SXT_node_info, T_ter_to_node_name, T_stack_schema, sempass, T_node_name};
extern SXINT sxscanner(SXINT what_to_do, struct sxtables *arg);
extern SXINT sxparser(SXINT what_to_do, struct sxtables *arg);
extern SXINT sxatc(SXINT what, ...);

struct sxtables sxtables={
52113, /* magic */
{sxscanner,(SXPARSER_T) sxparser}, {255, 33, 1, 3, 4, 41, 0, 34, 1, 1, 0, 
S_is_a_keyword,S_is_a_generic_terminal,S_transition_matrix,
SXS_action_or_prdct_code,
S_adrp,
NULL,
SXS_local_mess,
S_char_to_simple_class+128,
S_no_delete,
S_no_insert,
S_global_mess,
S_lregle,
#ifdef SCANACT
(SXSCANACT_T) SCANACT,
#else /* SCANACT */
NULL,
#endif /* SCANACT */
(SXRECOVERY_T) sxsrecovery,
check_keyword,
},
{15, 87, 87, 115, 131, 176, 188, 281, 33, 36, 91, 91, 89, 45, 0, 9, 4, 7, 2, 5, 11, 5, 4,
reductions,
t_bases,
nt_bases,
#ifdef __INTEL_COMPILER
#pragma warning(push ; disable:170)
#endif
vector-188,
#ifdef __INTEL_COMPILER
#pragma warning(pop)
#endif 
SXPBM_trans,
NULL,
NULL,
NULL,
P_lregle,
P_right_ctxt_head,
SXP_local_mess,
P_no_delete,
P_no_insert,
P_global_mess,PER_tset,sxscan_it,(SXRECOVERY_T) sxprecovery,
NULL,
NULL,
(SXSEMACT_T) sxatc
},
err_titles,
abstract,
(sxsem_tables*)&SXT_tables,
NULL,
};

#include	"sxdico.h"

#define KW_NB		8
#define INIT_BASE	1
#define INIT_SUFFIX	32
#define CLASS_MASK	15
#define STOP_MASK	16
#define BASE_SHIFT	6
#define SUFFIX_MASK	32

static SXINT kw_code2t_code [9] = {0,
22, 10, 6, 5, 4, 3, 2, 1, 
};

static SXINT kw_code2lgth [9] = {0,
4, 8, 8, 7, 8, 8, 8, 9, 
};

static SXUINT comb_vector [18] = {
0, 0, 209, 514, 0, 0, 341, 278, 471, 
408, 89, 531, 148, 0, 0, 0, 0, 0, 
};

static unsigned char char2class [256] = {
'\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\003', '\000', '\004', '\001', '\002', '\000', 
'\000', '\000', '\000', '\000', '\000', '\005', '\006', '\000', 
'\000', '\000', '\000', '\000', '\000', '\007', '\000', '\000', 
'\000', '\000', '\b', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\t', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', 
};

#include	"sxcheck_keyword.h"

/* End of sxtables for lfg_lex [Thu Nov 29 14:04:16 2012] */
