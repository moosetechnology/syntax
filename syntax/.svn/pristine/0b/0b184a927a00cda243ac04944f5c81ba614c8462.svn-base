/******************************************************************************
 *                                S Y N T A X
 *-----------------------------------------------------------------------------
 *   Copyright (C) 1972-2018 INRIA (Institut National de Recherche en
 *   Informatique et Automatique)
 *-----------------------------------------------------------------------------
 *   URL: http://syntax.gforge.inria.fr
 *-----------------------------------------------------------------------------
 *   The source code of SYNTAX is distributed with two different licenses,
 *   depending on the files:
 *   - The recursive content of src/ and incl/ and the non-recursive content
 *     of SYNTAX's root directory are distributed under the CeCILL-C license
 *   - The recursive content of all other repertories is distributed under
 *     the CeCILL license
 *   All code produced by SYNTAX must be considered as being under the
 *   CeCILL-C license. Information about the CeCILL and CeCILL-C licenses
 *   can be found at, e.g., http://www.cecill.fr
 *****************************************************************************/


/* Beginning of sxtables for ppc2 [Mon Jul 21 13:44:19 2008] */
#define SXP_MAX 988
#include "sxunix.h"
#include "sxba.h"
static struct SXP_reductions reductions[]={{0,0,0,0},
{1, 1, 0, -361},
{1, 2, 0, -361},
{1, 3, 0, -361},
{1, 186, 1, -282},
{1, 187, 1, -284},
{1, 188, 1, -285},
{1, 8, 1, -231},
{1, 11, 1, -232},
{1, 9, 1, -231},
{1, 12, 1, -232},
{1, 37, 1, 503},
{1, 50, 1, 515},
{1, 158, 1, 499},
{1, 159, 1, 499},
{1, 161, 1, 499},
{1, 162, 1, 499},
{1, 170, 1, 499},
{1, 173, 1, 499},
{1, 175, 1, 499},
{1, 177, 1, 499},
{1, 178, 1, 499},
{1, 183, 1, -239},
{1, 28, 1, -242},
{1, 143, 0, -250},
{1, 70, 2, 525},
{1, 38, 2, 503},
{1, 119, 2, 516},
{1, 39, 1, 518},
{1, 41, 1, -248},
{1, 54, 2, 515},
{1, 169, 1, 544},
{1, 171, 1, 545},
{1, 172, 1, 546},
{1, 174, 1, 545},
{1, 176, 1, 545},
{1, 144, 1, -250},
{1, 137, 1, -252},
{1, 139, 1, -252},
{1, 145, 1, -250},
{1, 146, 1, -250},
{1, 147, 1, -250},
{1, 138, 1, -252},
{1, 140, 1, -252},
{1, 148, 1, -250},
{1, 149, 1, -250},
{1, 203, 2, 540},
{1, 199, 2, 540},
{1, 103, 1, 535},
{1, 82, 2, 529},
{1, 80, 2, -255},
{1, 95, 2, -257},
{1, 184, 4, -239},
{1, 99, 2, 523},
{1, 102, 2, 535},
{1, 59, 0, 514},
{1, 55, 0, 524},
{1, 56, 0, 524},
{1, 57, 0, 524},
{1, 58, 0, 524},
{1, 60, 0, 514},
{1, 61, 0, 514},
{1, 62, 0, 514},
{1, 63, 0, 514},
{1, 64, 0, 514},
{1, 65, 0, 514},
{1, 66, 0, 514},
{1, 67, 0, 514},
{1, 182, 0, -283},
{1, 245, 0, 558},
{1, 4, 0, -1},
{1, 49, 0, 520},
{1, 76, 1, -365},
{1, 115, 1, -238},
{1, 179, 1, 556},
{1, 107, 1, 536},
{1, 88, 1, -366},
{1, 89, 1, -366},
{1, 235, 0, 562},
{1, 236, 0, 562},
{1, 246, 0, -245},
{1, 248, 0, 512},
{0, 0, 2, -361},
{0, 5, 1, -1},
{0, 6, 1, -1},
{1, 15, 1, 502},
{0, 19, 1, 506},
{0, 68, 1, 525},
{1, 34, 1, 502},
{1, 35, 1, 502},
{0, 121, 1, 539},
{1, 42, 0, -248},
{0, 52, 1, 515},
{0, 53, 1, 515},
{0, 120, 1, 539},
{1, 114, 1, 517},
{1, 116, 0, -376},
{1, 168, 0, 544},
{1, 29, 0, 507},
{1, 109, 2, 517},
{1, 104, 2, 536},
{1, 112, 2, 517},
{1, 108, 2, 536},
{1, 132, 0, 521},
{1, 78, 2, -365},
{1, 75, 2, 511},
{1, 77, 2, -365},
{1, 74, 2, 511},
{1, 91, 2, -366},
{1, 85, 2, 510},
{1, 90, 2, -366},
{1, 84, 2, 510},
{1, 93, 2, -366},
{1, 87, 2, 510},
{1, 92, 2, -366},
{1, 86, 2, 510},
{1, 180, 2, 557},
{1, 244, 1, -246},
{1, 221, 1, 562},
{0, 220, 1, 540},
{1, 231, 1, 562},
{1, 181, 2, 557},
{1, 191, 0, 513},
{1, 69, 2, 525},
{1, 36, 2, 502},
{1, 51, 2, 515},
{1, 113, 2, 517},
{1, 235, 1, 562},
{1, 156, 1, 544},
{1, 157, 2, 499},
{1, 17, 3, 506},
{1, 59, 1, 514},
{1, 20, 3, 506},
{1, 21, 3, 506},
{1, 48, 2, 520},
{1, 46, 2, 520},
{1, 40, 3, 498},
{0, 133, 1, 521},
{0, 134, 1, 521},
{1, 247, 2, 553},
{1, 222, 2, 562},
{1, 239, 0, 566},
{1, 224, 2, 562},
{1, 223, 2, 562},
{1, 226, 2, 562},
{1, 225, 2, 562},
{1, 234, 2, 562},
{1, 233, 2, 562},
{1, 227, 2, 562},
{0, 195, 1, -393},
{1, 232, 2, 562},
{0, 190, 1, 513},
{1, 16, 3, 506},
{1, 22, 3, -363},
{1, 23, 3, -363},
{1, 110, 3, 517},
{1, 111, 3, 517},
{1, 45, 1, -29},
{1, 44, 1, -29},
{1, 81, 1, 529},
{1, 128, 0, 528},
{0, 97, 1, 534},
{1, 130, 0, -445},
{1, 105, 3, 536},
{1, 106, 3, 536},
{1, 122, 3, 539},
{1, 117, 2, -376},
{1, 163, 2, 546},
{1, 164, 2, 546},
{1, 165, 2, 546},
{1, 166, 2, 546},
{1, 167, 2, 546},
{1, 185, 3, -281},
{1, 18, 4, 506},
{1, 26, 4, -363},
{1, 24, 4, -363},
{1, 25, 4, -363},
{1, 30, 2, 507},
{1, 33, 2, 507},
{1, 47, 3, 520},
{1, 238, 2, 564},
{1, 198, 3, 540},
{1, 219, 3, 540},
{1, 197, 3, 540},
{1, 200, 3, 540},
{1, 201, 3, 540},
{1, 202, 3, 540},
{1, 204, 3, 540},
{1, 205, 3, 540},
{1, 206, 3, 540},
{1, 207, 3, 540},
{1, 208, 3, 540},
{1, 209, 3, 540},
{1, 230, 3, 562},
{1, 194, 0, 560},
{0, 100, 1, 535},
{1, 43, 2, -29},
{0, 101, 1, 535},
{1, 129, 1, 528},
{1, 73, 4, 511},
{1, 96, 2, 534},
{1, 131, 1, -445},
{1, 83, 4, 510},
{1, 155, 3, 547},
{1, 160, 4, 499},
{1, 31, 3, 507},
{1, 32, 3, 507},
{1, 241, 2, 566},
{1, 228, 4, 562},
{1, 211, 4, 540},
{1, 214, 4, 540},
{1, 229, 4, 562},
{1, 196, 3, -393},
{1, 193, 1, 560},
{0, 189, 1, 530},
{0, 124, 1, 541},
{1, 243, 3, 566},
{1, 242, 3, 566},
{1, 210, 5, 540},
{1, 212, 5, 540},
{1, 213, 5, 540},
{1, 215, 5, 540},
{1, 216, 5, 540},
{1, 217, 5, 540},
{1, 218, 5, 540},
{1, 123, 6, 539},
{1, 192, 6, -5},
{1, 125, 3, 541},
{1, 126, 3, 541},
{1, 240, 5, 566},
{1, 127, 6, 541},
};
static struct SXP_bases t_bases[]={{0,0,0},
{-83, 589, 769},
{-84, 589, 769},
{-93, 574, 0},
{-87, 794, 624},
{0, 565, 617},
{-91, 647, 630},
{-92, 794, 729},
{0, 721, 0},
{0, 766, 663},
{0, 766, 704},
{0, 766, 705},
{0, 794, 657},
{0, 576, 0},
{-103, 589, 646},
{0, 715, 614},
{0, 715, 623},
{-123, 794, 624},
{0, 589, 625},
{-125, 794, 729},
{-138, 766, 663},
{0, 565, 620},
{-137, 766, 663},
{-141, 590, 0},
{0, 565, 672},
{-160, 275, 2},
{-161, 565, 756},
{-162, 276, 1},
{-160, 279, 2},
{0, 794, 729},
{0, 565, 0},
{-71, 0, 0},
{0, 298, 6},
{0, 715, 613},
{-81, 0, 0},
{0, 267, 6},
{0, 794, 707},
{-122, 715, 613},
{0, 491, 25},
{-81, 715, 613},
{-81, 576, 0},
{0, 715, 692},
{0, 715, 683},
{-172, 69, 57},
{-194, 715, 613},
{-198, 491, 25},
{-201, 794, 729},
{0, 715, 633},
{0, 565, 756},
{-198, 715, 634},
{-70, 589, 742},
{0, 766, 663},
{0, 766, 663},
{0, 766, 663},
{0, 766, 663},
{0, 766, 663},
{0, 298, 6},
{0, 576, 0},
{-91, 647, 630},
{0, 766, 663},
{0, 766, 663},
{0, 766, 705},
{-103, 589, 646},
{0, 298, 6},
{-160, 279, 2},
{-160, 279, 2},
{0, 565, 0},
{0, 298, 6},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 576, 0},
{-81, 0, 0},
{-122, 715, 613},
{0, 565, 0},
{-81, 0, 0},
{-122, 715, 613},
{0, 794, 729},
{-81, 0, 0},
{-122, 715, 613},
{-71, 0, 0},
{-81, 0, 0},
{-81, 0, 0},
{-81, 715, 613},
{0, 576, 0},
{-122, 715, 613},
{0, 576, 0},
{0, 576, 0},
{0, 715, 613},
{-81, 715, 613},
{0, 715, 613},
{0, 715, 613},
{-81, 715, 613},
{-81, 715, 613},
{0, 715, 613},
{-81, 715, 613},
{-81, 715, 613},
{-81, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 794, 707},
{0, 298, 6},
{-81, 0, 0},
{-122, 715, 613},
{-141, 590, 0},
{-141, 590, 0},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{-122, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{0, 715, 613},
{-211, 824, 0},
{0, 715, 613},
{0, 715, 633},
{-194, 715, 613},
{-81, 0, 0},
{0, 715, 633},
{0, -82, 59},
{0, 570, 754},
{-86, 571, 0},
{0, 572, 621},
{0, 268, 10},
{0, 310, 10},
{-94, 651, 758},
{-99, 647, 0},
{-100, 651, 0},
{0, 647, 618},
{0, 651, 619},
{0, 790, 658},
{-119, 814, 0},
{0, 121, 29},
{0, 572, 757},
{0, 743, 0},
{-129, 273, 38},
{0, 790, 648},
{0, 336, 30},
{-132, 577, 0},
{-133, 577, 0},
{0, 570, 626},
{0, 136, 11},
{0, 790, 665},
{-140, 814, 0},
{0, 341, 7},
{-142, 814, 0},
{-143, 814, 0},
{-144, 814, 0},
{-145, 814, 0},
{-148, 814, 0},
{-149, 790, 666},
{0, 631, 0},
{0, 274, 1},
{-151, 790, 640},
{-152, 577, 0},
{0, 153, 7},
{0, 154, 9},
{-90, 647, 0},
{0, 155, 7},
{0, 156, 9},
{0, 570, 748},
{0, 163, 7},
{0, 164, 9},
{0, 277, 10},
{-165, 790, 666},
{0, 167, 1},
{0, 168, 1},
{0, 169, 1},
{0, 790, 644},
{-173, 577, 0},
{0, 577, 641},
{0, 175, 7},
{0, 176, 9},
{-177, 577, 0},
{0, 577, 759},
{0, 572, 622},
{-180, 347, 8},
{-181, 790, 666},
{0, 348, 26},
{-182, 790, 666},
{-183, 765, 738},
{0, 349, 26},
{-184, 782, 0},
{0, 350, 26},
{-185, 782, 0},
{-186, 765, 0},
{-187, 784, 0},
{0, 351, 26},
{-188, 784, 681},
{0, 352, 26},
{-189, 784, 659},
{0, 353, 26},
{-190, 784, 668},
{-191, 784, 695},
{-192, 784, 676},
{0, 790, 762},
{0, 790, 632},
{0, 355, 7},
{-195, 647, 0},
{0, 596, 0},
{-197, 651, 751},
{0, 199, 11},
{-200, 278, 2},
{0, 202, 11},
{0, 203, 11},
{0, 204, 1},
{0, 205, 7},
{0, 206, 9},
{-207, 347, 8},
{0, 592, 0},
{-208, 814, 0},
{-209, 790, 666},
{-210, 790, 666},
{-212, 790, 666},
{-213, 790, 640},
{0, 358, 1},
{-214, 790, 666},
{-215, 790, 666},
{0, 217, 9},
{-218, 790, 666},
{-219, 790, 666},
{-220, 790, 666},
{-221, 790, 666},
{-222, 790, 666},
{-223, 790, 666},
{-224, 790, 0},
{0, 225, 11},
{0, 226, 7},
{0, 227, 11},
{0, 360, 10},
{-228, 790, 666},
{0, 229, 7},
{0, 230, 11},
{-72, 796, 0},
{-75, 585, 0},
{-76, 569, 0},
{-77, 650, 0},
{-75, 73, 6},
{-105, -104, 10},
{-107, -106, 10},
{-109, -108, 10},
{-111, -110, 10},
{-113, -112, 10},
{-115, -114, 10},
{-127, 74, 29},
{0, 493, 25},
{0, 74, 29},
{-131, 635, 0},
{0, 793, 0},
{-159, 346, 26},
{0, 166, 25},
{0, 171, 1},
{-216, 359, 6},
{0, 280, 59},
};
static struct SXP_bases nt_bases[]={{0,0,0},
{-233, 984, 548},
{-233, 984, 551},
{-249, 0, 0},
{-247, 0, 0},
{-375, 804, 840},
{-248, -11, 23},
{-12, 978, 0},
{-376, 0, 0},
{-377, 988, 803},
{-18, 829, 786},
{-291, 829, 883},
{-23, 0, 0},
{-380, 0, 0},
{-252, 926, 772},
{-391, 940, 0},
{-373, 940, 899},
{-25, 0, 0},
{-233, 978, 887},
{-30, 978, 0},
{-373, 988, 877},
{-417, 804, 841},
{-373, 988, 872},
{-418, 0, 0},
{-441, 949, 917},
{-443, 0, 0},
{-444, 949, 917},
{-445, 0, 0},
{-468, 0, 0},
{-242, 828, 0},
{-369, 949, 891},
{-244, 0, 0},
{-4, 0, 0},
{-373, 940, 497},
{-374, 0, 0},
{-5, 0, 0},
{-253, 971, 724},
{-373, 940, 539},
{-255, 0, 0},
{-373, 940, 921},
{-413, -412, 12},
{-373, 940, 834},
{-373, 940, 906},
{-293, 0, 0},
{-373, 940, 902},
{-50, 0, 0},
{-256, 978, 536},
{-373, 940, 515},
{-53, 949, 917},
{-373, 940, 919},
{-233, 984, 849},
{-13, 988, 803},
{-14, 988, 803},
{-379, 988, 803},
{-15, 988, 803},
{-16, 988, 803},
{-22, 0, 0},
{-381, 0, 0},
{-26, -248, 24},
{-373, 988, 844},
{-373, 988, 868},
{-33, 829, 563},
{-252, 926, 550},
{-52, 0, 0},
{-470, 0, 0},
{-474, 0, 0},
{-371, 949, 516},
{-6, 0, 0},
{-373, 940, 496},
{-385, 940, 0},
{-387, 940, 0},
{-388, 940, 0},
{-389, 940, 0},
{-390, 940, 0},
{-396, 0, 0},
{-397, 0, 0},
{-373, 940, 533},
{-27, 804, 841},
{-400, 0, 0},
{-373, 940, 774},
{-256, 978, 821},
{-403, 0, 0},
{-373, 940, 855},
{-292, 0, 0},
{-407, 0, 0},
{-408, 0, 0},
{-373, 940, 854},
{-411, 0, 0},
{-373, 940, 930},
{-415, 0, 0},
{-416, 0, 0},
{-373, 940, 820},
{-373, 940, 857},
{-373, 940, 823},
{-373, 940, 830},
{-373, 940, 880},
{-373, 940, 898},
{-373, 940, 908},
{-373, 940, 914},
{-373, 940, 915},
{-373, 940, 916},
{-373, 940, 909},
{-373, 940, 918},
{-373, 940, 923},
{-373, 940, 924},
{-253, 971, 717},
{-447, 0, 0},
{-448, 0, 0},
{-373, 940, 931},
{-450, 0, 0},
{-451, 0, 0},
{-452, 940, 0},
{-373, 940, 927},
{-373, 940, 928},
{-373, 940, 505},
{-373, 940, 517},
{-373, 940, 518},
{-373, 940, 934},
{-373, 940, 504},
{-373, 940, 503},
{-373, 940, 502},
{-373, 940, 501},
{-373, 940, 500},
{-373, 940, 499},
{-373, 940, 498},
{-452, 940, 0},
{-373, 940, 519},
{-373, 940, 520},
{-373, 940, 905},
{-473, 0, 0},
{-373, 940, 523},
};
static struct SXP_item vector[]={
{22, -370},
{0, 0},
{0, 0},
{45, -384},
{45, -372},
{45, -467},
{45, -466},
{45, -465},
{45, -464},
{45, -463},
{45, -462},
{45, -461},
{45, -455},
{18, -398},
{35, -48},
{35, -49},
{35, -54},
{7, -7},
{8, -8},
{18, -394},
{7, -9},
{8, -10},
{45, -459},
{46, -258},
{45, -458},
{45, -458},
{45, -458},
{45, -459},
{46, -294},
{4, -17},
{45, -459},
{46, -295},
{5, 260},
{6, 296},
{2, 304},
{4, 482},
{2, 307},
{39, -51},
{26, -446},
{6, 305},
{45, -395},
{8, 306},
{4, 98},
{5, 319},
{6, 320},
{6, 337},
{45, -395},
{8, 338},
{12, 56},
{13, 57},
{14, 58},
{15, 59},
{25, 479},
{6, 73},
{3, 259},
{4, 55},
{25, 483},
{5, 339},
{6, 340},
{1, 196},
{2, 278},
{7, 494},
{8, 347},
{12, 56},
{13, 57},
{14, 58},
{15, 59},
{16, 60},
{17, 61},
{18, 62},
{19, 63},
{20, 64},
{21, 65},
{22, 66},
{23, 67},
{24, 475},
{29, 74},
{52, -18},
{27, 477},
{28, 478},
{1, 88},
{6, 266},
{6, 335},
{1, 135},
{1, 89},
{1, 179},
{61, -291},
{7, 101},
{7, 102},
{1, 134},
{4, 55},
{6, 266},
{7, 120},
{1, -90},
{2, -90},
{2, 344},
{2, 321},
{10, 261},
{1, -130},
{2, -130},
{7, 150},
{6, 266},
{6, 266},
{9, 193},
{2, 321},
{10, 357},
{10, -81},
{1, 170},
{2, 321},
{1, 97},
{7, 174},
{1, 128},
{2, 321},
{5, 299},
{6, 266},
{6, 308},
{4, 484},
{8, 309},
{10, 313},
{6, 311},
{26, 323},
{8, 312},
{2, 321},
{4, 489},
{5, 317},
{6, 270},
{1, 97},
{8, 318},
{26, 323},
{2, 321},
{5, 299},
{6, 266},
{26, 323},
{25, 486},
{7, 139},
{1, 158},
{26, 323},
{25, 485},
{30, 262},
{31, 314},
{32, 315},
{33, 316},
{34, 487},
{35, 263},
{36, 264},
{37, 68},
{26, 323},
{39, 265},
{40, 297},
{29, 116},
{25, 486},
{6, 266},
{44, 300},
{26, 323},
{26, 323},
{47, 301},
{31, 314},
{32, 315},
{33, 316},
{34, 487},
{6, 266},
{53, 302},
{54, 303},
{29, 345},
{56, 79},
{57, 69},
{58, 80},
{46, 327},
{47, 328},
{44, 300},
{49, 330},
{26, 343},
{47, 301},
{4, 55},
{5, 299},
{6, 266},
{46, 327},
{47, 328},
{53, 302},
{54, 303},
{26, 342},
{56, 79},
{5, 299},
{58, 80},
{46, 327},
{47, 328},
{48, 329},
{49, 330},
{50, 331},
{46, 327},
{7, 95},
{25, 488},
{25, 488},
{24, 475},
{25, 78},
{4, 55},
{27, 477},
{28, 478},
{31, 314},
{32, 315},
{33, 316},
{34, 487},
{25, 78},
{46, 327},
{47, 328},
{48, 329},
{49, 330},
{2, 492},
{25, 96},
{5, 260},
{6, 296},
{1, 157},
{7, 126},
{44, 300},
{10, 261},
{24, 475},
{47, 301},
{1, 85},
{27, 477},
{28, 478},
{1, 124},
{44, 300},
{53, 302},
{54, 303},
{47, 301},
{56, 79},
{2, 321},
{58, 80},
{7, 178},
{25, 476},
{53, 302},
{54, 303},
{5, 322},
{56, 79},
{30, 262},
{58, 80},
{5, 260},
{6, 296},
{10, 313},
{35, 263},
{36, 264},
{37, 68},
{29, 356},
{39, 265},
{40, 297},
{45, 272},
{26, 269},
{29, 345},
{69, -439},
{5, 322},
{26, 323},
{5, 322},
{4, -17},
{29, 354},
{18, -401},
{69, -386},
{25, 479},
{5, 322},
{30, 262},
{4, 146},
{26, -383},
{57, 69},
{4, 480},
{35, 263},
{36, 264},
{37, 68},
{0, 0},
{39, 265},
{40, 297},
{42, 271},
{43, 325},
{44, 326},
{16, 60},
{17, 61},
{18, 62},
{19, 63},
{20, 64},
{21, 65},
{22, 66},
{23, 67},
{25, 147},
{45, -395},
{6, 117},
{25, 481},
{8, 334},
{57, 69},
{42, 271},
{41, 324},
{42, 271},
{43, 325},
{44, 326},
{45, 272},
{6, 266},
{41, 324},
{42, 271},
{43, 325},
{44, 326},
{45, 272},
{46, 327},
{47, 328},
{48, 329},
{49, 330},
{50, 331},
{51, 332},
{52, 333},
{15, -243},
{16, -287},
{41, -367},
{42, -238},
{61, -240},
{4, -17},
{25, 78},
{1, -361},
{2, -1},
{3, -2},
{4, -3},
{5, -231},
{6, -232},
{7, -231},
{8, -232},
{37, -257},
{31, -365},
{39, -257},
{58, -373},
{22, -288},
{22, -399},
{36, -366},
{45, -419},
{0, 0},
{53, 118},
{45, -421},
{55, 490},
{67, -373},
{17, -409},
{4, -19},
{18, -404},
{17, -420},
{45, -422},
{4, -36},
{53, 302},
{54, 303},
{45, -47},
{56, 79},
{4, -41},
{58, 80},
{54, -239},
{55, -281},
{56, -282},
{57, -283},
{4, -19},
{59, -284},
{60, -285},
{3, -28},
{62, -241},
{63, -286},
{49, -31},
{50, -32},
{51, -33},
{52, -18},
{17, -423},
{11, -402},
{45, -410},
{45, -395},
{14, -363},
{45, -46},
{54, -239},
{55, -281},
{56, -282},
{57, -283},
{20, -254},
{59, -284},
{60, -285},
{61, -240},
{62, -241},
{63, -286},
{22, -368},
{27, -29},
{17, -425},
{29, -237},
{49, -34},
{50, -35},
{51, -20},
{52, -21},
{49, -37},
{50, -38},
{51, -39},
{52, -40},
{45, -424},
{49, -42},
{50, -43},
{51, -44},
{52, -45},
{4, -250},
{17, -429},
{17, -431},
{17, -433},
{51, -20},
{52, -21},
{17, -471},
{11, -382},
{17, -405},
{22, -440},
{14, -363},
{15, -233},
{16, -233},
{45, -426},
{45, -392},
{19, -234},
{20, -251},
{45, -456},
{18, -414},
{18, -449},
{45, -456},
{45, -427},
{18, -460},
{45, -428},
{45, -435},
{29, -237},
{30, -233},
{31, -365},
{41, -442},
{45, -430},
{45, -432},
{45, -434},
{36, -366},
{45, -436},
{45, -472},
{66, -393},
{45, -406},
{65, -457},
{45, -437},
{45, -438},
{65, -469},
{45, -378},
{45, -453},
{45, -454},
{48, -250},
{45, -395},
{45, -395},
{51, -250},
{52, -24},
{45, -395},
{54, -239},
{55, -281},
{56, -282},
{57, -283},
{58, -373},
{59, -284},
{60, -285},
{61, -289},
{62, -290},
{63, -286},
{19, -234},
{42, -238},
{0, 0},
{67, -373},
{68, -245},
{11, -362},
{70, -246},
{19, -234},
{14, -363},
{0, 0},
{0, 0},
{0, 0},
{31, -365},
{19, -234},
{20, -235},
{21, -364},
{22, -236},
{36, -366},
{68, -245},
{31, -365},
{70, -246},
{0, 0},
{0, 0},
{29, -237},
{36, -366},
{31, -365},
{45, -384},
{0, 0},
{0, 0},
{0, 0},
{36, -366},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{41, -367},
{42, -238},
{0, 0},
{44, -364},
{58, -373},
{0, 0},
{0, 0},
{0, 0},
{45, -378},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{67, -373},
{68, -245},
{0, 0},
{70, -246},
{54, -239},
{55, -281},
{56, -282},
{57, -283},
{0, 0},
{59, -284},
{60, -285},
{61, -289},
{62, -290},
{63, -286},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{68, -245},
{0, 0},
{70, -246},
};

static  SXBA_ELT SXPBA_kt1
#if SXBITS_PER_LONG==32
 [10] = {266, 0XFFFDFEEE, 0XFFFFFFFB, 0XFFFDB7FF, 0XFFFFF7FF, 0XFDFAFFF5, 0XFE7F927F, 
0XF25FFFFF, 0X00063FBF, 0X000002A2, }
#else
 [6] = {266, 0XFFFFFFFBFFFDFEEE, 0XFFFFF7FFFFFDB7FF, 0XFE7F927FFDFAFFF5, 
0X00063FBFF25FFFFF, 0X00000000000002A2, }
#endif
/* End SXPBA_kt1 */;

static  SXBA_ELT SXPBA_kt2
#if SXBITS_PER_LONG==32
 [10] = {266, 0XFFFDFFEE, 0XFFFFFFFB, 0XFFCDB7FF, 0XFFFFF7FF, 0XFDFEFFF5, 0XFE71927F, 
0XF05FFFFF, 0X00063FBF, 0X00000220, }
#else
 [6] = {266, 0XFFFFFFFBFFFDFFEE, 0XFFFFF7FFFFCDB7FF, 0XFE71927FFDFEFFF5, 
0X00063FBFF05FFFFF, 0X0000000000000220, }
#endif
/* End SXPBA_kt2 */;

static  SXBA_ELT SXPBA_kt10
#if SXBITS_PER_LONG==32
 [10] = {266, 0XFFFDFEEE, 0XFFFFFFFB, 0XFFCDB7FF, 0XFFFFF7FF, 0XFDFAFFF5, 0XFE71927F, 
0XF05FFFFF, 0X00063FBF, 0X00000220, }
#else
 [6] = {266, 0XFFFFFFFBFFFDFEEE, 0XFFFFF7FFFFCDB7FF, 0XFE71927FFDFAFFF5, 
0X00063FBFF05FFFFF, 0X0000000000000220, }
#endif
/* End SXPBA_kt10 */;

static  SXBA_ELT SXPBA_kt11
#if SXBITS_PER_LONG==32
 [10] = {266, 0XFFFDFEEE, 0XFFFFFFFB, 0XFFCDB7FF, 0XFFFFF7FF, 0XFFFAFFF5, 0XFE71927F, 
0XF1FFFFFF, 0X00177FBF, 0X00000220, }
#else
 [6] = {266, 0XFFFFFFFBFFFDFEEE, 0XFFFFF7FFFFCDB7FF, 0XFE71927FFFFAFFF5, 
0X00177FBFF1FFFFFF, 0X0000000000000220, }
#endif
/* End SXPBA_kt11 */;

static  SXBA_ELT SXPBA_kt38
#if SXBITS_PER_LONG==32
 [10] = {266, 0X80544E66, 0X7CFC0000, 0X00080000, 0X00000000, 0X00080000, 0X00000000, 
0X00000000, 0X00000000, 0X00000200, }
#else
 [6] = {266, 0X7CFC000080544E66, 0X0000000000080000, 0X0000000000080000, 
0X0000000000000000, 0X0000000000000200, }
#endif
/* End SXPBA_kt38 */;
static SXBA SXPBM_trans[]={NULL,
&SXPBA_kt1[0],
&SXPBA_kt2[0],
&SXPBA_kt10[0],
&SXPBA_kt11[0],
&SXPBA_kt38[0],
};
static SXINT P_lrgl[]={
3,0,-2,2,0,0,0,0,
2,-2,1,0,0,0,0,0,
5,-1,1,2,3,4,0,0,
5,0,-1,1,2,3,0,0,
5,0,-1,2,3,4,0,0,
4,0,2,3,4,0,0,0,
7,0,-1,-1,1,2,3,4,
5,-1,0,1,2,3,0,0,
4,1,2,3,4,0,0,0,
4,-1,2,3,4,0,0,0,
5,-1,-1,1,2,3,0,0,
};
static SXINT *P_lregle[]={NULL,
&P_lrgl[0],
&P_lrgl[8],
&P_lrgl[16],
&P_lrgl[24],
&P_lrgl[32],
&P_lrgl[40],
&P_lrgl[48],
&P_lrgl[56],
&P_lrgl[64],
&P_lrgl[72],
&P_lrgl[80],
};
static SXINT P_right_ctxt_head[]={0,
2,1,1,1,2,2,1,1,1,2,1,};
static SXINT P_param_ref[]={
1,-2,
0,-1,1,
0,-1,1,
-2,1,
1,-2,
1,
-2,-3,1,
-1,0,1,
0,1,
0,1,-1,
0,1,-1,-2,
-1,1,
};
static struct SXP_local_mess SXP_local_mess[]={{0,NULL,NULL},
{2,"%sSpeling eror: \"%s\" is replaced by \"%s\".",&P_param_ref[0]},
{3,"%sSpeling eror: \"%s\" is replaced by \"%s\" before \"%s\".",&P_param_ref[2]},
{3,"%s\"%s\" is replaced by \"%s\" before \"%s\".",&P_param_ref[5]},
{2,"%s\"%s\" is inserted before \"%s\".",&P_param_ref[8]},
{2,"%s\"%s\" is replaced by \"%s\".",&P_param_ref[10]},
{1,"%s\"%s\" is erased.",&P_param_ref[12]},
{3,"%s\"%s %s\" is inserted before \"%s\".",&P_param_ref[13]},
{3,"%s\"%s\" is inserted before \"%s %s\".",&P_param_ref[16]},
{2,"%s\"%s\" is erased before \"%s\".",&P_param_ref[19]},
{3,"%s\"%s %s\" is replaced by \"%s\".",&P_param_ref[21]},
{4,"%s\"%s\" before \"%s\" is replaced by \"%s %s\".",&P_param_ref[24]},
{2,"%s\"%s\" is inserted before \"%s\".",&P_param_ref[28]},
};
static SXINT P_no_delete[]={
12,24,27,28,30,35,36,37,38,39,40,57,58};
static SXINT P_no_insert[]={
41,5,8,10,12,13,14,16,17,18,19,20,21,22,23,24,26,30,33,34,35,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58};
static char *P_global_mess[]={
"%sOnly \"%s\" is possible here.",
"%sOnly \"%s\" or \"%s\" is possible here.",
"%sOnly \"%s\" or \"%s\" or \"%s\" is possible here.",
"%sOnly \"%s\" or \"%s\" or \"%s\" or \"%s\" is possible here.",
"%sOnly \"%s\" or \"%s\" or \"%s\" or \"%s\" or \"%s\" is possible here.",
"%sCannot recover...",
"%s... Syntactic analysis restarts on \"%s\" \"%s\".",
"EOF",
"%s... Analysis aborted.",
};
static SXINT PER_tset[]={
5,1,2,10,11,38};

static char *err_titles[SXSEVERITIES]={
"\000",
"\001Warning (ppc.anal):\t",
"\002Error (ppc.anal):\t",
};
extern SXBOOLEAN sxprecovery (SXINT what_to_do, SXINT *at_state, SXINT latok_no);

static unsigned char S_char_to_simple_class[]={
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,3,4,4,4,4,4,4,4,4,5,6,4,7,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,5,8,9,10,4,11,12,13,14,15,16,17,18,19,20,
21,22,23,23,23,23,23,23,23,24,24,25,26,27,28,29,30,4,31,31,31,31,32,31,33,
33,33,33,33,34,33,33,33,33,33,33,33,33,33,33,33,35,33,33,36,37,38,39,33,4,
40,40,40,40,41,40,42,42,42,42,42,43,42,42,42,42,42,42,42,42,42,42,42,44,42,
42,45,46,47,48,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,};
static SXSTMI SXS_transition[]={0,
0x0,0x403b,0x0,0x0,0x2402,0x2c02,0x9c04,0x2c03,0x2c04,0x9005,0x4c2a,0x2405,
0x2c06,0x4406,0x4407,0x4405,0x2c07,0x4402,0x2c08,0x2c09,0x2c0a,0x2c0b,0x2c0c,0x2c0c,
0x441d,0x4401,0x2c0d,0x2c0e,0x2c0f,0x4434,0x2c10,0x2c10,0x2c10,0x2c10,0x2c10,0x4408,
0x0,0x4409,0x4431,0x2c11,0x2c11,0x2c11,0x2c11,0x2c11,0x440a,0x2412,0x440b,0x4c36,

0x0,0x9007,0x0,0x0,0x1402,0x1c02,0x9c04,0x9007,0x9007,0x9005,0x9007,0x9007,
0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x7014,0x9007,0x9007,0x9007,
0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,
0x0,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,

0x0,0x0,0x0,0x0,0x4036,0x4036,0x4036,0x4036,0x4036,0x4036,0x0,0x4036,
0x4036,0x4036,0x0,0x4036,0x4036,0x0,0x4036,0x4036,0x4036,0x4036,0x4036,0x4036,
0x0,0x0,0x0,0x4c2e,0x0,0x0,0x4036,0x4036,0x4036,0x4036,0x4036,0x0,
0x0,0x0,0x0,0x4036,0x4036,0x4036,0x4036,0x4036,0x0,0x0,0x0,0x4036,

0x0,0x0,0x1c04,0x1c04,0x1c04,0x0,0x1c04,0x1c04,0x4c38,0x1c04,0x1c04,0x1c04,
0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,
0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,
0x2c16,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,

0x0,0x0,0x0,0x0,0x402f,0x402f,0x402f,0x402f,0x402f,0x402f,0x0,0x4432,
0x402f,0x402f,0x0,0x402f,0x402f,0x0,0x402f,0x402f,0x402f,0x402f,0x402f,0x402f,
0x0,0x0,0x0,0x402f,0x0,0x0,0x402f,0x402f,0x402f,0x402f,0x402f,0x0,
0x0,0x0,0x0,0x402f,0x402f,0x402f,0x402f,0x402f,0x0,0x0,0x0,0x402f,

0x0,0x0,0x2c17,0x2c17,0x2c17,0x0,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,
0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,
0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,
0x2c18,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,

0x0,0x0,0x0,0x0,0x9008,0x9008,0x9008,0x9008,0x9008,0x9008,0x0,0x9008,
0x9008,0x9008,0x0,0x9008,0x4c35,0x0,0x9008,0x9008,0x9008,0x9008,0x9008,0x9008,
0x0,0x0,0x0,0x9008,0x0,0x0,0x9008,0x9008,0x9008,0x9008,0x9008,0x0,
0x0,0x0,0x0,0x9008,0x9008,0x9008,0x9008,0x9008,0x0,0x0,0x0,0x9008,

0x0,0x0,0x0,0x0,0x9009,0x9009,0x9009,0x9009,0x9009,0x9009,0x0,0x9009,
0x9009,0x9009,0x0,0x9009,0x9009,0x0,0x4c35,0x9009,0x9009,0x9009,0x9009,0x9009,
0x0,0x0,0x0,0x9009,0x4c37,0x0,0x9009,0x9009,0x9009,0x9009,0x9009,0x0,
0x0,0x0,0x0,0x9009,0x9009,0x9009,0x9009,0x9009,0x0,0x0,0x0,0x9009,

0x0,0x0,0x0,0x0,0x4037,0x4037,0x4037,0x0,0x0,0x4037,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4037,0x2c19,0x2c19,0x2c19,
0x0,0x0,0x0,0x0,0x0,0x0,0x4037,0x4037,0x4037,0x4037,0x4037,0x0,
0x0,0x0,0x0,0x4037,0x4037,0x4037,0x4037,0x4037,0x0,0x0,0x0,0x0,

0x0,0x0,0x0,0x0,0x402a,0x402a,0x402a,0x402a,0x402a,0x402a,0x0,0x402a,
0x402a,0x402a,0x0,0x2c1a,0x402a,0x0,0x402a,0x402a,0x402a,0x402a,0x402a,0x402a,
0x0,0x0,0x0,0x402a,0x0,0x0,0x402a,0x402a,0x402a,0x402a,0x402a,0x0,
0x0,0x0,0x0,0x402a,0x402a,0x402a,0x402a,0x402a,0x0,0x0,0x0,0x402a,

0x0,0x0,0x0,0x0,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x4038,0x4038,
0x0,0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x2c19,0x4038,0x2c1b,0x2c1b,0x2c1c,
0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x9c0a,0x0,0x4c38,0x9c0b,0x4038,
0x0,0x4038,0x4038,0x0,0x2c1d,0x0,0x9c0c,0x2c1e,0x0,0x4038,0x4038,0x0,

0x0,0x0,0x0,0x0,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x4038,0x4038,
0x0,0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x2c19,0x4038,0x1c0c,0x1c0c,0x1c0c,
0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x9c0a,0x0,0x4c38,0x0,0x4038,
0x0,0x4038,0x4038,0x0,0x2c1d,0x0,0x9c0c,0x0,0x0,0x4038,0x4038,0x0,

0x0,0x0,0x0,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x4029,0x0,0x4029,
0x4029,0x4029,0x0,0x4029,0x4029,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x4029,
0x0,0x0,0x4c2d,0x4c29,0x0,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x0,
0x0,0x0,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x0,0x0,0x0,0x4029,

0x0,0x0,0x0,0x0,0x401a,0x401a,0x401a,0x401a,0x401a,0x401a,0x0,0x401a,
0x401a,0x401a,0x0,0x401a,0x401a,0x0,0x401a,0x401a,0x401a,0x401a,0x401a,0x401a,
0x0,0x0,0x0,0x4c2e,0x0,0x0,0x401a,0x401a,0x401a,0x401a,0x401a,0x0,
0x0,0x0,0x0,0x401a,0x401a,0x401a,0x401a,0x401a,0x401a,0x0,0x0,0x401a,

0x0,0x0,0x0,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x4029,0x0,0x4029,
0x4029,0x4029,0x0,0x4029,0x4029,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x4029,
0x0,0x0,0x0,0x4c29,0x4c2d,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x0,
0x0,0x0,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x0,0x0,0x0,0x4029,

0x0,0x0,0x0,0x0,0x9001,0x9001,0x9001,0x9001,0x0,0x9001,0x9001,0x9001,
0x0,0x9001,0x9001,0x9001,0x9001,0x9001,0x9001,0x9001,0x9001,0x1c10,0x1c10,0x1c10,
0x9001,0x9001,0x9001,0x9001,0x9001,0x9001,0x1c10,0x1c10,0x1c10,0x1c10,0x1c10,0x9001,
0x0,0x9001,0x9001,0x1c10,0x1c10,0x1c10,0x1c10,0x1c10,0x9001,0x9001,0x9001,0x0,

0x0,0x0,0x0,0x0,0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,
0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x2c10,0x2c10,0x2c10,
0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x2c10,0x2c10,0x2c10,0x2c10,0x2c10,0x9002,
0x0,0x9002,0x9002,0x1c11,0x1c11,0x1c11,0x1c11,0x1c11,0x9002,0x9002,0x9002,0x9002,

0x0,0x0,0x0,0x0,0x4030,0x4030,0x4030,0x4030,0x4030,0x4030,0x0,0x4030,
0x4030,0x4030,0x0,0x4030,0x4030,0x0,0x4030,0x4030,0x4030,0x4030,0x4030,0x4030,
0x0,0x0,0x0,0x4030,0x0,0x0,0x4030,0x4030,0x4030,0x4030,0x4030,0x0,
0x0,0x0,0x0,0x4030,0x4030,0x4030,0x4030,0x4030,0x0,0x4433,0x0,0x4030,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x2c1a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x1,0x0,0x0,0x0,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x0,0x9007,
0x9007,0x9007,0x0,0x2c13,0x9007,0x0,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,
0x0,0x0,0x0,0x9007,0x0,0x0,0x9007,0x9007,0x9007,0x9007,0x9007,0x0,
0x0,0x0,0x0,0x9007,0x9007,0x9007,0x9007,0x9007,0x0,0x0,0x0,0x9007,

0x0,0x9007,0x0,0x0,0x1c15,0x9c04,0x9c04,0x9007,0x9007,0x900d,0x9007,0x9007,
0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x7014,0x9007,0x9007,0x9007,
0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,
0x0,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,

0x0,0x0,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,
0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,
0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,
0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x4c38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2c20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x2c17,0x2c17,0x2c17,0x2c06,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,
0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c21,0x2c21,0x2c17,
0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,
0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,

0x0,0x0,0x0,0x0,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x4038,0x4038,
0x0,0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x1c19,0x1c19,0x1c19,
0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x9c0a,0x0,0x0,0x0,0x4038,
0x0,0x4038,0x4038,0x0,0x2c1d,0x0,0x0,0x0,0x0,0x4038,0x4038,0x0,

0x0,0x0,0x900f,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,
0x1c1a,0x1c1a,0x1c1a,0x2c22,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,
0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,
0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,

0x0,0x0,0x0,0x0,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x4038,0x4038,
0x0,0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x2c19,0x4038,0x1c1b,0x1c1b,0x2c1c,
0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x9c0a,0x0,0x4c38,0x0,0x4038,
0x0,0x4038,0x4038,0x0,0x2c1d,0x0,0x9c0c,0x0,0x0,0x4038,0x4038,0x0,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c19,0x0,0x1c1c,0x1c1c,0x1c1c,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9c0a,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x2c1d,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x2c23,0x0,0x2c23,0x0,0x0,0x2c24,0x2c24,0x2c24,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c25,0x2c25,0x2c25,
0x0,0x0,0x0,0x0,0x0,0x0,0x2c25,0x2c25,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x2c25,0x2c25,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x9010,0x1c1f,0x1c1f,0x9c04,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,
0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,
0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,
0x2c26,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,

0x0,0x0,0x0,0x0,0x0,0x2c17,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x4c38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c27,0x2c27,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2c20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x900f,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,
0x2c1a,0x2c1a,0x2c1a,0x1c22,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x9c04,0x2c1a,0x2c1a,0x2c1a,
0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,
0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c24,0x2c24,0x2c24,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x0,0x0,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x4038,0x4038,
0x0,0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x1c24,0x1c24,0x1c24,
0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x0,0x0,0x0,0x0,0x4038,
0x0,0x4038,0x4038,0x0,0x0,0x0,0x0,0x0,0x0,0x4038,0x4038,0x0,

0x0,0x0,0x0,0x0,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x4038,0x4038,
0x0,0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x1c25,0x1c25,0x1c25,
0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x1c25,0x1c25,0x0,0x4c38,0x0,0x4038,
0x0,0x4038,0x4038,0x1c25,0x1c25,0x0,0x9c0c,0x0,0x0,0x4038,0x4038,0x0,

0x0,0x0,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,
0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,
0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,
0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x4c38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c17,0x2c17,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2c20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

};
static SXSTMI *S_transition_matrix[]={NULL,
&SXS_transition[0],
&SXS_transition[48],
&SXS_transition[96],
&SXS_transition[144],
&SXS_transition[192],
&SXS_transition[240],
&SXS_transition[288],
&SXS_transition[336],
&SXS_transition[384],
&SXS_transition[432],
&SXS_transition[480],
&SXS_transition[528],
&SXS_transition[576],
&SXS_transition[624],
&SXS_transition[672],
&SXS_transition[720],
&SXS_transition[768],
&SXS_transition[816],
&SXS_transition[864],
&SXS_transition[912],
&SXS_transition[960],
&SXS_transition[1008],
&SXS_transition[1056],
&SXS_transition[1104],
&SXS_transition[1152],
&SXS_transition[1200],
&SXS_transition[1248],
&SXS_transition[1296],
&SXS_transition[1344],
&SXS_transition[1392],
&SXS_transition[1440],
&SXS_transition[1488],
&SXS_transition[1536],
&SXS_transition[1584],
&SXS_transition[1632],
&SXS_transition[1680],
&SXS_transition[1728],
&SXS_transition[1776],
&SXS_transition[1824],
};
static struct SXS_action_or_prdct_code SXS_action_or_prdct_code[]={{0,0,0,0,0},
{0x6019,2,0,0,0},
{0x5019,1,0,0,0},
{0x2c1f,9,10,1,0},
{0x2015,10,0,1,0},
{0x9003,1,0,1,1},
{0x0,0,0,1,1},
{0x4000,5,0,1,0},
{0x402b,5,0,1,0},
{0x402c,5,0,1,0},
{0x201d,2,0,1,0},
{0x201e,2,0,1,0},
{0x4038,1,0,1,0},
{0x2c1f,1,0,1,1},
{0x0,0,0,1,1},
{0x9011,9,92,1,0},
{0x9012,9,92,1,0},
{0x241a,9,48,1,0},
{0x241f,9,48,1,0},
};
static char *S_adrp[]={0,
";",
",",
"typedef",
"%TYPE",
"*",
"(",
")",
"[",
"]",
"{",
"}",
"auto",
"extern",
"register",
"static",
"char",
"double",
"float",
"int",
"long",
"short",
"unsigned",
"void",
"enum",
"%NAME",
"=",
"struct",
"union",
":",
"while",
"break",
"continue",
"return",
"goto",
"case",
"default",
"do",
"else",
"for",
"switch",
"%RELOP",
"%DIVOP",
"+",
"-",
"%SHIFTOP",
"%EQUOP",
"&",
"|",
"^",
"&&",
"||",
"?",
"%INCOP",
"%UNOP",
"%STROP",
"%CONST",
"if",
"sizeof",
"End Of File",
};
static SXINT S_is_a_keyword[]={
29,3,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28,30,31,32,33,34,35,36,37,38,39,40,57,58};
static SXINT S_is_a_generic_terminal[]={
10,4,25,41,42,45,46,53,54,55,56};
static SXINT S_lrgl[]={
5,-1,0,1,2,3,
4,1,2,3,4,0,
5,-1,1,2,3,4,
};
static SXINT *S_lregle[]={NULL,
&S_lrgl[0],
&S_lrgl[6],
&S_lrgl[12],
};
static SXINT S_param_ref[]={
-1,0,
0,
0,-1,
};
static struct SXS_local_mess SXS_local_mess[]={{0,NULL,NULL},
{2,"%sA character \"%s\" is inserted before \"%s\".",&S_param_ref[0]},
{1,"%sThe invalid character \"%s\" is erased.",&S_param_ref[2]},
{2,"%sThe invalid character \"%s\" is replaced by \"%s\".",&S_param_ref[3]},
};
static SXINT S_no_delete[]={
0};
static SXINT S_no_insert[]={
35,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,42,47,95};
static char *S_global_mess[]={0,
"%s\"%s\" is erased.",
"%s",
"\\n",
"EOF",
"%sLexical analysis stops.",
};
#ifdef SCANACT
extern SXINT SCANACT(SXINT what, SXINT act_no);
#endif /* SCANACT */
extern SXINT sxscan_it(void);
extern SXBOOLEAN sxsrecovery (SXINT sxsrecovery_what, SXINT state_no, unsigned char *class);
static SXINT check_keyword(char *init_string, SXINT init_length);
static struct SXPP_schema SXPP_schema[]={
{6,0},{7,1},{8,0},{7,9},{6,0},{7,1},{8,0},{8,0},{6,0},{8,0},{6,0},{1,1},
{6,0},{8,0},{6,0},{1,4},{6,0},{8,0},{6,0},{6,1},{8,0},{6,0},{6,2},{3,1},
{6,0},{8,0},{6,3},{3,1},{6,0},{3,1},{6,0},{8,0},{6,3},{3,1},{6,0},{3,1},
{6,5},{6,0},{8,0},{6,3},{3,1},{6,0},{3,1},{4,1},{6,0},{8,0},{6,0},{3,1},
{6,6},{6,0},{6,7},{8,0},{6,0},{3,1},{6,8},{6,0},{6,9},{8,0},{6,3},{3,1},
{6,0},{3,1},{6,6},{6,0},{6,7},{8,0},{6,3},{3,1},{6,0},{3,1},{6,8},{6,0},
{6,9},{8,0},{6,0},{3,1},{6,0},{8,0},{6,5},{6,0},{8,0},{6,6},{6,0},{6,7},
{8,0},{6,0},{3,1},{4,1},{6,0},{6,1},{8,0},{6,0},{6,0},{8,0},{6,0},{3,1},
{4,1},{6,0},{6,0},{8,0},{1,1},{7,5},{6,0},{7,1},{6,0},{8,0},{6,10},{1,1},
{7,5},{6,0},{1,2},{7,5},{6,0},{7,1},{6,11},{8,0},{6,0},{5,0},{6,0},{8,0},
{6,0},{5,0},{6,0},{6,1},{8,0},{6,0},{5,0},{6,0},{3,1},{4,1},{6,0},{6,1},
{8,0},{8,1},{6,0},{3,1},{6,0},{3,1},{6,0},{8,0},{6,12},{8,0},{6,13},{8,0},
{6,14},{8,0},{6,15},{8,0},{6,16},{8,0},{6,17},{8,0},{6,18},{8,0},{6,19},{8,0},
{6,20},{8,0},{6,21},{8,0},{6,22},{8,0},{6,23},{8,0},{6,0},{3,1},{6,10},{6,0},
{6,0},{6,11},{8,0},{6,24},{3,1},{6,0},{8,0},{6,24},{8,0},{6,0},{6,26},{6,0},
{8,0},{6,0},{3,1},{6,10},{5,4},{6,0},{6,0},{5,0},{6,11},{8,0},{6,27},{3,1},
{6,0},{8,0},{6,28},{3,1},{6,0},{8,0},{6,27},{8,0},{6,28},{8,0},{6,0},{6,1},
{5,0},{6,0},{8,0},{6,0},{3,1},{4,1},{6,0},{8,0},{6,0},{3,1},{6,29},{3,1},
{6,0},{8,0},{6,29},{3,1},{6,0},{8,0},{6,0},{6,0},{6,7},{8,0},{6,0},{6,7},
{8,0},{6,0},{3,1},{6,6},{8,0},{6,0},{3,1},{6,26},{3,1},{6,0},{8,0},{6,0},
{3,1},{6,26},{3,1},{6,0},{6,10},{6,0},{6,0},{6,11},{8,0},{6,10},{6,0},{6,0},
{6,11},{8,0},{6,0},{6,2},{5,0},{6,0},{6,10},{6,0},{6,0},{6,11},{8,0},{6,2},
{8,0},{6,1},{8,0},{6,0},{1,2},{5,0},{6,0},{8,0},{5,2},{6,0},{8,0},{6,0},
{1,2},{5,2},{6,0},{8,0},{5,-2},{6,10},{1,1},{5,0},{6,0},{1,2},{5,0},{6,0},
{5,-2},{6,11},{8,0},{6,0},{5,4},{6,0},{8,0},{6,0},{1,1},{5,4},{6,0},{8,0},
{6,0},{1,1},{5,4},{6,0},{5,0},{6,30},{3,1},{6,0},{6,1},{8,0},{6,31},{6,0},
{6,1},{8,0},{6,32},{6,0},{6,1},{8,0},{6,33},{6,0},{6,1},{8,0},{6,33},{3,1},
{6,0},{6,1},{8,0},{6,34},{3,1},{6,0},{6,1},{8,0},{6,0},{5,2},{6,0},{8,0},
{7,1},{6,0},{6,29},{5,-1},{3,1},{8,0},{5,-2},{6,35},{3,1},{6,0},{6,29},{5,0},
{8,0},{5,-2},{6,36},{6,0},{6,29},{5,0},{8,0},{6,37},{8,0},{6,0},{5,4},{6,0},
{5,0},{6,38},{3,1},{6,0},{3,1},{6,0},{8,0},{6,0},{5,4},{6,0},{5,0},{6,38},
{8,0},{6,30},{3,1},{6,0},{8,0},{6,39},{3,1},{6,0},{8,0},{6,40},{3,1},{6,0},
{8,0},{6,6},{6,0},{6,1},{6,0},{6,1},{6,0},{6,7},{8,0},{3,1},{6,0},{8,0},
{6,0},{3,1},{6,43},{3,1},{6,0},{8,0},{6,0},{3,1},{6,44},{3,1},{6,0},{8,0},
{6,0},{3,1},{6,5},{3,1},{6,0},{8,0},{6,0},{3,1},{6,47},{3,1},{6,0},{8,0},
{6,0},{3,1},{6,48},{3,1},{6,0},{8,0},{6,0},{3,1},{6,49},{3,1},{6,0},{8,0},
{6,0},{3,1},{6,50},{3,1},{6,0},{8,0},{6,0},{3,1},{6,51},{3,1},{6,0},{8,0},
{6,0},{3,1},{6,5},{6,0},{6,26},{3,1},{6,0},{8,0},{6,0},{3,1},{6,0},{6,26},
{3,1},{6,0},{8,0},{6,0},{3,1},{6,43},{6,0},{6,26},{3,1},{6,0},{8,0},{6,0},
{3,1},{6,44},{6,0},{6,26},{3,1},{6,0},{8,0},{6,0},{3,1},{6,47},{6,0},{6,26},
{3,1},{6,0},{8,0},{6,0},{3,1},{6,48},{6,0},{6,26},{3,1},{6,0},{8,0},{6,0},
{3,1},{6,49},{6,0},{6,26},{3,1},{6,0},{8,0},{6,0},{3,1},{6,52},{3,1},{6,0},
{3,1},{6,29},{3,1},{6,0},{8,0},{6,47},{6,0},{8,0},{6,44},{6,0},{8,0},{6,6},
{6,0},{6,7},{3,1},{6,0},{8,0},{6,0},{6,0},{6,0},{8,0},{6,6},{6,0},{6,7},
{6,6},{6,0},{6,7},{8,0},{6,0},{6,8},{6,0},{6,9},{8,0},{6,57},{8,0},{6,58},
{8,0},};

static struct SXPP_schema *PP_tables[]={NULL,
&SXPP_schema[0],
&SXPP_schema[0],
&SXPP_schema[3],
&SXPP_schema[7],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[10],
&SXPP_schema[14],
&SXPP_schema[8],
&SXPP_schema[14],
&SXPP_schema[14],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[18],
&SXPP_schema[21],
&SXPP_schema[26],
&SXPP_schema[32],
&SXPP_schema[8],
&SXPP_schema[39],
&SXPP_schema[39],
&SXPP_schema[46],
&SXPP_schema[52],
&SXPP_schema[58],
&SXPP_schema[66],
&SXPP_schema[58],
&SXPP_schema[8],
&SXPP_schema[74],
&SXPP_schema[8],
&SXPP_schema[78],
&SXPP_schema[46],
&SXPP_schema[52],
&SXPP_schema[81],
&SXPP_schema[18],
&SXPP_schema[18],
&SXPP_schema[85],
&SXPP_schema[91],
&SXPP_schema[94],
&SXPP_schema[100],
&SXPP_schema[106],
&SXPP_schema[116],
&SXPP_schema[7],
&SXPP_schema[85],
&SXPP_schema[18],
&SXPP_schema[18],
&SXPP_schema[120],
&SXPP_schema[125],
&SXPP_schema[120],
&SXPP_schema[133],
&SXPP_schema[74],
&SXPP_schema[74],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[134],
&SXPP_schema[140],
&SXPP_schema[142],
&SXPP_schema[144],
&SXPP_schema[146],
&SXPP_schema[8],
&SXPP_schema[148],
&SXPP_schema[150],
&SXPP_schema[152],
&SXPP_schema[154],
&SXPP_schema[156],
&SXPP_schema[158],
&SXPP_schema[160],
&SXPP_schema[162],
&SXPP_schema[8],
&SXPP_schema[74],
&SXPP_schema[134],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[164],
&SXPP_schema[171],
&SXPP_schema[171],
&SXPP_schema[175],
&SXPP_schema[171],
&SXPP_schema[171],
&SXPP_schema[8],
&SXPP_schema[21],
&SXPP_schema[8],
&SXPP_schema[177],
&SXPP_schema[181],
&SXPP_schema[190],
&SXPP_schema[190],
&SXPP_schema[194],
&SXPP_schema[194],
&SXPP_schema[198],
&SXPP_schema[200],
&SXPP_schema[190],
&SXPP_schema[190],
&SXPP_schema[194],
&SXPP_schema[194],
&SXPP_schema[8],
&SXPP_schema[202],
&SXPP_schema[207],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[21],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[212],
&SXPP_schema[218],
&SXPP_schema[78],
&SXPP_schema[46],
&SXPP_schema[52],
&SXPP_schema[8],
&SXPP_schema[81],
&SXPP_schema[78],
&SXPP_schema[46],
&SXPP_schema[52],
&SXPP_schema[81],
&SXPP_schema[222],
&SXPP_schema[226],
&SXPP_schema[229],
&SXPP_schema[8],
&SXPP_schema[21],
&SXPP_schema[8],
&SXPP_schema[21],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[233],
&SXPP_schema[239],
&SXPP_schema[8],
&SXPP_schema[249],
&SXPP_schema[21],
&SXPP_schema[254],
&SXPP_schema[7],
&SXPP_schema[263],
&SXPP_schema[7],
&SXPP_schema[265],
&SXPP_schema[7],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[116],
&SXPP_schema[267],
&SXPP_schema[267],
&SXPP_schema[267],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[272],
&SXPP_schema[267],
&SXPP_schema[116],
&SXPP_schema[275],
&SXPP_schema[267],
&SXPP_schema[267],
&SXPP_schema[275],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[280],
&SXPP_schema[18],
&SXPP_schema[291],
&SXPP_schema[295],
&SXPP_schema[291],
&SXPP_schema[300],
&SXPP_schema[291],
&SXPP_schema[291],
&SXPP_schema[310],
&SXPP_schema[314],
&SXPP_schema[318],
&SXPP_schema[322],
&SXPP_schema[327],
&SXPP_schema[265],
&SXPP_schema[91],
&SXPP_schema[91],
&SXPP_schema[91],
&SXPP_schema[91],
&SXPP_schema[332],
&SXPP_schema[91],
&SXPP_schema[91],
&SXPP_schema[91],
&SXPP_schema[91],
&SXPP_schema[332],
&SXPP_schema[336],
&SXPP_schema[342],
&SXPP_schema[349],
&SXPP_schema[355],
&SXPP_schema[74],
&SXPP_schema[357],
&SXPP_schema[367],
&SXPP_schema[373],
&SXPP_schema[377],
&SXPP_schema[381],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[7],
&SXPP_schema[385],
&SXPP_schema[393],
&SXPP_schema[7],
&SXPP_schema[8],
&SXPP_schema[21],
&SXPP_schema[134],
&SXPP_schema[21],
&SXPP_schema[134],
&SXPP_schema[396],
&SXPP_schema[402],
&SXPP_schema[134],
&SXPP_schema[408],
&SXPP_schema[134],
&SXPP_schema[414],
&SXPP_schema[420],
&SXPP_schema[426],
&SXPP_schema[432],
&SXPP_schema[438],
&SXPP_schema[444],
&SXPP_schema[452],
&SXPP_schema[459],
&SXPP_schema[467],
&SXPP_schema[452],
&SXPP_schema[475],
&SXPP_schema[483],
&SXPP_schema[491],
&SXPP_schema[499],
&SXPP_schema[233],
&SXPP_schema[8],
&SXPP_schema[91],
&SXPP_schema[78],
&SXPP_schema[509],
&SXPP_schema[512],
&SXPP_schema[91],
&SXPP_schema[91],
&SXPP_schema[74],
&SXPP_schema[515],
&SXPP_schema[46],
&SXPP_schema[52],
&SXPP_schema[226],
&SXPP_schema[222],
&SXPP_schema[521],
&SXPP_schema[521],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[91],
&SXPP_schema[7],
&SXPP_schema[525],
&SXPP_schema[78],
&SXPP_schema[532],
&SXPP_schema[81],
&SXPP_schema[229],
&SXPP_schema[537],
&SXPP_schema[539],
&SXPP_schema[81],
&SXPP_schema[7],
};
extern SXINT sxscanner(SXINT what_to_do, struct sxtables *arg);
extern SXINT sxparser(SXINT what_to_do, struct sxtables *arg);
extern SXINT sxatcpp(SXINT what, ...);

struct sxtables sxtables={
52113, /* magic */
{sxscanner,(SXPARSER_T) sxparser}, {255, 59, 1, 3, 4, 48, 0, 39, 1, 0, 0, 
S_is_a_keyword,S_is_a_generic_terminal,S_transition_matrix,
SXS_action_or_prdct_code,
S_adrp,
NULL,
SXS_local_mess,
S_char_to_simple_class+128,
S_no_delete,
S_no_insert,
S_global_mess,
S_lregle,
#ifdef SCANACT
(SXSCANACT_T) SCANACT,
#else /* SCANACT */
NULL,
#endif /* SCANACT */
(SXRECOVERY_T) sxsrecovery,
check_keyword,
},
{54, 230, 230, 280, 360, 495, 538, 1058, 59, 71, 248, 248, 265, 131, 0, 11, 4, 7, 2, 5, 11, 2, 7,
reductions,
t_bases,
nt_bases,
#ifdef __INTEL_COMPILER
#pragma warning(push ; disable:170)
#endif
vector-538,
#ifdef __INTEL_COMPILER
#pragma warning(pop)
#endif 
SXPBM_trans,
NULL,
NULL,
NULL,
P_lregle,
P_right_ctxt_head,
SXP_local_mess,
P_no_delete,
P_no_insert,
P_global_mess,PER_tset,sxscan_it,(SXRECOVERY_T) sxprecovery,
NULL,
NULL,
(SXSEMACT_T) sxatcpp
},
err_titles,
NULL,
(sxsem_tables*)&(PP_tables[0]),
NULL,
};

#include	"sxdico.h"

#define KW_NB		29
#define INIT_BASE	1
#define INIT_SUFFIX	0
#define CLASS_MASK	31
#define STOP_MASK	32
#define BASE_SHIFT	7
#define SUFFIX_MASK	64

static SXINT kw_code2t_code [30] = {0,
58, 57, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 28, 27, 
24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 3, 
};

static SXINT kw_code2lgth [30] = {0,
6, 2, 6, 3, 4, 2, 7, 4, 4, 6, 8, 5, 5, 5, 6, 
4, 4, 8, 5, 4, 3, 5, 6, 4, 6, 8, 6, 4, 7, 
};

static SXUINT comb_vector [59] = {
0, 0, 3617, 1570, 3971, 0, 0, 2758, 1671, 
3752, 2601, 0, 0, 5004, 1197, 3854, 3663, 2192, 1713, 
3538, 2227, 2468, 681, 2090, 3499, 3336, 805, 3233, 2983, 
936, 0, 174, 1057, 2342, 433, 3108, 1445, 1834, 1322, 
0, 2730, 1967, 300, 3375, 549, 0, 0, 0, 2857, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

static unsigned char char2class [256] = {
'\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\001', '\002', '\003', '\006', '\007', '\f', 
'\r', '\004', '\016', '\000', '\000', '\t', '\000', '\n', 
'\005', '\000', '\000', '\017', '\020', '\b', '\022', '\023', 
'\021', '\013', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', 
};

#include	"sxcheck_keyword.h"

/* End of sxtables for ppc2 [Mon Jul 21 13:44:19 2008] */
