/* Beginning of sxtables for ppc3 [Tue May 27 16:47:11 2003] */
#define SXP_MAX 961
#include "sxunix.h"
#include "sxba.h"
char WHAT_PPC3[] = "@(#)SYNTAX - $Id$" WHAT_DEBUG;

static struct SXP_reductions reductions[]={{0,0,0,0},

{1, 1, 0, -362},
{1, 2, 0, -362},
{1, 3, 0, -362},
{1, 186, 1, -283},
{1, 187, 1, -285},
{1, 188, 1, -286},
{1, 8, 1, -232},
{1, 11, 1, -233},
{1, 9, 1, -232},
{1, 12, 1, -233},
{1, 37, 1, 505},
{1, 50, 1, 517},
{1, 158, 1, 501},
{1, 159, 1, 501},
{1, 161, 1, 501},
{1, 162, 1, 501},
{1, 170, 1, 501},
{1, 173, 1, 501},
{1, 175, 1, 501},
{1, 177, 1, 501},
{1, 178, 1, 501},
{1, 183, 1, -240},
{1, 28, 1, -243},
{1, 143, 0, -251},
{1, 70, 2, 527},
{1, 38, 2, 505},
{1, 119, 2, 518},
{1, 39, 1, 520},
{1, 41, 1, -249},
{1, 54, 2, 517},
{1, 169, 1, 546},
{1, 171, 1, 547},
{1, 172, 1, 548},
{1, 174, 1, 547},
{1, 176, 1, 547},
{1, 144, 1, -251},
{1, 137, 1, -253},
{1, 139, 1, -253},
{1, 145, 1, -251},
{1, 146, 1, -251},
{1, 147, 1, -251},
{1, 138, 1, -253},
{1, 140, 1, -253},
{1, 148, 1, -251},
{1, 149, 1, -251},
{1, 203, 2, 542},
{1, 199, 2, 542},
{1, 103, 1, 537},
{1, 82, 2, 531},
{1, 80, 2, -256},
{1, 95, 2, -258},
{1, 184, 4, -240},
{1, 99, 2, 525},
{1, 102, 2, 537},
{1, 59, 0, 516},
{1, 55, 0, 526},
{1, 56, 0, 526},
{1, 57, 0, 526},
{1, 58, 0, 526},
{1, 60, 0, 516},
{1, 61, 0, 516},
{1, 62, 0, 516},
{1, 63, 0, 516},
{1, 64, 0, 516},
{1, 65, 0, 516},
{1, 66, 0, 516},
{1, 67, 0, 516},
{1, 182, 0, -284},
{1, 245, 0, 560},
{1, 4, 0, -1},
{1, 49, 0, 522},
{1, 76, 1, -366},
{1, 115, 1, -239},
{1, 179, 1, 558},
{1, 107, 1, 538},
{1, 88, 1, -367},
{1, 89, 1, -367},
{1, 235, 0, 564},
{1, 236, 0, 564},
{1, 246, 0, -246},
{1, 248, 0, 514},
{0, 0, 2, -362},
{0, 5, 1, -1},
{0, 6, 1, -1},
{1, 15, 1, 504},
{0, 19, 1, 508},
{0, 68, 1, 527},
{1, 34, 1, 504},
{1, 35, 1, 504},
{0, 121, 1, 541},
{1, 42, 0, -249},
{0, 52, 1, 517},
{0, 53, 1, 517},
{0, 120, 1, 541},
{1, 114, 1, 519},
{1, 116, 0, -377},
{1, 168, 0, 546},
{1, 29, 0, 509},
{1, 109, 2, 519},
{1, 104, 2, 538},
{1, 112, 2, 519},
{1, 108, 2, 538},
{1, 132, 0, 523},
{1, 78, 2, -366},
{1, 75, 2, 513},
{1, 77, 2, -366},
{1, 74, 2, 513},
{1, 91, 2, -367},
{1, 85, 2, 512},
{1, 90, 2, -367},
{1, 84, 2, 512},
{1, 93, 2, -367},
{1, 87, 2, 512},
{1, 92, 2, -367},
{1, 86, 2, 512},
{1, 180, 2, 559},
{1, 244, 1, -247},
{1, 221, 1, 564},
{0, 220, 1, 542},
{1, 231, 1, 564},
{1, 181, 2, 559},
{1, 191, 0, 515},
{1, 69, 2, 527},
{1, 36, 2, 504},
{1, 51, 2, 517},
{1, 113, 2, 519},
{1, 235, 1, 564},
{1, 156, 1, 546},
{1, 157, 2, 501},
{1, 17, 3, 508},
{1, 59, 1, 516},
{1, 20, 3, 508},
{1, 21, 3, 508},
{1, 48, 2, 522},
{1, 46, 2, 522},
{1, 40, 3, 500},
{0, 133, 1, 523},
{0, 134, 1, 523},
{1, 247, 2, 555},
{1, 222, 2, 564},
{1, 239, 0, 568},
{1, 237, 2, 564},
{1, 224, 2, 564},
{1, 223, 2, 564},
{1, 226, 2, 564},
{1, 225, 2, 564},
{1, 234, 2, 564},
{1, 233, 2, 564},
{1, 227, 2, 564},
{0, 195, 1, -395},
{1, 232, 2, 564},
{0, 190, 1, 515},
{1, 16, 3, 508},
{1, 22, 3, -364},
{1, 23, 3, -364},
{1, 110, 3, 519},
{1, 111, 3, 519},
{1, 45, 1, -29},
{1, 44, 1, -29},
{1, 81, 1, 531},
{1, 128, 0, 530},
{0, 97, 1, 536},
{1, 130, 0, -447},
{1, 105, 3, 538},
{1, 106, 3, 538},
{1, 122, 3, 541},
{1, 117, 2, -377},
{1, 163, 2, 548},
{1, 164, 2, 548},
{1, 165, 2, 548},
{1, 166, 2, 548},
{1, 167, 2, 548},
{1, 185, 3, -282},
{1, 18, 4, 508},
{1, 26, 4, -364},
{1, 24, 4, -364},
{1, 25, 4, -364},
{1, 30, 2, 509},
{1, 33, 2, 509},
{1, 47, 3, 522},
{1, 238, 2, 566},
{1, 198, 3, 542},
{1, 219, 3, 542},
{1, 197, 3, 542},
{1, 200, 3, 542},
{1, 201, 3, 542},
{1, 202, 3, 542},
{1, 204, 3, 542},
{1, 205, 3, 542},
{1, 206, 3, 542},
{1, 207, 3, 542},
{1, 208, 3, 542},
{1, 209, 3, 542},
{1, 230, 3, 564},
{1, 194, 0, 562},
{0, 100, 1, 537},
{1, 43, 2, -29},
{0, 101, 1, 537},
{1, 129, 1, 530},
{1, 73, 4, 513},
{1, 96, 2, 536},
{1, 131, 1, -447},
{1, 83, 4, 512},
{1, 155, 3, 549},
{1, 160, 4, 501},
{1, 31, 3, 509},
{1, 32, 3, 509},
{1, 241, 2, 568},
{1, 228, 4, 564},
{1, 211, 4, 542},
{1, 214, 4, 542},
{1, 229, 4, 564},
{1, 196, 3, -395},
{1, 193, 1, 562},
{0, 189, 1, 532},
{0, 124, 1, 543},
{1, 243, 3, 568},
{1, 242, 3, 568},
{1, 210, 5, 542},
{1, 212, 5, 542},
{1, 213, 5, 542},
{1, 215, 5, 542},
{1, 216, 5, 542},
{1, 217, 5, 542},
{1, 218, 5, 542},
{1, 123, 6, 541},
{1, 192, 6, -5},
{1, 125, 3, 543},
{1, 126, 3, 543},
{1, 240, 5, 568},
{1, 127, 6, 543},
};
static struct SXP_bases t_bases[]={{0,0,0},

{-83, 576, 602},
{-84, 576, 602},
{-93, 811, 0},
{-87, 768, 613},
{0, 826, 600},
{-91, 565, 619},
{-92, 768, 702},
{0, 804, 0},
{0, 773, 666},
{0, 773, 667},
{0, 773, 670},
{0, 768, 636},
{0, 632, 0},
{-103, 576, 629},
{0, 748, 775},
{0, 748, 604},
{-123, 768, 613},
{0, 576, 612},
{-125, 768, 702},
{-138, 773, 666},
{0, 826, 601},
{-137, 773, 666},
{-141, 578, 0},
{0, 826, 743},
{-161, 276, 2},
{-162, 826, 746},
{-163, 277, 1},
{-161, 280, 2},
{0, 768, 702},
{0, 826, 0},
{-71, 0, 0},
{0, 299, 6},
{0, 748, 606},
{-81, 0, 0},
{0, 268, 6},
{0, 768, 684},
{-122, 748, 606},
{0, 493, 25},
{-81, 748, 606},
{-81, 632, 0},
{0, 748, 701},
{0, 748, 717},
{-173, 69, 57},
{-195, 748, 606},
{-199, 493, 25},
{-202, 768, 702},
{0, 748, 608},
{0, 826, 746},
{-199, 748, 609},
{-70, 576, 711},
{0, 773, 666},
{0, 773, 666},
{0, 773, 666},
{0, 773, 666},
{0, 773, 666},
{0, 299, 6},
{0, 632, 0},
{-91, 565, 619},
{0, 773, 666},
{0, 773, 666},
{0, 773, 670},
{-103, 576, 629},
{0, 299, 6},
{-161, 280, 2},
{-161, 280, 2},
{0, 826, 0},
{0, 299, 6},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 632, 0},
{-81, 0, 0},
{-122, 748, 606},
{0, 826, 0},
{-81, 0, 0},
{-122, 748, 606},
{0, 768, 702},
{-81, 0, 0},
{-122, 748, 606},
{-71, 0, 0},
{-81, 0, 0},
{-81, 0, 0},
{-81, 748, 606},
{0, 632, 0},
{-122, 748, 606},
{0, 632, 0},
{0, 632, 0},
{0, 748, 606},
{-81, 748, 606},
{0, 748, 606},
{0, 748, 606},
{-81, 748, 606},
{-81, 748, 606},
{0, 748, 606},
{-81, 748, 606},
{-81, 748, 606},
{-81, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 768, 684},
{0, 299, 6},
{-81, 0, 0},
{-122, 748, 606},
{-141, 578, 0},
{-141, 578, 0},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{-122, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{0, 748, 606},
{-212, 821, 0},
{0, 748, 606},
{0, 748, 608},
{-195, 748, 606},
{-81, 0, 0},
{0, 748, 608},
{0, -82, 59},
{0, 585, 704},
{-86, 570, 0},
{0, 630, 765},
{0, 269, 10},
{0, 311, 10},
{-94, 566, 745},
{-99, 565, 0},
{-100, 566, 0},
{0, 565, 767},
{0, 566, 762},
{0, 713, 624},
{-119, 814, 0},
{0, 121, 29},
{0, 630, 714},
{0, 641, 0},
{-129, 274, 38},
{0, 713, 644},
{0, 337, 30},
{-132, 569, 0},
{-133, 569, 0},
{0, 585, 605},
{0, 136, 11},
{0, 713, 649},
{-140, 814, 0},
{0, 713, 621},
{0, 342, 7},
{-143, 814, 0},
{-144, 814, 0},
{-145, 814, 0},
{-146, 814, 0},
{-149, 814, 0},
{-150, 713, 658},
{0, 792, 0},
{0, 275, 1},
{-152, 713, 603},
{-153, 569, 0},
{0, 154, 7},
{0, 155, 9},
{-90, 565, 0},
{0, 156, 7},
{0, 157, 9},
{0, 585, 654},
{0, 164, 7},
{0, 165, 9},
{0, 278, 10},
{-166, 713, 658},
{0, 168, 1},
{0, 169, 1},
{0, 170, 1},
{0, 713, 623},
{-174, 569, 0},
{0, 569, 707},
{0, 176, 7},
{0, 177, 9},
{-178, 569, 0},
{0, 569, 760},
{0, 630, 744},
{-181, 348, 8},
{-182, 713, 658},
{0, 349, 26},
{-183, 713, 658},
{-184, 734, 735},
{0, 350, 26},
{-185, 791, 0},
{0, 351, 26},
{-186, 791, 0},
{-187, 734, 0},
{-188, 774, 0},
{0, 352, 26},
{-189, 774, 628},
{0, 353, 26},
{-190, 774, 647},
{0, 354, 26},
{-191, 774, 611},
{-192, 774, 686},
{-193, 774, 631},
{0, 713, 723},
{0, 713, 607},
{0, 356, 7},
{-196, 565, 0},
{0, 584, 0},
{-198, 566, 741},
{0, 200, 11},
{-201, 279, 2},
{0, 203, 11},
{0, 204, 11},
{0, 205, 1},
{0, 206, 7},
{0, 207, 9},
{-208, 348, 8},
{0, 790, 0},
{-209, 814, 0},
{-210, 713, 658},
{-211, 713, 658},
{-213, 713, 658},
{-214, 713, 603},
{0, 359, 1},
{-215, 713, 658},
{-216, 713, 658},
{0, 218, 9},
{-219, 713, 658},
{-220, 713, 658},
{-221, 713, 658},
{-222, 713, 658},
{-223, 713, 658},
{-224, 713, 658},
{-225, 713, 0},
{0, 226, 11},
{0, 227, 7},
{0, 228, 11},
{0, 361, 10},
{-229, 713, 658},
{0, 230, 7},
{0, 231, 11},
{-72, 627, 0},
{-75, 776, 0},
{-76, 796, 0},
{-77, 803, 0},
{-75, 73, 6},
{-105, -104, 10},
{-107, -106, 10},
{-109, -108, 10},
{-111, -110, 10},
{-113, -112, 10},
{-115, -114, 10},
{-127, 74, 29},
{0, 495, 25},
{0, 74, 29},
{-131, 580, 0},
{0, 789, 0},
{-160, 347, 26},
{0, 167, 25},
{0, 172, 1},
{-217, 360, 6},
{0, 281, 59},
};
static struct SXP_bases nt_bases[]={{0,0,0},
{-234, 908, 560},
{-234, 908, 562},
{-250, 0, 0},
{-248, 0, 0},
{-376, 913, 541},
{-249, -11, 23},
{-12, 895, 0},
{-377, 0, 0},
{-378, 961, 0},
{-18, 793, 854},
{-292, 793, 866},
{-23, 0, 0},
{-381, 0, 0},
{-253, 942, 538},
{-393, 498, 868},
{-395, 875, 516},
{-25, 0, 0},
{-234, 895, 851},
{-30, 895, 0},
{-45, 961, 862},
{-419, 913, 540},
{-40, 961, 859},
{-420, 0, 0},
{-443, 571, 850},
{-445, 0, 0},
{-446, 571, 850},
{-447, 0, 0},
{-470, 0, 0},
{-243, 932, 0},
{-370, 571, 912},
{-245, 0, 0},
{-4, 0, 0},
{-247, 498, 797},
{-375, 0, 0},
{-5, 0, 0},
{-254, 895, 831},
{-397, 875, 863},
{-256, 0, 0},
{-408, 875, 906},
{-415, -414, 12},
{-47, 875, 0},
{-429, 875, 0},
{-294, 0, 0},
{-459, 875, 515},
{-50, 0, 0},
{-257, 895, 894},
{-259, 875, 896},
{-53, 571, 850},
{-474, 875, 904},
{-234, 908, 833},
{-13, 961, 0},
{-14, 961, 0},
{-380, 961, 0},
{-15, 961, 0},
{-16, 961, 0},
{-22, 0, 0},
{-382, 0, 0},
{-26, -249, 24},
{-33, 961, 853},
{-35, 961, 855},
{-33, 793, 864},
{-253, 942, 539},
{-52, 0, 0},
{-472, 0, 0},
{-476, 0, 0},
{-372, 571, 537},
{-6, 0, 0},
{-385, 875, 0},
{-386, 498, 868},
{-389, 498, 868},
{-390, 498, 868},
{-391, 498, 868},
{-392, 498, 868},
{-398, 0, 0},
{-399, 0, 0},
{-400, 875, 887},
{-27, 913, 540},
{-402, 0, 0},
{-403, 875, 887},
{-257, 895, 806},
{-405, 0, 0},
{-406, 875, 887},
{-293, 0, 0},
{-409, 0, 0},
{-410, 0, 0},
{-412, 875, 907},
{-413, 0, 0},
{-416, 875, 887},
{-417, 0, 0},
{-418, 0, 0},
{-421, 875, 0},
{-46, 875, 827},
{-423, 875, 0},
{-424, 875, 0},
{-426, 875, 844},
{-428, 875, 856},
{-430, 875, 0},
{-432, 875, 869},
{-434, 875, 880},
{-436, 875, 903},
{-437, 875, 0},
{-438, 875, 0},
{-439, 875, 0},
{-440, 875, 0},
{-254, 895, 815},
{-449, 0, 0},
{-450, 0, 0},
{-451, 875, 887},
{-452, 0, 0},
{-453, 0, 0},
{-454, 498, 868},
{-455, 875, 0},
{-456, 875, 0},
{-457, 875, 0},
{-460, 875, 900},
{-49, 875, 891},
{-462, 875, 887},
{-463, 875, 0},
{-464, 875, 0},
{-465, 875, 0},
{-466, 875, 0},
{-467, 875, 0},
{-468, 875, 0},
{-469, 875, 0},
{-454, 498, 868},
{-54, 875, 891},
{-295, 875, 896},
{-471, 875, 515},
{-475, 0, 0},
{-296, 875, 896},
};
static struct SXP_item vector[]={
{22, -371},
{45, -458},
{45, -394},
{22, -401},
{22, -289},
{26, -384},
{26, -448},
{68, -246},
{7, -7},
{8, -8},
{7, -9},
{8, -10},
{6, 309},
{6, 312},
{8, 310},
{8, 313},
{6, 338},
{6, 306},
{8, 339},
{8, 307},
{3, 260},
{4, 55},
{1, -130},
{2, -130},
{5, 340},
{6, 341},
{1, 197},
{2, 279},
{2, 305},
{12, 56},
{13, 57},
{14, 58},
{15, 59},
{16, 60},
{17, 61},
{18, 62},
{19, 63},
{20, 64},
{21, 65},
{22, 66},
{23, 67},
{24, 477},
{1, 88},
{1, 135},
{27, 479},
{28, 480},
{2, 322},
{1, 134},
{5, 261},
{6, 297},
{2, 322},
{6, 267},
{7, 120},
{6, 267},
{42, -239},
{6, 267},
{6, 267},
{9, 194},
{4, 55},
{10, 358},
{10, -81},
{1, -90},
{2, -90},
{10, 262},
{2, 322},
{1, 171},
{2, 322},
{2, 322},
{25, 481},
{7, 142},
{26, 324},
{1, 97},
{4, 482},
{2, 308},
{26, 324},
{5, 300},
{6, 267},
{4, 98},
{5, 320},
{6, 321},
{10, 314},
{4, 491},
{5, 318},
{6, 271},
{2, 494},
{8, 319},
{1, 128},
{2, 322},
{26, 324},
{7, 126},
{26, 324},
{26, 324},
{2, 322},
{25, 483},
{29, 116},
{25, 488},
{1, 158},
{7, 139},
{46, 328},
{47, 329},
{30, 263},
{31, 315},
{32, 316},
{33, 317},
{34, 489},
{35, 264},
{36, 265},
{37, 68},
{1, 97},
{39, 266},
{40, 298},
{26, 324},
{5, 300},
{6, 267},
{44, 301},
{46, 328},
{26, 324},
{47, 302},
{46, 328},
{47, 329},
{48, 330},
{49, 331},
{50, 332},
{53, 303},
{54, 304},
{26, 324},
{56, 79},
{57, 69},
{58, 80},
{4, 55},
{5, 300},
{6, 267},
{25, 488},
{25, 490},
{46, 328},
{47, 329},
{25, 490},
{49, 331},
{31, 315},
{32, 316},
{33, 317},
{34, 489},
{31, 315},
{32, 316},
{33, 317},
{34, 489},
{1, 85},
{4, 55},
{6, 267},
{24, 477},
{25, 78},
{44, 301},
{27, 479},
{28, 480},
{47, 302},
{7, 175},
{1, 124},
{5, 261},
{6, 297},
{5, 323},
{53, 303},
{54, 304},
{10, 262},
{56, 79},
{6, 267},
{58, 80},
{2, 322},
{24, 477},
{26, 343},
{44, 301},
{27, 479},
{28, 480},
{47, 302},
{46, 328},
{47, 329},
{48, 330},
{49, 331},
{25, 478},
{53, 303},
{54, 304},
{5, 323},
{56, 79},
{30, 263},
{58, 80},
{26, 344},
{1, 159},
{1, 180},
{35, 264},
{36, 265},
{37, 68},
{26, 324},
{39, 266},
{40, 298},
{29, 355},
{5, 300},
{41, 325},
{42, 272},
{43, 326},
{44, 327},
{45, 273},
{46, 328},
{47, 329},
{48, 330},
{49, 331},
{50, 332},
{51, 333},
{52, 334},
{1, 89},
{7, 179},
{57, 69},
{7, 102},
{29, 357},
{26, 270},
{29, 346},
{25, 78},
{7, 101},
{29, 346},
{42, 272},
{43, 326},
{44, 327},
{5, 323},
{45, 273},
{6, 336},
{6, 73},
{10, 314},
{16, 60},
{17, 61},
{18, 62},
{19, 63},
{20, 64},
{21, 65},
{22, 66},
{23, 67},
{44, 301},
{4, 147},
{2, 345},
{47, 302},
{5, 323},
{7, 496},
{8, 348},
{7, 151},
{4, 484},
{53, 303},
{54, 304},
{30, 263},
{56, 79},
{29, 74},
{58, 80},
{4, 486},
{35, 264},
{36, 265},
{37, 68},
{7, 95},
{39, 266},
{40, 298},
{25, 148},
{41, 325},
{42, 272},
{43, 326},
{44, 327},
{45, 273},
{6, 117},
{25, 485},
{8, 335},
{12, 56},
{13, 57},
{14, 58},
{15, 59},
{6, 267},
{25, 487},
{25, 96},
{57, 69},
{5, 261},
{6, 297},
{42, 272},
{1, -362},
{2, -1},
{3, -2},
{4, -3},
{5, -232},
{6, -233},
{7, -232},
{8, -233},
{45, -373},
{37, -258},
{17, -422},
{39, -258},
{25, 78},
{54, -240},
{55, -282},
{56, -283},
{57, -284},
{25, 481},
{59, -285},
{60, -286},
{3, -28},
{62, -242},
{63, -287},
{4, -17},
{4, -17},
{4, -19},
{45, -387},
{17, -425},
{11, -404},
{4, -36},
{67, -374},
{14, -364},
{4, -41},
{53, 118},
{4, -17},
{55, 492},
{4, -19},
{20, -255},
{22, -442},
{17, -427},
{53, 303},
{54, 304},
{45, -387},
{56, 79},
{27, -29},
{58, 80},
{29, -238},
{18, -396},
{67, -374},
{68, -246},
{69, -441},
{70, -247},
{17, -431},
{54, -240},
{55, -282},
{56, -283},
{57, -284},
{41, -444},
{59, -285},
{60, -286},
{61, -241},
{62, -242},
{63, -287},
{17, -433},
{67, -374},
{68, -246},
{69, -388},
{70, -247},
{49, -31},
{50, -32},
{49, -34},
{52, -18},
{51, -20},
{52, -21},
{49, -37},
{50, -38},
{51, -39},
{49, -42},
{50, -43},
{51, -44},
{19, -235},
{61, -241},
{52, -18},
{51, -20},
{52, -21},
{11, -363},
{17, -435},
{17, -473},
{14, -364},
{17, -407},
{17, -411},
{61, -292},
{31, -366},
{19, -235},
{20, -236},
{21, -365},
{22, -237},
{36, -367},
{45, -397},
{39, -51},
{22, -369},
{35, -48},
{45, -460},
{29, -238},
{70, -247},
{31, -366},
{0, 0},
{45, -461},
{67, -374},
{68, -246},
{36, -367},
{70, -247},
{4, -251},
{15, -244},
{16, -288},
{41, -368},
{42, -239},
{0, 0},
{44, -365},
{11, -383},
{41, -368},
{42, -239},
{14, -364},
{15, -234},
{16, -234},
{0, 0},
{0, 0},
{19, -235},
{20, -252},
{31, -366},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{36, -367},
{0, 0},
{0, 0},
{29, -238},
{30, -234},
{31, -366},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{36, -367},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{45, -379},
{0, 0},
{0, 0},
{48, -251},
{0, 0},
{0, 0},
{51, -251},
{52, -24},
{0, 0},
{54, -240},
{55, -282},
{56, -283},
{57, -284},
{0, 0},
{59, -285},
{60, -286},
{61, -290},
{62, -291},
{63, -287},
{45, -379},
{0, 0},
{0, 0},
{67, -374},
{68, -246},
{0, 0},
{70, -247},
{0, 0},
{0, 0},
{54, -240},
{55, -282},
{56, -283},
{57, -284},
{0, 0},
{59, -285},
{60, -286},
{61, -290},
{62, -291},
{63, -287},
{0, 0},
{0, 0},
{0, 0},
{67, -374},
{68, -246},
{0, 0},
{70, -247},
};

static  SXBA_ELT SXPBA_kt1
#if SXBITS_PER_LONG==32
 [10] = {267, 0XFFFDFEEE, 0XFFFFFFFB, 0XFFFDB7FF, 0XFFFFF7FF, 0XFDFAFFF5, 0XFCFF24FF, 
0XE4BFFFFF, 0X000C7F7F, 0X00000544, }
#else
 [6] = {267, 0XFFFFFFFBFFFDFEEE, 0XFFFFF7FFFFFDB7FF, 0XFCFF24FFFDFAFFF5, 
0X000C7F7FE4BFFFFF, 0X0000000000000544, }
#endif
/* End SXPBA_kt1 */;

static  SXBA_ELT SXPBA_kt2
#if SXBITS_PER_LONG==32
 [10] = {267, 0XFFFDFFEE, 0XFFFFFFFB, 0XFFCDB7FF, 0XFFFFF7FF, 0XFDFEFFF5, 0XFCE324FF, 
0XE0BFFFFF, 0X000C7F7F, 0X00000440, }
#else
 [6] = {267, 0XFFFFFFFBFFFDFFEE, 0XFFFFF7FFFFCDB7FF, 0XFCE324FFFDFEFFF5, 
0X000C7F7FE0BFFFFF, 0X0000000000000440, }
#endif
/* End SXPBA_kt2 */;

static  SXBA_ELT SXPBA_kt10
#if SXBITS_PER_LONG==32
 [10] = {267, 0XFFFDFEEE, 0XFFFFFFFB, 0XFFCDB7FF, 0XFFFFF7FF, 0XFDFAFFF5, 0XFCE324FF, 
0XE0BFFFFF, 0X000C7F7F, 0X00000440, }
#else
 [6] = {267, 0XFFFFFFFBFFFDFEEE, 0XFFFFF7FFFFCDB7FF, 0XFCE324FFFDFAFFF5, 
0X000C7F7FE0BFFFFF, 0X0000000000000440, }
#endif
/* End SXPBA_kt10 */;

static  SXBA_ELT SXPBA_kt11
#if SXBITS_PER_LONG==32
 [10] = {267, 0XFFFDFEEE, 0XFFFFFFFB, 0XFFCDB7FF, 0XFFFFF7FF, 0XFFFAFFF5, 0XFCE324FF, 
0XE3FFFFFF, 0X002EFF7F, 0X00000440, }
#else
 [6] = {267, 0XFFFFFFFBFFFDFEEE, 0XFFFFF7FFFFCDB7FF, 0XFCE324FFFFFAFFF5, 
0X002EFF7FE3FFFFFF, 0X0000000000000440, }
#endif
/* End SXPBA_kt11 */;

static  SXBA_ELT SXPBA_kt38
#if SXBITS_PER_LONG==32
 [10] = {267, 0X80544E66, 0X7CFC0000, 0X00080000, 0X00000000, 0X00080000, 0X00000000, 
0X00000000, 0X00000000, 0X00000400, }
#else
 [6] = {267, 0X7CFC000080544E66, 0X0000000000080000, 0X0000000000080000, 
0X0000000000000000, 0X0000000000000400, }
#endif
/* End SXPBA_kt38 */;
static SXBA SXPBM_trans[]={NULL,
&SXPBA_kt1[0],
&SXPBA_kt2[0],
&SXPBA_kt10[0],
&SXPBA_kt11[0],
&SXPBA_kt38[0],
};
static int P_lrgl[]={
3,0,-2,2,0,0,0,0,
2,-2,1,0,0,0,0,0,
5,-1,1,2,3,4,0,0,
5,0,-1,1,2,3,0,0,
5,0,-1,2,3,4,0,0,
4,0,2,3,4,0,0,0,
7,0,-1,-1,1,2,3,4,
5,-1,0,1,2,3,0,0,
4,1,2,3,4,0,0,0,
4,-1,2,3,4,0,0,0,
5,-1,-1,1,2,3,0,0,
};
static int *P_lregle[]={NULL,
&P_lrgl[0],
&P_lrgl[8],
&P_lrgl[16],
&P_lrgl[24],
&P_lrgl[32],
&P_lrgl[40],
&P_lrgl[48],
&P_lrgl[56],
&P_lrgl[64],
&P_lrgl[72],
&P_lrgl[80],
};
static int P_right_ctxt_head[]={0,
2,1,1,1,2,2,1,1,1,2,1,};
static int P_param_ref[]={
1,-2,
0,-1,1,
0,-1,1,
-2,1,
1,-2,
1,
-2,-3,1,
-1,0,1,
0,1,
0,1,-1,
0,1,-1,-2,
-1,1,
};
static struct SXP_local_mess SXP_local_mess[]={{0},
{2,"%sSpeling eror: \"%s\" is replaced by \"%s\".",&P_param_ref[0]},
{3,"%sSpeling eror: \"%s\" is replaced by \"%s\" before \"%s\".",&P_param_ref[2]},
{3,"%s\"%s\" is replaced by \"%s\" before \"%s\".",&P_param_ref[5]},
{2,"%s\"%s\" is inserted before \"%s\".",&P_param_ref[8]},
{2,"%s\"%s\" is replaced by \"%s\".",&P_param_ref[10]},
{1,"%s\"%s\" is erased.",&P_param_ref[12]},
{3,"%s\"%s %s\" is inserted before \"%s\".",&P_param_ref[13]},
{3,"%s\"%s\" is inserted before \"%s %s\".",&P_param_ref[16]},
{2,"%s\"%s\" is erased before \"%s\".",&P_param_ref[19]},
{3,"%s\"%s %s\" is replaced by \"%s\".",&P_param_ref[21]},
{4,"%s\"%s\" before \"%s\" is replaced by \"%s %s\".",&P_param_ref[24]},
{2,"%s\"%s\" is inserted before \"%s\".",&P_param_ref[28]},
};
static int P_no_delete[]={
12,24,27,28,30,35,36,37,38,39,40,57,58};
static int P_no_insert[]={
41,5,8,10,12,13,14,16,17,18,19,20,21,22,23,24,26,30,33,34,35,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58};
static char *P_global_mess[]={
"%sOnly \"%s\" is possible here.",
"%sOnly \"%s\" or \"%s\" is possible here.",
"%sOnly \"%s\" or \"%s\" or \"%s\" is possible here.",
"%sOnly \"%s\" or \"%s\" or \"%s\" or \"%s\" is possible here.",
"%sOnly \"%s\" or \"%s\" or \"%s\" or \"%s\" or \"%s\" is possible here.",
"%sCannot recover...",
"%s... Syntactic analysis restarts on \"%s\" \"%s\".",
"EOF",
"%s... Analysis aborted.",
};
static int PER_tset[]={
5,1,2,10,11,38};

static char *err_titles[SXSEVERITIES]={
"\000",
"\001Warning (ppc.anal):\t",
"\002Error (ppc.anal):\t",
};
extern SXBOOLEAN sxprecovery();

static unsigned char S_char_to_simple_class[]={
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,3,4,4,4,4,4,4,4,4,5,6,4,7,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,5,8,9,10,4,11,12,13,14,15,16,17,18,19,20,
21,22,23,23,23,23,23,23,23,24,24,25,26,27,28,29,30,4,31,31,31,31,32,31,33,
33,33,33,33,34,33,33,33,33,33,33,33,33,33,33,33,35,33,33,36,37,38,39,33,4,
40,40,40,40,41,40,42,42,42,42,42,43,42,42,42,42,42,42,42,42,42,42,42,44,42,
42,45,46,47,48,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,};
static SXSTMI SXS_transition[]={0,
0x0,0x403b,0x0,0x0,0x2402,0x2c02,0x9c04,0x2c03,0x2c04,0x9003,0x4c2a,0x2405,
0x2c06,0x4406,0x4407,0x4405,0x2c07,0x4402,0x2c08,0x2c09,0x2c0a,0x2c0b,0x2c0c,0x2c0c,
0x441d,0x4401,0x2c0d,0x2c0e,0x2c0f,0x4434,0x2c10,0x2c10,0x2c10,0x2c10,0x2c10,0x4408,
0x0,0x4409,0x4431,0x2c11,0x2c11,0x2c11,0x2c11,0x2c11,0x440a,0x2412,0x440b,0x4c36,

0x0,0x9005,0x0,0x0,0x1402,0x1c02,0x9c04,0x9005,0x9005,0x9003,0x9005,0x9005,
0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x7014,0x9005,0x9005,0x9005,
0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,
0x0,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,

0x0,0x0,0x0,0x0,0x4036,0x4036,0x4036,0x4036,0x4036,0x4036,0x0,0x4036,
0x4036,0x4036,0x0,0x4036,0x4036,0x0,0x4036,0x4036,0x4036,0x4036,0x4036,0x4036,
0x0,0x0,0x0,0x4c2e,0x0,0x0,0x4036,0x4036,0x4036,0x4036,0x4036,0x0,
0x0,0x0,0x0,0x4036,0x4036,0x4036,0x4036,0x4036,0x0,0x0,0x0,0x4036,

0x0,0x0,0x1c04,0x1c04,0x1c04,0x0,0x1c04,0x1c04,0x4c38,0x1c04,0x1c04,0x1c04,
0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,
0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,
0x2c16,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,0x1c04,

0x0,0x0,0x0,0x0,0x402f,0x402f,0x402f,0x402f,0x402f,0x402f,0x0,0x4432,
0x402f,0x402f,0x0,0x402f,0x402f,0x0,0x402f,0x402f,0x402f,0x402f,0x402f,0x402f,
0x0,0x0,0x0,0x402f,0x0,0x0,0x402f,0x402f,0x402f,0x402f,0x402f,0x0,
0x0,0x0,0x0,0x402f,0x402f,0x402f,0x402f,0x402f,0x0,0x0,0x0,0x402f,

0x0,0x0,0x2c17,0x2c17,0x2c17,0x0,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,
0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,
0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,
0x2c18,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,

0x0,0x0,0x0,0x0,0x9006,0x9006,0x9006,0x9006,0x9006,0x9006,0x0,0x9006,
0x9006,0x9006,0x0,0x9006,0x4c35,0x0,0x9006,0x9006,0x9006,0x9006,0x9006,0x9006,
0x0,0x0,0x0,0x9006,0x0,0x0,0x9006,0x9006,0x9006,0x9006,0x9006,0x0,
0x0,0x0,0x0,0x9006,0x9006,0x9006,0x9006,0x9006,0x0,0x0,0x0,0x9006,

0x0,0x0,0x0,0x0,0x9007,0x9007,0x9007,0x9007,0x9007,0x9007,0x0,0x9007,
0x9007,0x9007,0x0,0x9007,0x9007,0x0,0x4c35,0x9007,0x9007,0x9007,0x9007,0x9007,
0x0,0x0,0x0,0x9007,0x4c37,0x0,0x9007,0x9007,0x9007,0x9007,0x9007,0x0,
0x0,0x0,0x0,0x9007,0x9007,0x9007,0x9007,0x9007,0x0,0x0,0x0,0x9007,

0x0,0x0,0x0,0x0,0x4037,0x4037,0x4037,0x0,0x0,0x4037,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4037,0x2c19,0x2c19,0x2c19,
0x0,0x0,0x0,0x0,0x0,0x0,0x4037,0x4037,0x4037,0x4037,0x4037,0x0,
0x0,0x0,0x0,0x4037,0x4037,0x4037,0x4037,0x4037,0x0,0x0,0x0,0x0,

0x0,0x0,0x0,0x0,0x402a,0x402a,0x402a,0x402a,0x402a,0x402a,0x0,0x402a,
0x402a,0x402a,0x0,0x2c1a,0x402a,0x0,0x402a,0x402a,0x402a,0x402a,0x402a,0x402a,
0x0,0x0,0x0,0x402a,0x0,0x0,0x402a,0x402a,0x402a,0x402a,0x402a,0x0,
0x0,0x0,0x0,0x402a,0x402a,0x402a,0x402a,0x402a,0x0,0x0,0x0,0x402a,

0x0,0x0,0x0,0x0,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x4038,0x4038,
0x0,0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x2c19,0x4038,0x2c1b,0x2c1b,0x2c1c,
0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x9c08,0x0,0x4c38,0x9c09,0x4038,
0x0,0x4038,0x4038,0x0,0x2c1d,0x0,0x9c0a,0x2c1e,0x0,0x4038,0x4038,0x0,

0x0,0x0,0x0,0x0,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x4038,0x4038,
0x0,0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x2c19,0x4038,0x1c0c,0x1c0c,0x1c0c,
0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x9c08,0x0,0x4c38,0x0,0x4038,
0x0,0x4038,0x4038,0x0,0x2c1d,0x0,0x9c0a,0x0,0x0,0x4038,0x4038,0x0,

0x0,0x0,0x0,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x4029,0x0,0x4029,
0x4029,0x4029,0x0,0x4029,0x4029,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x4029,
0x0,0x0,0x4c2d,0x4c29,0x0,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x0,
0x0,0x0,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x0,0x0,0x0,0x4029,

0x0,0x0,0x0,0x0,0x401a,0x401a,0x401a,0x401a,0x401a,0x401a,0x0,0x401a,
0x401a,0x401a,0x0,0x401a,0x401a,0x0,0x401a,0x401a,0x401a,0x401a,0x401a,0x401a,
0x0,0x0,0x0,0x4c2e,0x0,0x0,0x401a,0x401a,0x401a,0x401a,0x401a,0x0,
0x0,0x0,0x0,0x401a,0x401a,0x401a,0x401a,0x401a,0x401a,0x0,0x0,0x401a,

0x0,0x0,0x0,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x4029,0x0,0x4029,
0x4029,0x4029,0x0,0x4029,0x4029,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x4029,
0x0,0x0,0x0,0x4c29,0x4c2d,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x0,
0x0,0x0,0x0,0x4029,0x4029,0x4029,0x4029,0x4029,0x0,0x0,0x0,0x4029,

0x0,0x0,0x0,0x0,0x9001,0x9001,0x9001,0x9001,0x0,0x9001,0x9001,0x9001,
0x0,0x9001,0x9001,0x9001,0x9001,0x9001,0x9001,0x9001,0x9001,0x1c10,0x1c10,0x1c10,
0x9001,0x9001,0x9001,0x9001,0x9001,0x9001,0x1c10,0x1c10,0x1c10,0x1c10,0x1c10,0x9001,
0x0,0x9001,0x9001,0x1c10,0x1c10,0x1c10,0x1c10,0x1c10,0x9001,0x9001,0x9001,0x0,

0x0,0x0,0x0,0x0,0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,
0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x2c10,0x2c10,0x2c10,
0x9002,0x9002,0x9002,0x9002,0x9002,0x9002,0x2c10,0x2c10,0x2c10,0x2c10,0x2c10,0x9002,
0x0,0x9002,0x9002,0x1c11,0x1c11,0x1c11,0x1c11,0x1c11,0x9002,0x9002,0x9002,0x9002,

0x0,0x0,0x0,0x0,0x4030,0x4030,0x4030,0x4030,0x4030,0x4030,0x0,0x4030,
0x4030,0x4030,0x0,0x4030,0x4030,0x0,0x4030,0x4030,0x4030,0x4030,0x4030,0x4030,
0x0,0x0,0x0,0x4030,0x0,0x0,0x4030,0x4030,0x4030,0x4030,0x4030,0x0,
0x0,0x0,0x0,0x4030,0x4030,0x4030,0x4030,0x4030,0x0,0x4433,0x0,0x4030,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x2c1a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x1,0x0,0x0,0x0,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x0,0x9005,
0x9005,0x9005,0x0,0x2c13,0x9005,0x0,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,
0x0,0x0,0x0,0x9005,0x0,0x0,0x9005,0x9005,0x9005,0x9005,0x9005,0x0,
0x0,0x0,0x0,0x9005,0x9005,0x9005,0x9005,0x9005,0x0,0x0,0x0,0x9005,

0x0,0x9005,0x0,0x0,0x1c15,0x9c04,0x9c04,0x9005,0x9005,0x2c1f,0x9005,0x9005,
0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x7014,0x9005,0x9005,0x9005,
0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,
0x0,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,0x9005,

0x0,0x0,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,
0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,
0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,
0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,0x2c04,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x4c38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2c20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x2c17,0x2c17,0x2c17,0x2c06,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,
0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c21,0x2c21,0x2c17,
0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,
0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,0x2c17,

0x0,0x0,0x0,0x0,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x4038,0x4038,
0x0,0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x1c19,0x1c19,0x1c19,
0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x9c08,0x0,0x0,0x0,0x4038,
0x0,0x4038,0x4038,0x0,0x2c1d,0x0,0x0,0x0,0x0,0x4038,0x4038,0x0,

0x0,0x0,0x900b,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,
0x1c1a,0x1c1a,0x1c1a,0x2c22,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,
0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,
0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,0x1c1a,

0x0,0x0,0x0,0x0,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x4038,0x4038,
0x0,0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x2c19,0x4038,0x1c1b,0x1c1b,0x2c1c,
0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x9c08,0x0,0x4c38,0x0,0x4038,
0x0,0x4038,0x4038,0x0,0x2c1d,0x0,0x9c0a,0x0,0x0,0x4038,0x4038,0x0,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c19,0x0,0x1c1c,0x1c1c,0x1c1c,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9c08,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x2c1d,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x2c23,0x0,0x2c23,0x0,0x0,0x2c24,0x2c24,0x2c24,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c25,0x2c25,0x2c25,
0x0,0x0,0x0,0x0,0x0,0x0,0x2c25,0x2c25,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x2c25,0x2c25,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x900c,0x1c1f,0x1c1f,0x9c04,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,
0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,
0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,
0x2c26,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,0x1c1f,

0x0,0x0,0x0,0x0,0x0,0x2c17,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x4c38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c27,0x2c27,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2c20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x900b,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,
0x2c1a,0x2c1a,0x2c1a,0x1c22,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x9c04,0x2c1a,0x2c1a,0x2c1a,
0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,
0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,0x2c1a,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c24,0x2c24,0x2c24,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

0x0,0x0,0x0,0x0,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x4038,0x4038,
0x0,0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x1c24,0x1c24,0x1c24,
0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x0,0x0,0x0,0x0,0x4038,
0x0,0x4038,0x4038,0x0,0x0,0x0,0x0,0x0,0x0,0x4038,0x4038,0x0,

0x0,0x0,0x0,0x0,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x4038,0x4038,
0x0,0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x0,0x4038,0x1c25,0x1c25,0x1c25,
0x4038,0x4038,0x4038,0x4038,0x4038,0x4038,0x1c25,0x1c25,0x0,0x4c38,0x0,0x4038,
0x0,0x4038,0x4038,0x1c25,0x1c25,0x0,0x9c0a,0x0,0x0,0x4038,0x4038,0x0,

0x0,0x0,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,
0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,
0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,
0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,0x2c1f,

0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x4c38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c17,0x2c17,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2c20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

};
static SXSTMI *S_transition_matrix[]={NULL,
&SXS_transition[0],
&SXS_transition[48],
&SXS_transition[96],
&SXS_transition[144],
&SXS_transition[192],
&SXS_transition[240],
&SXS_transition[288],
&SXS_transition[336],
&SXS_transition[384],
&SXS_transition[432],
&SXS_transition[480],
&SXS_transition[528],
&SXS_transition[576],
&SXS_transition[624],
&SXS_transition[672],
&SXS_transition[720],
&SXS_transition[768],
&SXS_transition[816],
&SXS_transition[864],
&SXS_transition[912],
&SXS_transition[960],
&SXS_transition[1008],
&SXS_transition[1056],
&SXS_transition[1104],
&SXS_transition[1152],
&SXS_transition[1200],
&SXS_transition[1248],
&SXS_transition[1296],
&SXS_transition[1344],
&SXS_transition[1392],
&SXS_transition[1440],
&SXS_transition[1488],
&SXS_transition[1536],
&SXS_transition[1584],
&SXS_transition[1632],
&SXS_transition[1680],
&SXS_transition[1728],
&SXS_transition[1776],
&SXS_transition[1824],
};
static struct SXS_action_or_prdct_code SXS_action_or_prdct_code[]={{0,0,0,0,0},
{0x6019,2,0,0,0},
{0x5019,1,0,0,0},
{0x2c1f,9,10,1,0},
{0x2015,10,0,1,0},
{0x4000,5,0,1,0},
{0x402b,5,0,1,0},
{0x402c,5,0,1,0},
{0x201d,2,0,1,0},
{0x201e,2,0,1,0},
{0x4038,1,0,1,0},
{0x900d,9,92,1,0},
{0x900e,9,92,1,0},
{0x241a,9,48,1,0},
{0x241f,9,48,1,0},
};
static char *S_adrp[]={0,
";",
",",
"typedef",
"%TYPE",
"*",
"(",
")",
"[",
"]",
"{",
"}",
"auto",
"extern",
"register",
"static",
"char",
"double",
"float",
"int",
"long",
"short",
"unsigned",
"void",
"enum",
"%NAME",
"=",
"struct",
"union",
":",
"while",
"break",
"continue",
"return",
"goto",
"case",
"default",
"do",
"else",
"for",
"switch",
"%RELOP",
"%DIVOP",
"+",
"-",
"%SHIFTOP",
"%EQUOP",
"&",
"|",
"^",
"&&",
"||",
"?",
"%INCOP",
"%UNOP",
"%STROP",
"%CONST",
"if",
"sizeof",
"End Of File",
};
static int S_is_a_keyword[]={
29,3,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28,30,31,32,33,34,35,36,37,38,39,40,57,58};
static int S_is_a_generic_terminal[]={
10,4,25,41,42,45,46,53,54,55,56};
static int S_lrgl[]={
5,-1,0,1,2,3,
4,1,2,3,4,0,
5,-1,1,2,3,4,
};
static int *S_lregle[]={NULL,
&S_lrgl[0],
&S_lrgl[6],
&S_lrgl[12],
};
static int S_param_ref[]={
-1,0,
0,
0,-1,
};
static struct SXS_local_mess SXS_local_mess[]={{0},
{2,"%sA character \"%s\" is inserted before \"%s\".",&S_param_ref[0]},
{1,"%sThe invalid character \"%s\" is erased.",&S_param_ref[2]},
{2,"%sThe invalid character \"%s\" is replaced by \"%s\".",&S_param_ref[3]},
};
static int S_no_delete[]={
0};
static int S_no_insert[]={
35,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,42,47,95};
static char *S_global_mess[]={0,
"%s\"%s\" is erased.",
"%s",
"\\n",
"EOF",
"%sLexical analysis stops.",
};
extern int SCANACT();
extern int sxscan_it();
extern SXBOOLEAN sxsrecovery();
static int check_keyword();
static struct SXPP_schema SXPP_schema[]={
{6,0},{7,1},{8,0},{7,9},{6,0},{7,1},{8,0},{8,0},{6,0},{8,0},{6,0},{1,1},
{6,0},{8,0},{6,0},{1,4},{6,0},{8,0},{6,0},{6,1},{8,0},{6,0},{6,2},{3,1},
{6,0},{8,0},{6,3},{3,1},{6,0},{3,1},{6,0},{8,0},{6,3},{3,1},{6,0},{3,1},
{6,5},{6,0},{8,0},{6,3},{3,1},{6,0},{3,1},{4,1},{6,0},{8,0},{6,0},{6,6},
{6,0},{6,7},{8,0},{6,0},{6,8},{6,0},{6,9},{8,0},{6,3},{3,1},{6,0},{6,6},
{6,0},{6,7},{8,0},{6,3},{3,1},{6,0},{6,8},{6,0},{6,9},{8,0},{6,3},{3,1},
{6,0},{3,1},{6,6},{6,0},{6,7},{8,0},{6,0},{3,1},{6,0},{8,0},{6,5},{6,0},
{8,0},{6,6},{6,0},{6,7},{8,0},{6,0},{3,1},{4,1},{6,0},{6,1},{8,0},{6,0},
{6,0},{8,0},{6,0},{7,1},{6,0},{6,0},{8,0},{7,1},{6,10},{1,1},{7,9},{6,0},
{1,2},{7,9},{6,0},{7,1},{6,11},{8,0},{6,0},{3,1},{6,0},{6,1},{8,0},{6,0},
{5,0},{6,0},{6,1},{8,0},{6,0},{5,0},{6,0},{3,1},{4,1},{6,0},{6,1},{8,0},
{8,1},{6,0},{3,1},{6,0},{3,1},{6,0},{8,0},{6,12},{8,0},{6,13},{8,0},{6,14},
{8,0},{6,15},{8,0},{6,16},{8,0},{6,17},{8,0},{6,18},{8,0},{6,19},{8,0},{6,20},
{8,0},{6,21},{8,0},{6,22},{8,0},{6,23},{8,0},{6,0},{3,1},{6,10},{6,0},{6,0},
{6,11},{8,0},{6,24},{3,1},{6,0},{8,0},{6,24},{8,0},{6,0},{6,26},{6,0},{8,0},
{6,0},{3,1},{6,10},{5,4},{6,0},{6,0},{5,0},{6,11},{8,0},{6,27},{3,1},{6,0},
{8,0},{6,28},{3,1},{6,0},{8,0},{6,27},{8,0},{6,28},{8,0},{6,0},{6,1},{5,0},
{6,0},{8,0},{6,0},{3,1},{4,1},{6,0},{8,0},{6,0},{3,1},{6,29},{3,1},{6,0},
{8,0},{6,29},{3,1},{6,0},{8,0},{6,0},{3,1},{6,0},{3,1},{6,7},{8,0},{6,0},
{6,7},{8,0},{6,0},{6,6},{8,0},{6,0},{3,1},{6,26},{3,1},{6,0},{8,0},{6,0},
{3,1},{6,26},{3,1},{6,0},{6,10},{6,0},{6,0},{6,11},{8,0},{6,10},{6,0},{6,0},
{6,11},{8,0},{6,0},{6,2},{5,0},{6,0},{6,10},{6,0},{6,0},{6,11},{8,0},{6,2},
{8,0},{6,1},{8,0},{6,0},{5,0},{6,0},{8,0},{6,0},{1,2},{5,0},{6,0},{8,0},
{5,2},{6,0},{8,0},{6,0},{1,2},{5,2},{6,0},{8,0},{5,-2},{6,10},{1,1},{5,0},
{6,0},{1,2},{5,0},{6,0},{5,-2},{6,11},{8,0},{6,0},{5,4},{6,0},{8,0},{6,0},
{1,1},{5,4},{6,0},{8,0},{6,0},{1,1},{5,4},{6,0},{5,0},{6,30},{6,0},{6,1},
{8,0},{6,31},{6,0},{6,1},{8,0},{6,32},{6,0},{6,1},{8,0},{6,33},{6,0},{6,1},
{8,0},{6,33},{3,1},{6,0},{6,1},{8,0},{6,34},{3,1},{6,0},{6,1},{8,0},{6,0},
{5,2},{6,0},{8,0},{7,1},{6,0},{6,29},{5,-1},{3,1},{8,0},{5,-2},{6,35},{3,1},
{6,0},{6,29},{5,0},{8,0},{5,-2},{6,36},{6,0},{6,29},{5,0},{8,0},{6,37},{8,0},
{6,0},{5,4},{6,0},{5,0},{6,38},{3,1},{6,0},{6,0},{8,0},{6,0},{5,4},{6,0},
{5,0},{6,38},{8,0},{6,30},{6,0},{8,0},{6,39},{6,0},{8,0},{6,40},{6,0},{8,0},
{6,6},{3,1},{6,0},{6,1},{6,0},{6,1},{6,0},{3,1},{6,7},{8,0},{3,1},{6,0},
{8,0},{6,0},{3,1},{6,43},{3,1},{6,0},{8,0},{6,0},{3,1},{6,44},{3,1},{6,0},
{8,0},{6,0},{3,1},{6,5},{3,1},{6,0},{8,0},{6,0},{3,1},{6,47},{3,1},{6,0},
{8,0},{6,0},{3,1},{6,48},{3,1},{6,0},{8,0},{6,0},{3,1},{6,49},{3,1},{6,0},
{8,0},{6,0},{3,1},{6,50},{3,1},{6,0},{8,0},{6,0},{3,1},{6,51},{3,1},{6,0},
{8,0},{6,0},{3,1},{6,5},{6,0},{6,26},{3,1},{6,0},{8,0},{6,0},{3,1},{6,0},
{6,26},{3,1},{6,0},{8,0},{6,0},{3,1},{6,43},{6,0},{6,26},{3,1},{6,0},{8,0},
{6,0},{3,1},{6,44},{6,0},{6,26},{3,1},{6,0},{8,0},{6,0},{3,1},{6,47},{6,0},
{6,26},{3,1},{6,0},{8,0},{6,0},{3,1},{6,48},{6,0},{6,26},{3,1},{6,0},{8,0},
{6,0},{3,1},{6,49},{6,0},{6,26},{3,1},{6,0},{8,0},{6,0},{3,1},{6,52},{3,1},
{6,0},{3,1},{6,29},{3,1},{6,0},{8,0},{6,47},{6,0},{8,0},{6,44},{6,0},{8,0},
{6,6},{6,0},{6,7},{3,1},{6,0},{8,0},{6,0},{6,0},{6,0},{8,0},{6,6},{6,0},
{6,7},{6,6},{6,0},{6,7},{8,0},{6,57},{8,0},{6,58},{8,0},{6,6},{3,1},{6,0},
{3,1},{6,7},{8,0},};

static struct SXPP_schema *PP_tables[]={
&SXPP_schema[0],
&SXPP_schema[0],
&SXPP_schema[3],
&SXPP_schema[7],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[10],
&SXPP_schema[14],
&SXPP_schema[8],
&SXPP_schema[14],
&SXPP_schema[14],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[18],
&SXPP_schema[21],
&SXPP_schema[26],
&SXPP_schema[32],
&SXPP_schema[8],
&SXPP_schema[39],
&SXPP_schema[39],
&SXPP_schema[46],
&SXPP_schema[51],
&SXPP_schema[56],
&SXPP_schema[63],
&SXPP_schema[70],
&SXPP_schema[8],
&SXPP_schema[78],
&SXPP_schema[8],
&SXPP_schema[82],
&SXPP_schema[46],
&SXPP_schema[51],
&SXPP_schema[85],
&SXPP_schema[18],
&SXPP_schema[18],
&SXPP_schema[89],
&SXPP_schema[95],
&SXPP_schema[98],
&SXPP_schema[95],
&SXPP_schema[103],
&SXPP_schema[78],
&SXPP_schema[7],
&SXPP_schema[114],
&SXPP_schema[18],
&SXPP_schema[18],
&SXPP_schema[119],
&SXPP_schema[124],
&SXPP_schema[119],
&SXPP_schema[132],
&SXPP_schema[78],
&SXPP_schema[78],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[133],
&SXPP_schema[139],
&SXPP_schema[141],
&SXPP_schema[143],
&SXPP_schema[145],
&SXPP_schema[8],
&SXPP_schema[147],
&SXPP_schema[149],
&SXPP_schema[151],
&SXPP_schema[153],
&SXPP_schema[155],
&SXPP_schema[157],
&SXPP_schema[159],
&SXPP_schema[161],
&SXPP_schema[8],
&SXPP_schema[78],
&SXPP_schema[133],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[163],
&SXPP_schema[170],
&SXPP_schema[170],
&SXPP_schema[174],
&SXPP_schema[170],
&SXPP_schema[170],
&SXPP_schema[8],
&SXPP_schema[21],
&SXPP_schema[8],
&SXPP_schema[176],
&SXPP_schema[180],
&SXPP_schema[189],
&SXPP_schema[189],
&SXPP_schema[193],
&SXPP_schema[193],
&SXPP_schema[197],
&SXPP_schema[199],
&SXPP_schema[189],
&SXPP_schema[189],
&SXPP_schema[193],
&SXPP_schema[193],
&SXPP_schema[8],
&SXPP_schema[201],
&SXPP_schema[206],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[21],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[211],
&SXPP_schema[217],
&SXPP_schema[82],
&SXPP_schema[46],
&SXPP_schema[51],
&SXPP_schema[8],
&SXPP_schema[85],
&SXPP_schema[82],
&SXPP_schema[46],
&SXPP_schema[51],
&SXPP_schema[85],
&SXPP_schema[221],
&SXPP_schema[227],
&SXPP_schema[230],
&SXPP_schema[8],
&SXPP_schema[21],
&SXPP_schema[8],
&SXPP_schema[21],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[233],
&SXPP_schema[239],
&SXPP_schema[8],
&SXPP_schema[249],
&SXPP_schema[21],
&SXPP_schema[254],
&SXPP_schema[7],
&SXPP_schema[263],
&SXPP_schema[7],
&SXPP_schema[265],
&SXPP_schema[7],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[267],
&SXPP_schema[271],
&SXPP_schema[271],
&SXPP_schema[271],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[276],
&SXPP_schema[271],
&SXPP_schema[267],
&SXPP_schema[279],
&SXPP_schema[271],
&SXPP_schema[271],
&SXPP_schema[279],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[284],
&SXPP_schema[18],
&SXPP_schema[295],
&SXPP_schema[299],
&SXPP_schema[295],
&SXPP_schema[304],
&SXPP_schema[295],
&SXPP_schema[295],
&SXPP_schema[313],
&SXPP_schema[317],
&SXPP_schema[321],
&SXPP_schema[325],
&SXPP_schema[330],
&SXPP_schema[265],
&SXPP_schema[95],
&SXPP_schema[95],
&SXPP_schema[95],
&SXPP_schema[95],
&SXPP_schema[335],
&SXPP_schema[95],
&SXPP_schema[95],
&SXPP_schema[95],
&SXPP_schema[95],
&SXPP_schema[335],
&SXPP_schema[339],
&SXPP_schema[345],
&SXPP_schema[352],
&SXPP_schema[358],
&SXPP_schema[95],
&SXPP_schema[360],
&SXPP_schema[369],
&SXPP_schema[375],
&SXPP_schema[378],
&SXPP_schema[381],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[7],
&SXPP_schema[384],
&SXPP_schema[394],
&SXPP_schema[7],
&SXPP_schema[8],
&SXPP_schema[21],
&SXPP_schema[133],
&SXPP_schema[21],
&SXPP_schema[133],
&SXPP_schema[397],
&SXPP_schema[403],
&SXPP_schema[133],
&SXPP_schema[409],
&SXPP_schema[133],
&SXPP_schema[415],
&SXPP_schema[421],
&SXPP_schema[427],
&SXPP_schema[433],
&SXPP_schema[439],
&SXPP_schema[445],
&SXPP_schema[453],
&SXPP_schema[460],
&SXPP_schema[468],
&SXPP_schema[453],
&SXPP_schema[476],
&SXPP_schema[484],
&SXPP_schema[492],
&SXPP_schema[500],
&SXPP_schema[233],
&SXPP_schema[8],
&SXPP_schema[95],
&SXPP_schema[82],
&SXPP_schema[510],
&SXPP_schema[513],
&SXPP_schema[95],
&SXPP_schema[95],
&SXPP_schema[78],
&SXPP_schema[516],
&SXPP_schema[46],
&SXPP_schema[51],
&SXPP_schema[227],
&SXPP_schema[221],
&SXPP_schema[522],
&SXPP_schema[522],
&SXPP_schema[8],
&SXPP_schema[8],
&SXPP_schema[85],
&SXPP_schema[95],
&SXPP_schema[7],
&SXPP_schema[526],
&SXPP_schema[82],
&SXPP_schema[51],
&SXPP_schema[85],
&SXPP_schema[230],
&SXPP_schema[533],
&SXPP_schema[535],
&SXPP_schema[537],
&SXPP_schema[7],
};
extern int sxscanner();
extern int sxparser();
extern int sxatcpp();

struct sxtables sxtables={
52113, /* magic */
{sxscanner,sxparser}, {255, 59, 1, 3, 4, 48, 0, 39, 1, 0, 0, 
S_is_a_keyword,S_is_a_generic_terminal,S_transition_matrix,
SXS_action_or_prdct_code,
S_adrp,
NULL,
SXS_local_mess,
S_char_to_simple_class+128,
S_no_delete,
S_no_insert,
S_global_mess,
S_lregle,
SCANACT,
sxsrecovery,
check_keyword,
},
{54, 231, 231, 281, 361, 497, 559, 1031, 59, 71, 248, 248, 266, 131, 0, 11, 4, 7, 2, 5, 11, 2, 7,
reductions,
t_bases,
nt_bases,
vector-559,
SXPBM_trans,
NULL,
NULL,
NULL,
P_lregle,
P_right_ctxt_head,
SXP_local_mess,
P_no_delete,
P_no_insert,
P_global_mess,PER_tset,sxscan_it,sxprecovery,
NULL,
NULL,
sxatcpp},
err_titles,
NULL,
(sxsem_tables*)(PP_tables-1),
NULL,
};

#include	"sxdico.h"

#define KW_NB		29
#define INIT_BASE	1
#define INIT_SUFFIX	0
#define CLASS_MASK	31
#define STOP_MASK	32
#define BASE_SHIFT	7
#define SUFFIX_MASK	64

static int kw_code2t_code [30] = {0,
58, 57, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 28, 27, 
24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 3, 
};

static int kw_code2lgth [30] = {0,
6, 2, 6, 3, 4, 2, 7, 4, 4, 6, 8, 5, 5, 5, 6, 
4, 4, 8, 5, 4, 3, 5, 6, 4, 6, 8, 6, 4, 7, 
};

static unsigned int comb_vector [59] = {
0, 0, 3617, 1570, 3971, 0, 0, 2758, 1671, 
3752, 2601, 0, 0, 5004, 1197, 3854, 3663, 2192, 1713, 
3538, 2227, 2468, 681, 2090, 3499, 3336, 805, 3233, 2983, 
936, 0, 174, 1057, 2342, 433, 3108, 1445, 1834, 1322, 
0, 2730, 1967, 300, 3375, 549, 0, 0, 0, 2857, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

static unsigned char char2class [256] = {
'\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\001', '\002', '\003', '\006', '\007', '\f', 
'\r', '\004', '\016', '\000', '\000', '\t', '\000', '\n', 
'\005', '\000', '\000', '\017', '\020', '\b', '\022', '\023', 
'\021', '\013', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', '\000', '\000', '\000', '\000', '\000', '\000', '\000', 
'\000', 
};

#include	"sxcheck_keyword.h"

/* End of sxtables for ppc3 [Tue May 27 16:47:11 2003] */
