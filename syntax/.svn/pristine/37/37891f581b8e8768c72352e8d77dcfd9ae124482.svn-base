Auteur : Romain Lacroix
Date   : 19/02/2008
Ajouts par Hubert Garavel et Remi Herilier - Thu Mar 12 11:17:25 CET 2009
Mise a jour par Hubert Garavel en fevrier 2023

-------------------------------------------------------------------------------
I) Procedure pour recuperer les sources de SYNTAX afin de les compiler
-------------------------------------------------------------------------------

Pour recuperer le code source, executer les commandes suivantes :

     cd <repertoire dans lequel installer les sources de SYNTAX>

     svn checkout https://subversion.renater.fr/anonscm/svn/syntax

Dans la suite, on note $SX le repertoire qui contient SYNTAX. Ce repertoire
contient notamment un fichier LICENSE et un repertoire trunk.

-------------------------------------------------------------------------------
II) Procedure pour compiler une version mono-architecture
-------------------------------------------------------------------------------

1) Pour compiler SYNTAX sur la machine courante, taper la commande

	sh $SX/trunk/etc/bin/sxmake [-debug]

   L'option facultative -debug lance le compilateur C avec l'option "-g" au lieu
   de -O2.

   Note : cette approche a ete testee sous les architectures iX86, x64 et sol64.

   Note : cette commande ne compile que les sources contenus dans le repertoire
   trunk/, mais pas ceux contenus dans outdated/ ni extensions/.

   Note : il existait une autre approche basee sur les autotools de GNU, mais
   elle n'est plus utilisee pour SYNTAX. Voir extensions/autoconf/README.txt.

2) Pour utiliser SYNTAX, il faut ajouter le repertoire $SX/trunk/bin dans
   la variable $PATH.

3) Pour effacer les objets produits par sxmake, taper la commande

	sh $SX/trunk/etc/bin/sxmake clean

4) Pour tester plus completement que le code de SYNTAX compile et fonctionne
   correctement, on peut lancer les deux commandes suivantes :

         sh $SX/trunk/etc/bin/sxmake bootstrap

   qui lancer l'autogenese (ou bootstrap) sur la machine courante.

   On peut aussi lancer   

         sh $SX/trunk/etc/bin/sxmake [-debug] examples

   qui compile les differents exemples contenus dans la distribution de SYNTAX.

   On peut aussi lancer

         sh $SX/trunk/etc/bin/sxmake all-flags

   qui compile SYNTAX en activant successivement les differentes macros de
   debogage definies dans trunk/incl/sxedebug.h.

   Aussi, sur macOS, on peut tester en utilisant MallocScribble :

         sh $SX/trunk/etc/bin/sxmake scribble

   et sur Linux, on peut tester en utilisant Valgrind

         sh $SX/trunk/etc/bin/sxmake valgrind

5) Pour compiler un seul exemple (par exemple f77), il suffit de lancer

         sh $SX/trunk/etc/bin/sxmake [-debug] f77

-------------------------------------------------------------
III) Procedure pour compiler une version multi-architectures
    (cette procedure est celle utilisee par VASY/CONVECS)
-------------------------------------------------------------

1) Conditions :

	- Les machines distantes doivent etre accessibles par ssh depuis
          la machine courante. Utiliser pour cela ssh-agent et ssh-add.

	- En principe, il n'est pas necessaire de pouvoir faire ssh vers la
          machine courante depuis la machine courante.

	- Le repertoire contenant SYNTAX doit etre accessible, et sous le
          meme nom depuis les machines distantes utilisees pour la compilation.
          Chez CONVECS, il s'appelle /common/Syntax.

	- Pour la compilation des binaires win32/win64 avec MinGW, la boite
	  a outils CADP doit etre installee sur la machine utilisee pour
	  la compilation et la variable $CADP doit etre positionnee vers
          le repertoire contenant CADP. Ceci est verifie par le script sxmake.

2) Lancer la compilation multi-architectures

	sh $SX/etc/bin/sxmake 

    Si le repertoire /common/Syntax existe, une compilation multi-architectures
    aura lieu. Sinon, c'est une compilation mono-architectures.

    Les resultats de la compilation sont ranges dans $SX/bin.* et $SX/lib.*
    Les dossiers $SX/bin et $SX/lib ne contiendront PAS les fichiers produits 
    par la compilation, mais des liens symboliques ou des scripts wrappers.

---------------------
IV) Notes diverses :
---------------------

- Le fichier de tables $SX/incl/reg_exp_t.h est genere lors du bootstrap du
  constructeur lecl. C'est une copie de ce fichier :
    $SX/lecl/src/lecl_t.c

- idem : $SX/incl/sxversion.h est genere automatiquement

- Architectures supportees par SYNTAX en 2023
  Le code de SYNTAX a ete mis a jour pour supporter les architectures 
  citees ci-dessous. 

  - sol64 (Intel 64-bit, SunOS (Solaris ou OpenIndiana), compileur cc)
  - iX86 (i386, linux, compileur gcc)
  - x64 (x86_64, linux, compilateur gcc)
  - mac64 (x86_64, macOS 10.11, compilateur clang)
  - win32 (i386, windows, compilateur croise Mingw32 32 bits)
  - win64 (x86_64, windows, compilateur croise Mingw32 64 bits)

