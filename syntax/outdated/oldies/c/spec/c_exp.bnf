<AXIOME-BIDON>		= <[constant-expression]> ;

** 3.3 EXPRESSIONS
*
** 3.3.1 Primary expressions
*<primary-expression>	= <identifier> ;
*<primary-expression>	= <constant> ;
*<primary-expression>	= <string-literal> ;
*<primary-expression>	= "(" <expression> ")" ;

*<unary-expression>	= <identifier> ;
<unary-expression>	= %identifier ;
*<unary-expression>	= <constant> ;
*<unary-expression>	= <string-literal> ;
<unary-expression>	= "(" <expression> ")" ;



** 3.3.2 Postfix operators
*<postfix-expression>	= <primary-expression> ;
*<postfix-expression>	= <postfix-expression> "[" <expression> "]" ;
*<postfix-expression>	= <postfix-expression> "(" <[expression]> ")" ;
*<postfix-expression>	= <postfix-expression> "." <identifier> ;
*<postfix-expression>	= <postfix-expression> "->" <identifier> ;
*<postfix-expression>	= <postfix-expression> "++" ;
*<postfix-expression>	= <postfix-expression> "--" ;
*

<unary-expression>	= <unary-expression> "[" <expression> "]" ;
<unary-expression>	= <unary-expression> "(" <[expression]> ")" ;
*<unary-expression>	= <unary-expression> "." <identifier> ;
*<unary-expression>	= <unary-expression> "->" identifier> ;
<unary-expression>	= <unary-expression> "." %identifier ;
<unary-expression>	= <unary-expression> "->" %identifier ;
<unary-expression>	= <unary-expression> "++" ;
<unary-expression>	= <unary-expression> "--" ;

** 3.3.3 Unary operators
*<unary-expression>	= <postfix-expression> ;
*<unary-expression>	= "++" <unary-expression> ;
*<unary-expression>	= "--" <unary-expression> ;
*<unary-expression>	= <unary-operator> <cast-expression> ;
*<unary-expression>	= sizeof <unary-expression> ;
*<unary-expression>	= sizeof "(" <type-name> ")" ;

<unary-expression>	= "++" <unary-expression> ;
<unary-expression>	= "--" <unary-expression> ;
<unary-expression>	= <unary-operator> <unary-expression> ;
<unary-expression>	= sizeof <unary-expression> ;
*<unary-expression>	= sizeof "(" <type-name> ")" ;
<unary-expression>	= sizeof "(" %type-name ")" ;

<unary-operator>	= "&" ;
<unary-operator>	= "*" ;
<unary-operator>	= "+" ;
<unary-operator>	= "-" ;
<unary-operator>	= "~" ;
<unary-operator>	= "!" ;

**3.3.4 Cast operators
*<cast-expression>	= <unary-expression> ;
*<cast-expression>	= "(" <type-name> ")" <cast-expression>	;
*

<expression>		= <unary-expression> ;
*<expression>		= "(" <type-name> ")" <expression> ;
<expression>		= "(" %type-name ")" <expression> ;

**3.3.5 Multiplicative operators
*<multiplicative-expression>
*			= <cast-expression> ;
*<multiplicative-expression>
*			= <multiplicative-expression> "*" <cast-expression> ;
*<multiplicative-expression>
*			= <multiplicative-expression> "/" <cast-expression> ;
*<multiplicative-expression>
*			= <multiplicative-expression> "%" <cast-expression> ;
*

<expression>		= <expression> "*" <expression> ;
<expression>		= <expression> "/" <expression> ;
<expression>		= <expression> "%" <expression> ;

**3.3.6 Additive operators
*<additive-expression>	= <multiplicative-expression> ;
*<additive-expression>	= <additive-expression> "+" <multiplicative-expression> ;
*<additive-expression>	= <additive-expression> "-" <multiplicative-expression> ; 
*

<expression>		= <expression> "+" <expression> ;
<expression>		= <expression> "-" <expression> ; 

**3.3.7 Bitwise shift operators
*<shift-expression>	= <additive-expression> ;
*<shift-expression>	= <shift-expression> "<<" <additive-expression> ;
*<shift-expression>	= <shift-expression> ">>" <additive-expression> ;
*

<expression>		= <expression> "<<" <expression> ;
<expression>		= <expression> ">>" <expression> ;

**3.3.8 Relational operators
*<relational-expression>	= <shift-expression> ;
*<relational-expression>	= <relational-expression> "<" <shift-expression> ;
*<relational-expression>	= <relational-expression> ">" <shift-expression> ;
*<relational-expression>	= <relational-expression> "<=" <shift-expression> ;
*<relational-expression>	= <relational-expression> ">=" <shift-expression> ;
*

<expression>		= <expression> "<" <expression> ;
<expression>		= <expression> ">" <expression> ;
<expression>		= <expression> "<=" <expression> ;
<expression>		= <expression> ">=" <expression> ;

**3.3.9 Equality operators
*<equality-expression>	= <relational-expression> ;
*<equality-expression>	= <equality-expression> "==" <relational-expression> ;
*<equality-expression>	= <equality-expression> "!=" <relational-expression> ;
*

<expression>	= <expression> "==" <expression> ;
<expression>	= <expression> "!=" <expression> ;

**3.3.10 Bitwise AND operator
*<AND-expression>	= <equality-expression> ;
*<AND-expression>	= <AND-expression> "&" <equality-expression> ;
*

<expression>		= <expression> "&" <expression> ;

**3.3.11 Bitwise exclusive OR operator
*<exclusive-OR-expression>
*			= <AND-expression> ;
*<exclusive-OR-expression>
*			= <exclusive-OR-expression> "^" <AND-expression> ;

<expression>		= <expression> "^" <expression> ;

**3.3.12 Bitwise inclusive OR operator
*<inclusive-OR-expression>
*			= <exclusive-OR-expression> ;
*<inclusive-OR-expression>
*			= <inclusive-OR-expression> "|" <exclusive-OR-expression> ;
*
*

<expression>		= <expression> "|" <expression> ;


**3.3.13 Logical AND operator
*<logical-AND-expression>
*			= <inclusive-OR-expression> ;
*<logical-AND-expression>
*			= <logical-AND-expression> "&&" <inclusive-OR-expression> ;
*

<expression>		= <expression> "&&" <expression> ;

**3.3.14 Logical OR operator
*<logical-OR-expression>	= <logical-AND-expression> ;
*<logical-OR-expression>	= <logical-OR-expression> "||" <logical-AND-expression> ;

<expression>		= <expression> "||" <expression> ;

**3.3.15 Conditional operator
*<conditional-expression>
*			= <logical-OR-expression> ;
*<conditional-expression>
*			= <logical-OR-expression> "?" <expression> ":" <conditional-expression> ;

<expression>		= <expression> "?" <expression> ":" <expression> ;

**3.3.16 Assignment operators
*<assignment-expression>	= <conditional-expression> ;
*<assignment-expression>	= <unary-expression> <assignment-operator> <assignment-expression> ;

<expression>		= <unary-expression> <assignment-operator> <expression> ;

<assignment-operator>	= "=" ;
<assignment-operator>	= "*=" ;
<assignment-operator>	= "/=" ;
<assignment-operator>	= "%=" ;
<assignment-operator>	= "+=" ;
<assignment-operator>	= "-=" ;
<assignment-operator>	= "<<=" ;
<assignment-operator>	= ">>=" ;
<assignment-operator>	= "&=" ;
<assignment-operator>	= "^=" ;
<assignment-operator>	= "|=" ;

**3.3.17 Comma operator
*<expression>		= <assignment-expression> ;
*<expression>		= <expression> "," <assignment-expression> ;

<expression>		= <expression> "," <expression> ;

<[expression]>		= ;
<[expression]>		= <expression> ;

*3.4 CONSTANT EXPRESSIONS
<[constant-expression]>	= ;
<[constant-expression]>	= <constant-expression> ;

*<constant-expression>	= <conditional-expression> ;

<constant-expression>	= <expression> ;

