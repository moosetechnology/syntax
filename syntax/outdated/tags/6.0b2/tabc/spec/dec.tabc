********************************************************************
*      Copyright (c) 1987 by Institut National de Recherche        *
*               d'Informatique et d'Automatique.		   *
*          Produit de l'equipe Langages et Traducteurs.    	   *
*   	         Version 6.0 du 17 Janvier 2007			   *
*	   	        Declarations de tabc			   *
********************************************************************
$do(<axiome>,<attr_declarations>,<prologue>,<decl>,<open>,<close>,
    <attr_decl>,<attr>,<nt_list>
   );
$
decl=
/************************************************************************/
/* Historique des modifications, en ordre chronologique inverse:	*/
/************************************************************************/
/* 17-01-07 11:45 (pb):	        Adaptation a la 6.0			*/
/************************************************************************/
/* 20-08-87 17:18 (phd):	Optimisations diverses, notamment	*/
/*				sur les manips de chaines		*/
/************************************************************************/
/* 20-08-87 14:13 (phd):	Ajout du "copyright"			*/
/************************************************************************/
/* 20-08-87 14:13 (phd):	Ajout de cette rubrique "modifications"	*/
/************************************************************************/


#define WHAT	"@(#)dec.tabc\t- SYNTAX [unix] - Mercredi 17 janvier 2007"
static struct what {
  struct what	*whatp;
  char		what [sizeof (WHAT)];
} what = {&what, WHAT};


#include "B_tables.h"

#ifdef	MSDOS
#include "tbc_vars.h"
#else
#include "tabc_vars.h"
#endif

extern struct sxtables bnf_tables;

/* dans tabc_put.c */
extern VOID put_avant_decl ();
extern VOID put_entre_decl_open ();
extern VOID put_entre_open_close ();
extern VOID put_apres_close ();

/* dans tabc.c */
extern int chercher_nt (/* ste */);
extern int placer_attr (/* struct sxtoken */);

static int i, xnt, xattr;
static char* ptr;
$
<axiome>	= <attr_declarations> <prologue>		;
$do(<axiome>)

<attr_declarations> =  <attr_decl_list> %DOLLAR 		;
$do(<attr_declarations>)

<attr_declarations> = %DOLLAR 					;
$do(<attr_declarations>)
    terminal_token = $ptoken ("%DOLLAR");
    sxput_error (terminal_token.source_index
	 ,"%s You must provide at least one attribute declaration."
	 ,bnf_tables.err_titles[2]
	 );
<attr_declarations> = 						;
$do(<attr_declarations>)
    terminal_token = STACKtoken(STACKtop());
    sxput_error (terminal_token.source_index
	 ,"%s You must provide at least one attribute declaration."
	 ,bnf_tables.err_titles[2]
	 );
<prologue>	= <decl> <open> <close>				;
$do(<prologue>)
    put_apres_close();
<decl>	 	= decl %DOLLAR	 				;
$do(<decl>)
{
    put_avant_decl ();
    ptr = $pcomment ("%DOLLAR");
    if (ptr != NULL) {
	fputs (ptr, sxstdout);
	sxfree (ptr);
    }
}
<decl>	 	= 			 			;
$do(<decl>)
     put_avant_decl ();
<open> 		= open %DOLLAR		 			;
$do(<open>)
{
    put_entre_decl_open ();
    ptr = $pcomment ("%DOLLAR");
    if (ptr != NULL) {
	fputs (ptr, sxstdout);
	sxfree (ptr);
    }
    fputs ("break;\n", sxstdout);
}
<open> 		= 			 			;
$do(<open>)
{
    put_entre_decl_open ();
    fputs ("break;\n", sxstdout);
}
<close>		= close %DOLLAR		 			;
$do(<close>)
{
    put_entre_open_close ();
    ptr = $pcomment ("%DOLLAR");
    if (ptr != NULL) {
	fputs (ptr, sxstdout);
	sxfree (ptr);
    }
    fputs ("break;\n", sxstdout);
}
<close>		= 			 			;
$do(<close>)
{
    put_entre_open_close ();
    fputs ("break;\n", sxstdout);
}
********************************************************************
*          Syntaxe des declarations d'attributs                    *
********************************************************************
<attr_decl_list>= <attr_decl_list> <attr_decl>			;
<attr_decl_list>= <attr_decl>					;
<attr_decl>	= <attr_nt_list> %TYPE		 		;
$do(<attr_decl>)
{
    type_attr[xattr] = $pste ("%TYPE");
}
<attr_decl>	= <attr_nt_list> ";"	 			;
$do(<attr_decl>)
{
    for (xnt = 1; xnt <= W.ntmax; xnt++) {
	if (attr_nt[xattr][xnt] == 's')
	    attr_nt[xattr][xnt] = 'v';
    }
    type_attr[xattr] = 0;
}
<attr_nt_list>	= <attr> "(" <nt_list> ")" 			;
<attr>		= %ATTR						;
$do(<attr>)
    xattr = placer_attr ($ptoken ("%ATTR"));
    i = strlen(sxstrget(attr_to_ste [xattr]));
    if (i > M_at ) M_at = i;
<nt_list>	= %NT						;
$do(<nt_list>)
{
    terminal_token = $ptoken ("%NT");
    xnt = chercher_nt ($pste ("%NT"));
    if (xnt != 0) attr_nt[xattr][xnt] = 's';
}
<nt_list>	= <nt_list> "," %NT				;
$do(<nt_list>)
{
    terminal_token = $ptoken ("%NT");
    xnt = chercher_nt ($pste ("%NT"));
    if (xnt != 0) {			/* non terminal connu */
	if (attr_nt[xattr][xnt] != ' ') {
		sxput_error (terminal_token.source_index
		,"%sMultiple occurrence of this non-terminal symbol."
		,bnf_tables.err_titles[1]
		);
		is_err = TRUE;
	}
	else attr_nt[xattr][xnt] = 's';
    }
}
*
