*
* This is a LIG for the language {wcw | w in {a, b, c}* }
*

1: <S>(..)	= <S>(..a) a	 	;
2: <S>(..)	= <S>(..b) b 		;
3: <S>(..)	= <S>(..c) c 		;
4: <S>(..)	= <T>(..)		;
*
5: <T>(..a)	= a <T>(..)		;
6: <T>(..b)	= b <T>(..)		;
7: <T>(..c)	= c <T>(..)		;
8: <T>()	= c			;

./wcw.out -pp ccc.wcw
<T[1..2]>        = c ;
<S[1..2]>        = <T[1..2]> ;
<S[1..3]>        = <S[1..2]> c ;
<T[2..3]>        = c ;
<T[1..3]>        = c <T[2..3]> ;
<S[1..3]>        = <T[1..3]> ;
<S[1..4]>        = <S[1..3]> c ;
<T[3..4]>        = c ;
<T[2..4]>        = c <T[3..4]> ;
<T[1..4]>        = c <T[2..4]> ;
<S[1..4]>        = <T[1..4]> ;
Nombre de productions de la foret partagee : 11


<S[1..4]>       =       <S[1..4] {}n T[2..3]> "8"  ;
<S[1..4] {}n T[2..3]>   =       "3" <S[1..3] |c|}n T[2..3]>  ;
<S[1..3] |c|}n T[2..3]>         =       <S[1..3] =1 T[1..3]> "7"  ;
<S[1..3] =1 T[1..3]>    =       "4"  ;

* Nombre de productions de la grammaire reduite des derivations droites : 4
Tree #1: <S[1..4]-3> (<S[1..3]-4> (<T[1..3]-7> (<T[2..3]-8> ())))


./wcw_lr.out -pp ccc.wcw
ccc.wcw:
Let's go...

Scanning, Non-Deterministic Parsing & Parse Forest Sharing done in 0ms
Source text: 3 tokens, 19 shift-transitions, 18 reduce-steps.

*       Unprocessed shared parse forest denotation.

*       The start symbol is <0, [0 .. 5]> .

1       : <4, [1 .. 2]>         = <8, [1 .. 2]> ;
2       : <8, [1 .. 2]>         = "c"(1) ;
3       : <4, [1 .. 3]>         = <7, [1 .. 3]> ;
4       : <7, [1 .. 3]>         = "c"(1) <8, [2 .. 3]> ;
5       : <8, [2 .. 3]>         = "c"(2) ;
6       : <3, [1 .. 3]>         = <4, [1 .. 2]> "c"(2) ;
7       : <4, [1 .. 4]>         = <7, [1 .. 4]> ;
8       : <7, [1 .. 4]>         = "c"(1) <7, [2 .. 4]> ;
9       : <7, [2 .. 4]>         = "c"(2) <8, [3 .. 4]> ;
10      : <0, [0 .. 5]>         = "End Of File" <4, [1 .. 4]> "End Of File" ;
11      : <0, [0 .. 5]>         = "End Of File" <3, [1 .. 4]> "End Of File" ;
12      : <8, [3 .. 4]>         = "c"(3) ;
13      : <3, [1 .. 4]>         = <3, [1 .. 3]> "c"(3) ;
14      : <3, [1 .. 4]>         = <4, [1 .. 3]> "c"(3) ;


Shared Parse Forest Printing done in 0ms

        Semantic Pass: Relations (0ms)
Nombre de productions de la grammaire des derivations droites : 4
<S[1..4]>       =       <S[1..4] {}n T[2..3]> "8"  ;
<S[1..4] {}n T[2..3]>   =       "3" <S[1..3] |c|}n T[2..3]>  ;
<S[1..3] |c|}n T[2..3]>         =       <S[1..3] =1 T[1..3]> "7"  ;
<S[1..3] =1 T[1..3]>    =       "4"  ;

* Nombre de productions de la grammaire reduite des derivations droites : 4
        Semantic Pass: Rightmost Derivation Grammar (20ms)
Tree #1: <S[1..4]-3> (<S[1..3]-4> (<T[1..3]-7> (<T[2..3]-8> ())))

---------------------------------------------------------------------------------------------
1: <S>(..)	= <A>(..a b) ;
2: <A>(..a b)	= <X>(c) <B>(..d e) <Y> ;
3: <X>(c)	= a ;
4: <B> (d e)	= b ;
5: <Y>		= <X>(c) ;

./nnf.out -pp aba.nnf
aba.nnf:
        Scanner (0ms)
        Recognizer (10ms)
        Reducer (0ms)
<X[1..2]>        = a ;
<B[2..3]>        = b ;
<X[3..4]>        = a ;
<Y[3..4]>        = <X[3..4]> ;
<A[1..4]>        = <X[1..2]> <B[2..3]> <Y[3..4]> ;
<S[1..4]>        = <A[1..4]> ;
Nombre de productions de la foret partagee : 6


<S[1..4]>       =       <S[1..4] =n B(3)[2..3] r> "4" <S[1..4] =n B(3)[2..3] l>  ;
<S[1..4] =n B(3)[2..3] r>       =       <S[1..4] {}n B(8)[2..3] r>  ;
<S[1..4] =n B(3)[2..3] l>       =       <S[1..4] {}n B(8)[2..3] l>  ;
<S[1..4] {}n B(8)[2..3] r>      =       "1" <A(10)[1..4] |a|}n B(8)[2..3] r>  ;
<S[1..4] {}n B(8)[2..3] l>      =       <A(10)[1..4] |a|}n B(8)[2..3] l>  ;
<A(10)[1..4] |a|}n B(8)[2..3] r>        =       "2" <Y[3..4]>  ;
<A(10)[1..4] |a|}n B(8)[2..3] l>        =       <X(7)[1..2]>  ;
<X(7)[1..2]>    =       "3"  ;
<Y[3..4]>       =       "5" <X(5)[3..4]>  ;
<X(5)[3..4]>    =       "3"  ;

* Nombre de productions de la grammaire reduite des derivations droites : 10
Tree #1: <S[1..4]-1> (<A[1..4]-2> (<X[1..2]-3> (), <B[2..3]-4> (), <Y[3..4]-5> (<X[3..4]-3> ())))

./nnf_lr.out -pp aba.nnf
aba.nnf:
Let's go...

Scanning, Non-Deterministic Parsing & Parse Forest Sharing done in 10ms
Source text: 3 tokens, 10 shift-transitions, 8 reduce-steps.

*       Unprocessed shared parse forest denotation.

*       The start symbol is <0, [0 .. 5]> .

1       : <3, [1 .. 2]>         = "a"(1) ;
2       : <4, [2 .. 3]>         = "b"(2) ;
3       : <0, [0 .. 5]>         = "End Of File" <1, [1 .. 4]> "End Of File" ;
4       : <1, [1 .. 4]>         = <2, [1 .. 4]> ;
5       : <2, [1 .. 4]>         = <3, [1 .. 2]> <4, [2 .. 3]> <5, [3 .. 4]> ;
6       : <5, [3 .. 4]>         = <3, [3 .. 4]> ;
7       : <3, [3 .. 4]>         = "a"(3) ;


Shared Parse Forest Printing done in 0ms

        Semantic Pass: Relations (30ms)
Nombre de productions de la grammaire des derivations droites : 10
<S[1..4]>       =       <S[1..4] =n B(9)[2..3] r> "4" <S[1..4] =n B(9)[2..3] l>  ;
<S[1..4] =n B(9)[2..3] r>       =       <S[1..4] {}n B(4)[2..3] r>  ;
<S[1..4] =n B(9)[2..3] l>       =       <S[1..4] {}n B(4)[2..3] l>  ;
<S[1..4] {}n B(4)[2..3] r>      =       "1" <A(1)[1..4] |a|}n B(4)[2..3] r>  ;
<S[1..4] {}n B(4)[2..3] l>      =       <A(1)[1..4] |a|}n B(4)[2..3] l>  ;
<A(1)[1..4] |a|}n B(4)[2..3] r>         =       "2" <Y[3..4]>  ;
<A(1)[1..4] |a|}n B(4)[2..3] l>         =       <X(3)[1..2]>  ;
<X(3)[1..2]>    =       "3"  ;
<Y[3..4]>       =       "5" <X(6)[3..4]>  ;
<X(6)[3..4]>    =       "3"  ;

* Nombre de productions de la grammaire reduite des derivations droites : 10
        Semantic Pass: Rightmost Derivation Grammar (0ms)
Tree #1: <S[1..4]-1> (<A[1..4]-2> (<X[1..2]-3> (), <B[2..3]-4> (), <Y[3..4]-5> (<X[3..4]-3> ())))

---------------------------------------------------------------------------------------------
1: <A>(..)         = <A>(..a) ;
2: <A>(..)         = <B>(..) ;
3: <B>(..a)        = <B>(..) ;
4: <B>()           = a ;

./cyc.out -pp a.cyc
a.cyc:
        Scanner (0ms)
        Recognizer (10ms)
        Reducer (0ms)
<B[1..2]>        = a ;
<B[1..2]>        = <B[1..2]> ;
<A[1..2]>        = <B[1..2]> ;
<A[1..2]>        = <A[1..2]> ;
Nombre de productions de la foret partagee : 4


<A[1..2]>       =       <A[1..2] =1 B[1..2]> "4"  ;
<A[1..2]>       =       <A[1..2] {}n B[1..2]> "4"  ;
<A[1..2] {}n B[1..2]>   =       "1" <A[1..2] |a|}n B[1..2]>  ;
<A[1..2] =1 B[1..2]>    =       "2"  ;
<A[1..2] |a|}n B[1..2]>         =       <A[1..2] =1 B[1..2]> "3"  ;
<A[1..2] |a|}n B[1..2]>         =       <A[1..2] {}n B[1..2]> "3"  ;

* Nombre de productions de la grammaire reduite des derivations droites : 6

Tree #1: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ())))))
Tree #2: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ())))))))
Tree #3: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ())))))))))
Tree #4: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ())))))))))))
Tree #5: <A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-4> ())))
Tree #6: <A[1..2]-2> (<B[1..2]-4> ())

./cyc_lr.out -pp a.cyc
a.cyc:
Let's go...

Scanning, Non-Deterministic Parsing & Parse Forest Sharing done in 0ms
Source text: 1 tokens, 9 shift-transitions, 7 reduce-steps.

*       Unprocessed shared parse forest denotation.

*       The start symbol is <0, [0 .. 3]> .

1       : <0, [0 .. 3]>         = "End Of File" <1, [1 .. 2]> "End Of File" ;
2       : <0, [0 .. 3]>         = "End Of File" <2, [1 .. 2]> "End Of File" ;
3       : <1, [1 .. 2]>         = <1, [1 .. 2]> ;
4       : <1, [1 .. 2]>         = <2, [1 .. 2]> ;
5       : <2, [1 .. 2]>         = <3, [1 .. 2]> ;
6       : <2, [1 .. 2]>         = <4, [1 .. 2]> ;
7       : <3, [1 .. 2]>         = <3, [1 .. 2]> ;
8       : <3, [1 .. 2]>         = <4, [1 .. 2]> ;
9       : <4, [1 .. 2]>         = "a"(1) ;


Shared Parse Forest Printing done in 10ms

        Semantic Pass: Relations (20ms)
Nombre de productions de la grammaire des derivations droites : 6
<A[1..2]>       =       <A[1..2] =1 B[1..2]> "4"  ;
<A[1..2]>       =       <A[1..2] {}n B[1..2]> "4"  ;
<A[1..2] {}n B[1..2]>   =       "1" <A[1..2] |a|}n B[1..2]>  ;
<A[1..2] =1 B[1..2]>    =       "2"  ;
<A[1..2] |a|}n B[1..2]>         =       <A[1..2] =1 B[1..2]> "3"  ;
<A[1..2] |a|}n B[1..2]>         =       <A[1..2] {}n B[1..2]> "3"  ;

* Nombre de productions de la grammaire reduite des derivations droites : 6
        Semantic Pass: Rightmost Derivation Grammar (10ms)
Tree #1: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ())))))
Tree #2: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ())))))))
Tree #3: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ())))))))))
Tree #4: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ())))))))))))
Tree #5: <A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-4> ())))
Tree #6: <A[1..2]-2> (<B[1..2]-4> ())

---------------------------------------------------------------------------------------------
1: <A>(..)         = <A>(..a a) ;
2: <A>(..)         = <B>(..) ;
3: <B>(..a)        = <B>(..) ;
4: <B>()           = a ;


./cyc2.out -pp a.cyc

<A[1..2]>       =       <A[1..2] =1 B[1..2]> "4"  ;
<A[1..2]>       =       <A[1..2] {}n B[1..2]> "4"  ;
<A[1..2] {}n B[1..2]>   =       "1" <A(1)[1..2] |a|}n B[1..2]>  ;
<A[1..2] =1 B[1..2]>    =       "2"  ;
<A(1)[1..2] |a|}n B[1..2]>      =       <A(1)[1..2] {}n B[1..2]> "3"  ;
<A(1)[1..2] {}n B[1..2]>        =       <A[1..2] |a|}n B[1..2]>  ;
<A[1..2] |a|}n B[1..2]>         =       <A[1..2] =1 B[1..2]> "3"  ;
<A[1..2] |a|}n B[1..2]>         =       <A[1..2] {}n B[1..2]> "3"  ;

* Nombre de productions de la grammaire reduite des derivations droites : 8

Tree #1: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ())))))))
Tree #2: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ()))))))))))
Tree #3: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ())))))))))))))
Tree #4: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ()))))))))))))))))
Tree #5: <A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ()))))
Tree #6: <A[1..2]-2> (<B[1..2]-4> ())


./cyc2_lr.out -pp a.cyc
a.cyc:
Let's go...

Scanning, Non-Deterministic Parsing & Parse Forest Sharing done in 0ms
Source text: 1 tokens, 9 shift-transitions, 7 reduce-steps.

*       Unprocessed shared parse forest denotation.

*       The start symbol is <0, [0 .. 3]> .

1       : <0, [0 .. 3]>         = "End Of File" <1, [1 .. 2]> "End Of File" ;
2       : <0, [0 .. 3]>         = "End Of File" <2, [1 .. 2]> "End Of File" ;
3       : <1, [1 .. 2]>         = <1, [1 .. 2]> ;
4       : <1, [1 .. 2]>         = <2, [1 .. 2]> ;
5       : <2, [1 .. 2]>         = <3, [1 .. 2]> ;
6       : <2, [1 .. 2]>         = <4, [1 .. 2]> ;
7       : <3, [1 .. 2]>         = <3, [1 .. 2]> ;
8       : <3, [1 .. 2]>         = <4, [1 .. 2]> ;
9       : <4, [1 .. 2]>         = "a"(1) ;


Shared Parse Forest Printing done in 0ms

        Semantic Pass: Relations (30ms)
Nombre de productions de la grammaire des derivations droites : 8
<A[1..2]>       =       <A[1..2] =1 B[1..2]> "4"  ;
<A[1..2]>       =       <A[1..2] {}n B[1..2]> "4"  ;
<A[1..2] {}n B[1..2]>   =       "1" <A(1)[1..2] |a|}n B[1..2]>  ;
<A[1..2] =1 B[1..2]>    =       "2"  ;
<A(1)[1..2] |a|}n B[1..2]>      =       <A(1)[1..2] {}n B[1..2]> "3"  ;
<A(1)[1..2] {}n B[1..2]>        =       <A[1..2] |a|}n B[1..2]>  ;
<A[1..2] |a|}n B[1..2]>         =       <A[1..2] =1 B[1..2]> "3"  ;
<A[1..2] |a|}n B[1..2]>         =       <A[1..2] {}n B[1..2]> "3"  ;

* Nombre de productions de la grammaire reduite des derivations droites : 8
        Semantic Pass: Rightmost Derivation Grammar (20ms)
Tree #1: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ())))))))
Tree #2: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ()))))))))))
Tree #3: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ())))))))))))))
Tree #4: <A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ()))))))))))))))))
Tree #5: <A[1..2]-1> (<A[1..2]-2> (<B[1..2]-3> (<B[1..2]-3> (<B[1..2]-4> ()))))
Tree #6: <A[1..2]-2> (<B[1..2]-4> ())

---------------------------------------------------------------------------------------------
*
* This is a LIG for the language {a^n b^m c^n d^m | n, m >= 0}
* Modelise les dependances croisees
*

1: <S>(..)		= <S>(..d) d	 	;
2: <S>(..)		= <T>(..)		;
*
3: <T>(..)		= a <T>(..) c		;
4: <T>(..)		= <B>(..)		;
*
5: <B>(..d)		= b <B>(..)		;
6: <B>()		= 			;

source: "abbcdd"

./anbmcndm.out -pp abbcdd.anbmcndm 
abbcdd.anbmcndm:
        Scanner (0ms)
        Recognizer (0ms)
        Reducer (0ms)
<B[4..4]>        = ;
<B[3..4]>        = b <B[4..4]> ;
<B[2..4]>        = b <B[3..4]> ;
<T[2..4]>        = <B[2..4]> ;
<T[1..5]>        = a <T[2..4]> c ;
<S[1..5]>        = <T[1..5]> ;
<S[1..6]>        = <S[1..5]> d ;
<S[1..7]>        = <S[1..6]> d ;
Nombre de productions de la foret partagee : 8
        Parser (10ms)
        Semantic Pass: Relations (10ms)
Nombre de productions de la grammaire des derivations droites : 8
<S[1..7]>       =       <S[1..7] {}n B[4..4]> "6"  ;
<S[1..7] {}n B[4..4]>   =       "1" <S[1..6] |d|}n B[4..4]>  ;
<S[1..6] |d|}n B[4..4]>         =       <S[1..6] {}n B[3..4]> "5"  ;
<S[1..6] {}n B[3..4]>   =       "1" <S[1..5] |d|}n B[3..4]>  ;
<S[1..5] |d|}n B[3..4]>         =       <S[1..5] =n B[2..4]> "5"  ;
<S[1..5] =n B[2..4]>    =       "2" <T[1..5] =n B[2..4]>  ;
<T[1..5] =n B[2..4]>    =       "3" <T[2..4] =1 B[2..4]>  ;
<T[2..4] =1 B[2..4]>    =       "4"  ;

* Nombre de productions de la grammaire reduite des derivations droites : 8
        Semantic Pass: Linear Derivation Grammar (0ms)
Tree #1: <S[1..7]-1> (<S[1..6]-1> (<S[1..5]-2> (<T[1..5]-3> (<T[2..4]-4> (<B[2..4]-5> (<B[3..4]-5> (<B[4..4]-6> ())))))))


./anbmcndm_lr.out -pp abbcdd.anbmcndm 
abbcdd.anbmcndm:
Let's go...

Scanning, Non-Deterministic Parsing & Parse Forest Sharing done in 10ms
Source text: 6 tokens, 15 shift-transitions, 13 reduce-steps.

*       Unprocessed shared parse forest denotation.

*       The start symbol is <0, [0 .. 8]> .

1       : <4, [2 .. 4]>         = <5, [2 .. 4]> ;
2       : <5, [2 .. 4]>         = "b"(2) <5, [3 .. 4]> ;
3       : <5, [3 .. 4]>         = "b"(3) <6, [4 .. 4]> ;
4       : <6, [4 .. 4]>         = ;
5       : <2, [1 .. 5]>         = <3, [1 .. 5]> ;
6       : <3, [1 .. 5]>         = "a"(1) <4, [2 .. 4]> "c"(4) ;
7       : <1, [1 .. 6]>         = <2, [1 .. 5]> "d"(5) ;
8       : <0, [0 .. 8]>         = "End Of File" <1, [1 .. 7]> "End Of File" ;
9       : <1, [1 .. 7]>         = <1, [1 .. 6]> "d"(6) ;


Shared Parse Forest Printing done in 0ms

        Semantic Pass: Relations (50ms)
Nombre de productions de la grammaire des derivations droites : 8
<S[1..7]>       =       <S[1..7] {}n B[4..4]> "6"  ;
<S[1..7] {}n B[4..4]>   =       "1" <S[1..6] |d|}n B[4..4]>  ;
<S[1..6] |d|}n B[4..4]>         =       <S[1..6] {}n B[3..4]> "5"  ;
<S[1..6] {}n B[3..4]>   =       "1" <S[1..5] |d|}n B[3..4]>  ;
<S[1..5] |d|}n B[3..4]>         =       <S[1..5] =n B[2..4]> "5"  ;
<S[1..5] =n B[2..4]>    =       "2" <T[1..5] =n B[2..4]>  ;
<T[1..5] =n B[2..4]>    =       "3" <T[2..4] =1 B[2..4]>  ;
<T[2..4] =1 B[2..4]>    =       "4"  ;

* Nombre de productions de la grammaire reduite des derivations droites : 8
        Semantic Pass: Rightmost Derivation Grammar (10ms)
Tree #1: <S[1..7]-1> (<S[1..6]-1> (<S[1..5]-2> (<T[1..5]-3> (<T[2..4]-4> (<B[2..4]-5> (<B[3..4]-5> (<B[4..4]-6> ())))))))
---------------------------------------------------------------------------------------------
*
* This is a LIG for the language {a^n b^n c^n | n >=0 }
*

<S>(..)		= <S>(..c) c	 	;
<S>(..)		= <AB>(..)		;
*
<AB>(..c)	= a <AB>(..) b		;
<AB>()		= 			;


./anbncn.out -pp -
"stdin":
aabbcc^DScanner (0ms)
        Recognizer (0ms)
        Reducer (0ms)
<AB[3..3]>       = ;
<AB[2..4]>       = a <AB[3..3]> b ;
<AB[1..5]>       = a <AB[2..4]> b ;
<S[1..5]>        = <AB[1..5]> ;
<S[1..6]>        = <S[1..5]> c ;
<S[1..7]>        = <S[1..6]> c ;
Nombre de productions de la foret partagee : 6
        Parser (0ms)
        Semantic Pass: Relations (10ms)
Nombre de productions de la grammaire des derivations droites : 6
<S[1..7]>       =       <S[1..7] {}n AB[3..3]> "4"  ;
<S[1..7] {}n AB[3..3]>  =       "1" <S[1..6] |c|}n AB[3..3]>  ;
<S[1..6] |c|}n AB[3..3]>        =       <S[1..6] {}n AB[2..4]> "3"  ;
<S[1..6] {}n AB[2..4]>  =       "1" <S[1..5] |c|}n AB[2..4]>  ;
<S[1..5] |c|}n AB[2..4]>        =       <S[1..5] =1 AB[1..5]> "3"  ;
<S[1..5] =1 AB[1..5]>   =       "2"  ;

* Nombre de productions de la grammaire reduite des derivations droites : 6
        Semantic Pass: Rightmost Derivation Grammar (0ms)
Tree #1: <S[1..7]-1> (<S[1..6]-1> (<S[1..5]-2> (<AB[1..5]-3> (<AB[2..4]-3> (<AB[3..3]-4> ())))))
        Done (20ms)
