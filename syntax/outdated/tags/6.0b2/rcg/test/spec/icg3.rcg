%
% Traduction d'une Internal Contextual Grammar(1) en RCG
%
% (1) Voir Lucian Ilie, "On computational complexity of contextual languages"
%          TCS 183 (1997) 33--44
%
% G=(T,A,(S_1,C_1), ...,(S_n,C_n))
% T est un alphabet
% A \subseteq T^* est l'ensemble fini des {\sl axiomes}
% S_i \subseteq T^*, 1 \leq i \leq n sont les ensembles de {\sl selecteurs}
% C_i \subseteq T^* \time T^*, 1 \leq i \leq n sont les ensembles finis de {\sl contextes}
%
% La RCG correspondante est la suivante :
% Si T = {a, b, ..., d}
% axiome(\a\b...\d)	--> &False () .
%
% axiome(X Y Z)		--> S(X,Y,Z) . % decoupage en 3
%
% Pour chaine a1 ... ap de A
% S(X,Y,Z)		--> &StrEq(a1 ... ap, X Y Z) .
%
% Pour chaque couple (S_i,C_i)
% S(Z1 U1, U2 Z2 V1, V2 Z3)	--> Si(Z2) Ci(U1, U2, V1, V2) S(Z1, Z2, Z3) .
% Z2 doit appartenir au language Si
% U1, U2, V1, V2 doivent etre telles que (U1 U2, V1 V2) \in Ci
% Si on considere des derivations {\sl locales maximales} il faut ajouter le test que
% la taille de Z2 est maximale (voir exemple ci-dessous)
% cad on ajoute !Z(U3 Z2 V1) avec |U3|+|V1|>0 et
%Z(X)	--> S1(X) .
%	...
%Z(X)	--> Sn(X) .
%
% Cette traduction marche si le langage des selecteurs est fini, regulier, CF, ou meme RCL
% Ca montre que ds le cas CF, RCL la grammaire obtenue est RCG donc analysable en temps polynomial
%

% Exemple Duplication
% L3={w c w | w \in {a,b}^*) est decrit par l'ICG
% G3=({a,b,c},{c},({c x | x \in {a,b}^*},{(a,a),(b,b)}))
% avec le mode de derivation locale maximale
% On obtient

axiome(\a\b\c\d)		--> &False () .
% Pour chaque mot x= x1 x2 x3 de A et chaque et chaque Si, on calcule (statiquement) le x2 maximal
% tel que x2 \in Si
% S'il existe on genere
% axiome(x1 U Z V x3) --> &StrEq(x2, Z) Si(U Z V, Z) .
axiome(c)		--> .
axiome(U Z V)		--> &StrEq(c, Z) S1C1(U Z V, Z) .


SC(U, Z)		--> S1C1(U, Z) .
SC(Z, Z)		--> .

% On a 
% Z est un noyau maximal
% on recherche
% Le nouveau noyau maximal P2 Z Q2

S1C1(P1 D1 P2 Z Q2 D2 Q1, Z)
			--> S1(Z) C1(P1, P2, Q2, Q1)
			    !MS(P1 D1 P2 Z Q2 D2 Q1, D1, D2) % M loc
			    SC(D1 P2 Z Q2 D2, P2 Z Q2) .


% codage direct du FSA avec un etat final F atteint par transition sur le vide
S1(c X)			--> B1(X) .
B1(a X)			--> B1(X) .
B1(b X)			--> B1(X) .
B1(X)			--> F1(X) .
F1()			--> .


C1(U1,U2,V1,V2)			--> &StrEq(a, U1 U2) &StrEq(a, V1 V2) .
C1(U1,U2,V1,V2)			--> &StrEq(b, U1 U2) &StrEq(b, V1 V2) .

% Vrai ssi une chaine englobant strictement Z et sautant D1 et D2 convient
MS(P1 Q1 D1 Z D2 Q2 P2, D1, D2)
			--> !&StrLen(0, Q1 Q2) S(Q1 D1 Z D2 Q2, D1, D2) .

S(Z, D1, D2)		--> S1_1(Z, D1, D2) .

% reconnaissance "discontinue" des Si
% On reconnait X D1 Y D2 Z par S1
% On duplique 3 fois l'automate initial de S1 en supprimant la clause finale F1() --> .
% on assure les liaisons entre les automates par des clauses du style A1_1(D1 X) --> A1_2(X) .
% on remet une clause finale F1_2() --> .

S1_1(c X, D1, D2)	--> B1_1(X, D1, D2) .
B1_1(a X, D1, D2)	--> B1_1(X, D1, D2) .
B1_1(b X, D1, D2)	--> B1_1(X, D1, D2) .
B1_1(X, D1, D2)		--> F1_1(X, D1, D2) .

S1_1(D1 X, D1, D2)	--> S1_2(X, D1, D2) .
B1_1(D1 X, D1, D2)	--> B1_2(X, D1, D2) .
F1_1(D1 X, D1, D2)	--> F1_2(X, D1, D2) .

S1_2(c X, D1, D2)	--> B1_2(X, D1, D2) .
B1_2(a X, D1, D2)	--> B1_2(X, D1, D2) .
B1_2(b X, D1, D2)	--> B1_2(X, D1, D2) .
B1_2(X, D1, D2)		--> F1_2(X, D1, D2) .

S1_2(D2 X, D1, D2)	--> S1_3(X, D1, D2) .
B1_2(D2 X, D1, D2)	--> B1_3(X, D1, D2) .
F1_2(D2 X, D1, D2)	--> F1_3(X, D1, D2) .

S1_3(c X, D1, D2)	--> B1_3(X, D1, D2) .
B1_3(a X, D1, D2)	--> B1_3(X, D1, D2) .
B1_3(b X, D1, D2)	--> B1_3(X, D1, D2) .
B1_3(X, D1, D2)		--> F1_3(X, D1, D2) .

F1_3(, D1, D2)		--> .
