/* ********************************************************
   *                                                      *
   *                                                      *
   * Copyright (c) 1992 by Institut National de Recherche *
   *                    en Informatique et en Automatique *
   *                                                      *
   *                                                      *
   ******************************************************** */




/* ********************************************************
   *                                                      *
   *     Produit de l'equipe Langages et Traducteurs.     *
   *                                                      *
   ******************************************************** */



/************************************************************************/
/* Historique des modifications, en ordre chronologique inverse:	*/
/************************************************************************/
/* 05-04-94 13:20 (pb):		Memorisation des index ds un tableau	*/
/*				d'entiers (+ de 20 fois + rapide)	*/
/************************************************************************/
/* 26-11-92 09:36 (pb):		Ajout de cette rubrique "modifications"	*/
/************************************************************************/


static char	what [] = "@(#)sxindex_mngr.c	- SYNTAX [unix] - Mar 5 Avr 1994 13:20:56";
static char	ME [] = "sxindex_mngr";


/* This package allows the handling of indexes for vectors or matrices.
   Vector indexes are integers and Matrix indexes are couples of integers
   ( V [i] or M [i] [j]).
   Brand new indexes can be seeked or already used indexes can be released.
   The user can manage the (concurrent) arrays (V or M), since he is warns when an
   overflow occurs.
   In the Matrix case, when an overflow occurs, the number of line is increased. */


#include "sxunix.h"


void sxindex_alloc (header, line_nb, column_nb, user_oflw)
    sxindex_header	*header;
    int			line_nb, column_nb;
    void		(*user_oflw) ();
{
    header->shift = 0;

    if ((header->line_nb = line_nb) == 0) {
	header->mask = -1;
	header->column_nb = column_nb;
	header->line_nb = 1;
    }
    else {
	column_nb--;

	while (column_nb != 0) {
	   header->shift++;
	   column_nb >>= 1;
	}

	header->column_nb = 1 << header->shift;
	header->mask = header->column_nb - 1;
	/* Si 2**(p-1) < column_nb <= 2**p
	   alors header->column_nb == 2**p, header->shift == p et header->mask == 2**p - 1 */
    }

    header->size = header->line_nb * header->column_nb;
    header->set = (int*) sxalloc (header->size, sizeof (int));
    header->oflw = user_oflw;
    header->index = 0;
    header->free = -1;
}




int sxindex_seek (header)
    sxindex_header	*header;
{
    int x, old_line_nb, old_size;

    if (header->index == header->size) {
	if ((x = header->free) == -1) {
	    /* Tous les index sont occupes. */
	    old_line_nb = header->line_nb;

	    if (header->mask != -1)
		/* Matrice */
		header->line_nb *= 2;
	    else
		header->column_nb *= 2;

	    old_size = header->size;
	    header->set = (int*) sxrealloc (header->set, header->size *= 2, sizeof (int));
	    x = header->index++;

	    if (header->oflw != NULL)
		(*header->oflw) (header, old_line_nb, old_size);
	}
	else
	    header->free = header->set [x];
    }
    else
	x = header->index++;

    header->set [x] = -2;	/* Occupe' */
    return x;
}

