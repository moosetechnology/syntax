.\" @(#)bitstr.3	- SYNTAX [unix] - 2 Septembre 1987
\".RP
\"********************************************************************
\"* Les valeurs qui suivent sont prevues pour sortie sur l'imprimante
\"* Toshiba 3plumes en fonte Prestige-Elite 12 caracteres par pouce.
\"********************************************************************
.po 0
.nr PO 0
.pl 10.5i
.ll 80m
.nr LL 80m
.nr FM 0.5i
.nr PI 2.7m
\".RP
.PP
.DS L
				ANNEXE3

			   Le paquetage BITSTR
.DE
.NH
Noms
.PP
bitalloc, bitcalloc, bitfree, bittaballoc, bittabcalloc, bittabfree, bitlength,
bitor, bitand, bitminus, bitnot,
set1bit, reset1bit, assign1bit,
bitset, bitreset, bitcopy, bitsubstr, bitassign, bitconcat,
bitequal, bittest, bittrue,
bitindex0, bitindex1,
set_cardinal, set_get_first_elem, set_get_next_elem,
bitscan, bitprint, bitstrread, bitstrget, bitstrwrite
\- traitement de cha^ines de bits de longueur quelconque

.NH
Profils et description des diff'erentes proc'edures
.IP -
BITSTR bitalloc (length)
.br
int length;
.DS L
bitalloc: alloue une cha^ine de bits de longueur maximale length et de
longueur courante nulle, et rend son adresse (c'est-`a-dire un BITSTR );
d'efinie par macro, donc non red'efinissable.
.DE
.IP -
BITSTR bitcalloc (length)
.br
int length;
.DS L
bitcalloc alloue une cha^ine de bits de longueur maximale length et de
longueur courante length remplie de z'eros, et rend son adresse.
.DE
.IP -
bitfree (p)
.br
BITSTR *p;
.DS L
bitfree lib`ere la place occup'ee par une cha^ine de bits;
p est l'adresse du pointeur vers la cha^ine (BITSTR );
ce pointeur est remis a NULL.
.DE
.IP -
BITSTR *bittaballoc (binf, bsup, length)
.br
int binf, bsup, length;
.DS L
bittaballoc alloue un tableau de cha^ines de bits dont les bornes sont binf
et bsup ;la longueur maximale des cha^ines est length et leur longueur
courante est nulle; d'efinie par macro.
.DE
.IP -
BITSTR *bittabcalloc (binf, bsup, length)
.br
int binf, bsup, length;
.DS L
bittabcalloc alloue un tableau de cha^ines de bits dont les bornes sont
binf et bsup ; la longueur maximale des cha^ines et leur longueur courante
est length , et elles sont remplies de z'eros.
.DE
.IP -
bittabfree (t, binf)
.br
BITSTR **t;
.br
int binf;
.DS L
bittabfree lib`ere la place occup'ee par le tableau de cha^ines de bits 
dont l'adresse est contenue dans t et dont la borne inf'erieure est binf;
le pointeur vers le tableau ( *t ) est remis `a NULL.
.DE
.IP -
int bitlength (s)
.br
BITSTR s;
.DS L
bitlength rend la longueur courante de la cha^ine de bits s ;
d'efinie par macro.
.DE
.IP -
bitor (d, s1, s2)
.br
BITSTR d, s1, s2;
.DS L
bitor met dans l'union ensembliste (OU logique) de s1 et s2 ; la cha^ine la
plus courte est (virtuellement, comme pour les autres fonctions) compl'et'ee
par des z'eros.
.DE
.IP -
bitand (d, s1, s2)
.br
BITSTR d, s1, s2;
.DS L
bitand met dans d l'intersection ensembliste (ET logique) de s1 et s2 ; la
cha^ine la plus courte est compl'et'ee par des z'eros.
.DE
.IP -
bitminus (d, s1, s2)
.br
BITSTR d, s1, s2;
.DS L
bitminus met dans d la diff'erence ensembliste de s1 et s2 ; la cha^ine
la plus courte est compl'et'ee par des z'eros.
.DE
.IP -
bitnot (d, s)
.br
BITSTR d, s;
.DS L
bitnot met dans d le compl'ement logique de s .
.DE
.IP -
set1bit (s, i)
.br
BITSTR s;
.br
int i;
.DS L
set1bit met `a 1 le i -`eme bit de s ; set1bit n'a pas d'effet si
i est en dehors des bornes (<= 0 ou > longueur courante).
.DE
.IP -
reset1bit (s, i)
.br
BITSTR s;
.br
int i;
.DS L
reset1bit met `a 0 le i -`eme bit de s ; n'a pas d'effet si i est en dehors
des bornes.
.DE
.IP -
assign1bit (s, i, v)
.br
BITSTR s;
.br
int i, v;
.DS L
assign1bit v dans le i -`eme bit de s ;selon les conventions habituelles
du langage C, v est consid'er'e comme valant 1 s'il est diff'erent de 0;
n'a pas d'effet si i est en dehors des bornes.
.DE
.IP -
bitset (s)
.br
BITSTR s;
.DS L
bitset remplit s de 1 sans modifier sa longueur courante.
.DE
.IP -
bitreset (s)
.br
BITSTR s;
.DS L
bitreset remplit s de 0 sans modifier sa longueur courante.
.DE
.IP -
bitcopy (d, s)
.br
BITSTR d, s;
.DS L
bitcopy copie s dans d avec troncature 'eventuelle si d est trop petit.
.DE
.IP -
bitsubstr (d, s, deb, length)
.br
BITSTR d, s;
.br
int deb, length;
.DS L
bitsubstr met dans d la sous-cha^ine de s de d'ebut deb et de longueur length;
tronque si cette sous-cha^ine d'eborde de s, et tronque si length est 
sup'erieur `a la longueur maximale de d .
.DE
.IP -
bitassign (d, deb, length, s)
.br
BITSTR d, s;
.br
int deb, length;
.DS L
bitassign remplace par s la sous-cha^ine de d de d'ebut deb et de longueur
length ; cette sous-cha^ine est limit'ee par la longueur courante de s .
.DE
.IP -
bitconcat (d, s1, s2)
.br
BITSTR d, s1, s2;
.DS L
bitconcat place dans d la concat'enation de s1 et s2 .
.DE
.IP -
int bitequal (s1, s2)
.br
BITSTR s1, s2;
.DS L
bitequal rend vrai (donc 1) si s1 et s2 sont 'egales apr`es prolongement
de la plus courte par des z'eros.
.DE
.IP -
int bittest (s, i)
.br
BITSTR s;
.br
int i;
.DS L
bittest rend la valeur du i -`eme bit de s ; rend -1 si i est en dehors des
bornes.
.DE
.IP -
int bittrue (s)
.br
BITSTR s;
.DS L
bittrue rend vrai si au moins un bit de s n'est pas nul.
.DE
.IP -
int bitindex0 (s)
.br
BITSTR s;
.DS L
bitindex0 rend l'index dans s du premier bit nul, ou 0 si aucun bit n'est nul.
.DE
.IP -
int bitindex1 (s)
.br
BITSTR s;
.DS L
bitindex1 rend l'index dans s du premier bit non nul, ou 0 si tous les bits 
sont nuls; d'efinie par macro.
.DE
.IP -
int set_cardinal (s)
.br
BITSTR s;
.DS L
set_cardinal rend le cardinal de l'ensemble repr'esent'e par s ,
c'est-`a-dire le nombre de bits 'egaux `a 1.
.DE
.IP -
int set_get_first_elem (s)
.br
BITSTR s;
.DS L
set_get_first_elem rend l'index dans s du premier bit non nul, ou 0 si tous
les bits sont nuls; set_get_next_elem rend l'index dans s du premier bit non
nul strictement apr`es i ,
ou 0 si tous ces bits sont nuls; ces deux fonctions sont la plupart du temps
employ'ees ensemble pour faire des boucles sur tous les bits non nuls
d'une cha^ine de bits.
set_get_first_elemest d'efinie par macro.
.DE
.IP -
int set_get_next_elem (s, i)
.br
BITSTR s;
.br
int i;
.IP -
bitscan (s)
.br
BITSTR s;
.DS L
bitscan lit sur l'entr'ee standard une cha^ine de bits (sous forme imprimable)
et la met dans s ; la lecture s'arr^ete d`es qu'on rencontre un caract`ere
diff'erent de `0' et de `1'; la longueur courante de s devient le minimum
de sa longueur maximale et de la longueur de la cha^ine lue.
.DE
.IP -
bitprint (s)
.br
BITSTR s;
.DS L
bitprint imprime sur la sortie standard la cha^ine de bits s suivie
d'une fin de ligne.n
.DE
.IP -
int bitstrread (f, s)
.br
int f;
.br
BITSTR s;
.DS L
bitstrread lit dans le fichier f une cha^ine de bits (sous forme interne)
et la met dans s ; f doit ^etre un descripteur de fichier ouvert par
open (2) et s une cha^ine de bits pr'ealablement allou'ee; rend
le nombre d'octets lus.
.DE
.IP -
BITSTR bitstrget (f)
.br
int f;
.DS L
bitstrget lit dans le fichier f une cha^ine de bits (sous forme interne)
et lui alloue juste la place n'ecessaire; f doit ^etre un descripteur de
fichier ouvert par open (2); bitstrget rend le BITSTR pointant sur cette cha^ine.
.DE
.IP -
int bitstrwrite (f, s)
.br
int f;
.br
BITSTR s;
.DS L
bitstrwrite " 'ecrit" la forme interne de la cha^ine de bits s dans le
fichier f (ouvert par open (2) ou par create (2));rend le nombre d'octets
'ecrits.
.DE
.NH
DESCRIPTION
.PP
Bitstr
est un paquetage de traitement de cha^ines de bits de longueur quelconque et
variable. Un BITSTR est un pointeur vers une structure contenant:
.IP -
la longueur courante de la cha^ine de bits;
.IP -
la longueur maximale de la cha^ine, d'efinie au moment de l'allocation;
.IP -
un pointeur vers une cha^ine de caract`eres (allou'ee elle aussi
dynamiquement) contenant les bits; la longueur de cette cha^ine est calcul'ee
en fonction de la longueur maximale de la cha^ine de bits.
.PP
Le type d'une cha^ine de bits est BITSTR .Donc, pour d'eclarer (avant 
d'allouer) une cha^ine de bits il faut 'ecrire: BITSTR s;
.PP
L'allocation est laiss'ee aux soins de l'utilisateur qui peut employer
l'une des fonctions bitalloc , bitcalloc ou bitstrget .
C'est au moment de l'allocation qu'est fix'ee la longueur maximale de la
cha^ine de bits, qui ne peut pas ^etre chang'ee.
.PP
La lib'eration de la place allou'ee `a un BITSTR se fait par la
proc'edure bitfree .
.PP
Le paquetage bitstr d'efinit aussi des proc'edures d'allocation et de
lib'eration de tableaux de cha^ines de bits; un tel tableau est un
pointeur vers un BITSTR et doit donc ^etre d'eclar'e par:
BITSTR *t;
La i-`eme cha^ine de t est d'esign'ee par t[i] .































