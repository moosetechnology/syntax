* This grammar is a (direct) rephrasing of the
* American National Standard X3.159-1989


* The c.prio module solves the "if" "then" ["else"] ambiguity in giving priority
* to shift over reduce (i.e. an else-part is grouped with the privious then-part)

* Priorities and associativities of operators are also specified in the c.prio module

* Other problems may be solved in this grammar if the scanner is able to recognize
* a "typedef-name".


<ansi-c>		= <translation-unit> ;

********************************************************************************************
* 2.5 Literals

<constant>		= %integer_constant ;
<constant>		= %floating_constant ;
<constant>		= %character_constant ;

<string-literal>	= %string_literal ;

********************************************************************************************
** 3.3 EXPRESSIONS

** 3.3.1 Primary expressions
*<primary-expression>	= <identifier> ;
*<primary-expression>	= <constant> ;
*<primary-expression>	= <string-literal> ;
*<primary-expression>	= "(" <expression> ")" ;

<unary-expression>	= <identifier> ;
<unary-expression>	= <constant> ;
<unary-expression>	= <string-literal> ;
<unary-expression>	= "(" <comma-expression> ")" ;


** 3.3.2 Postfix operators
*<postfix-expression>	= <primary-expression> ;
*<postfix-expression>	= <postfix-expression> "[" <expression> "]" ;
*<postfix-expression>	= <postfix-expression> "(" <[expression]> ")" ;
*<postfix-expression>	= <postfix-expression> "." <identifier> ;
*<postfix-expression>	= <postfix-expression> "->" <identifier> ;
*<postfix-expression>	= <postfix-expression> "++" ;
*<postfix-expression>	= <postfix-expression> "--" ;

<unary-expression>	= <unary-expression> "[" <comma-expression> "]" ;
<unary-expression>	= <unary-expression> "(" <[comma-expression]> ")" ;
<unary-expression>	= <unary-expression> "." <identifier> ;
<unary-expression>	= <unary-expression> "->" <identifier> ;
<unary-expression>	= <unary-expression> "++" ;
<unary-expression>	= <unary-expression> "--" ;

** 3.3.3 Unary operators
*<unary-expression>	= <postfix-expression> ;
*<unary-expression>	= "++" <unary-expression> ;
*<unary-expression>	= "--" <unary-expression> ;
*<unary-expression>	= <unary-operator> <cast-expression> ;
*<unary-expression>	= sizeof <unary-expression> ;
*<unary-expression>	= sizeof "(" <type-name> ")" ;

<unary-expression>	= "++" <unary-expression> ;
<unary-expression>	= "--" <unary-expression> ;
<unary-expression>	= <unary-operator> <unary-expression> ;
<unary-expression>	= sizeof <unary-expression> ;
<unary-expression>	= sizeof "(" <type-name> ")" ;

<unary-operator>	= "&" ;
<unary-operator>	= "*" ;
<unary-operator>	= "+" ;
<unary-operator>	= "-" ;
<unary-operator>	= "~" ;
<unary-operator>	= "!" ;

**3.3.4 Cast operators
*<cast-expression>	= <unary-expression> ;
*<cast-expression>	= "(" <type-name> ")" <cast-expression>	;

<expression>		= <unary-expression> ;
<expression>		= "(" <type-name> ")" <expression> ;

**3.3.5 Multiplicative operators
*<multiplicative-expression>
*			= <cast-expression> ;
*<multiplicative-expression>
*			= <multiplicative-expression> "*" <cast-expression> ;
*<multiplicative-expression>
*			= <multiplicative-expression> "/" <cast-expression> ;
*<multiplicative-expression>
*			= <multiplicative-expression> "%" <cast-expression> ;

<expression>		= <expression> "*" <expression> ;
<expression>		= <expression> "/" <expression> ;
<expression>		= <expression> "%" <expression> ;

**3.3.6 Additive operators
*<additive-expression>	= <multiplicative-expression> ;
*<additive-expression>	= <additive-expression> "+" <multiplicative-expression> ;
*<additive-expression>	= <additive-expression> "-" <multiplicative-expression> ; 

<expression>		= <expression> "+" <expression> ;
<expression>		= <expression> "-" <expression> ; 

**3.3.7 Bitwise shift operators
*<shift-expression>	= <additive-expression> ;
*<shift-expression>	= <shift-expression> "<<" <additive-expression> ;
*<shift-expression>	= <shift-expression> ">>" <additive-expression> ;

<expression>		= <expression> "<<" <expression> ;
<expression>		= <expression> ">>" <expression> ;

**3.3.8 Relational operators
*<relational-expression>	= <shift-expression> ;
*<relational-expression>	= <relational-expression> "<" <shift-expression> ;
*<relational-expression>	= <relational-expression> ">" <shift-expression> ;
*<relational-expression>	= <relational-expression> "<=" <shift-expression> ;
*<relational-expression>	= <relational-expression> ">=" <shift-expression> ;

<expression>		= <expression> "<" <expression> ;
<expression>		= <expression> ">" <expression> ;
<expression>		= <expression> "<=" <expression> ;
<expression>		= <expression> ">=" <expression> ;

**3.3.9 Equality operators
*<equality-expression>	= <relational-expression> ;
*<equality-expression>	= <equality-expression> "==" <relational-expression> ;
*<equality-expression>	= <equality-expression> "!=" <relational-expression> ;

<expression>		= <expression> "==" <expression> ;
<expression>		= <expression> "!=" <expression> ;

**3.3.10 Bitwise AND operator
*<AND-expression>	= <equality-expression> ;
*<AND-expression>	= <AND-expression> "&" <equality-expression> ;

<expression>		= <expression> "&" <expression> ;

**3.3.11 Bitwise exclusive OR operator
*<exclusive-OR-expression>
*			= <AND-expression> ;
*<exclusive-OR-expression>
*			= <exclusive-OR-expression> "^" <AND-expression> ;

<expression>		= <expression> "^" <expression> ;

**3.3.12 Bitwise inclusive OR operator
*<inclusive-OR-expression>
*			= <exclusive-OR-expression> ;
*<inclusive-OR-expression>
*			= <inclusive-OR-expression> "|" <exclusive-OR-expression> ;

<expression>		= <expression> "|" <expression> ;


**3.3.13 Logical AND operator
*<logical-AND-expression>
*			= <inclusive-OR-expression> ;
*<logical-AND-expression>
*			= <logical-AND-expression> "&&" <inclusive-OR-expression> ;

<expression>		= <expression> "&&" <expression> ;

**3.3.14 Logical OR operator
*<logical-OR-expression>	= <logical-AND-expression> ;
*<logical-OR-expression>	= <logical-OR-expression> "||" <logical-AND-expression> ;

<expression>		= <expression> "||" <expression> ;

**3.3.15 Conditional operator
*<conditional-expression>
*			= <logical-OR-expression> ;
*<conditional-expression>
*			= <logical-OR-expression> "?" <expression> ":" <conditional-expression> ;

<expression>		= <expression> "?" <comma-expression> ":" <expression> ;

**3.3.16 Assignment operators
*<assignment-expression>	= <conditional-expression> ;
*<assignment-expression>	= <unary-expression> <assignment-operator> <assignment-expression> ;

<expression>		= <unary-expression> <assignment-operator> <expression> ;

<assignment-operator>	= "=" ;
<assignment-operator>	= "*=" ;
<assignment-operator>	= "/=" ;
<assignment-operator>	= "%=" ;
<assignment-operator>	= "+=" ;
<assignment-operator>	= "-=" ;
<assignment-operator>	= "<<=" ;
<assignment-operator>	= ">>=" ;
<assignment-operator>	= "&=" ;
<assignment-operator>	= "^=" ;
<assignment-operator>	= "|=" ;

**3.3.17 Comma operator
*<expression>		= <assignment-expression> ;
*<expression>		= <expression> "," <assignment-expression> ;

<comma-expression>	= <expression> ;
<comma-expression>	= <comma-expression> "," <expression> ;

<[comma-expression]>	= ;
<[comma-expression]>	= <comma-expression> ;

*3.4 CONSTANT EXPRESSIONS
<[constant-expression]>	= ;
<[constant-expression]>	= <constant-expression> ;

*<constant-expression>	= <conditional-expression> ;

<constant-expression>	= <expression> ;

********************************************************************************************
* 3.5 DECLARATIONS
*<declaration-specifiers>
*			= <declaration-specifiers-0> ;
*<declaration-specifiers>
*			= <declaration-specifiers-1> ;

<declaration-specifiers-0>
			= <declaration-specifiers-0> <declaration-specifier-0> ;
<declaration-specifiers-0>
			= <declaration-specifiers-0> <storage-class-specifier> ;
<declaration-specifiers-0>
			= <declaration-specifier-0> ;
<declaration-specifiers-0>
			= <storage-class-specifier> ;

<declaration-specifiers-1>
			= <declaration-specifiers-0> <basic-type-specifier> ;
<declaration-specifiers-1>
			= <declaration-specifiers-0> <typedef-name> ;
<declaration-specifiers-1>
			= <declaration-specifiers-1> <declaration-specifier-0> ;
<declaration-specifiers-1>
			= <declaration-specifiers-1> <storage-class-specifier> ;
<declaration-specifiers-1>
			= <basic-type-specifier> ;
<declaration-specifiers-1>
			= <typedef-name> ;

<declaration-specifier-0>
			= <signedness> ;
<declaration-specifier-0>
			= <storage-length> ;
<declaration-specifier-0>
			= <type-qualifier> ;

<init-declarator+>	= <init-declarator> ;
<init-declarator+>	= <init-declarator+> "," <init-declarator> ;

<init-declarator>	= <declarator> ;
<init-declarator>	= <function-declarator> ;
<init-declarator>	= <declarator> "=" <initializer> ;

* 3.5.1 Storage-class specifiers
<storage-class-specifier>
			= typedef ;
<storage-class-specifier>
			= extern ;
<storage-class-specifier>
			= static ;
<storage-class-specifier>
			= auto ;
<storage-class-specifier>
			= register ;

* 3.5.2 Type specifiers
<signedness>		= signed ;
<signedness>		= unsigned ;

<storage-length>	= short ;
<storage-length>	= long ;

<basic-type-specifier>	= void ;
<basic-type-specifier>	= char ;
<basic-type-specifier>	= int ;
<basic-type-specifier>	= float ;
<basic-type-specifier>	= double ;
<basic-type-specifier>	= <struct-or-union-specifier> ;
<basic-type-specifier>	= <enum-specifier> ;
*<basic-type-specifier>	= <typedef-name> ;

* 3.5.2.1 Structure and union specifiers
<struct-or-union-specifier>
			= <struct-or-union> <d-identifier> "{" <struct-declaration+> "}" ;
<struct-or-union-specifier>
			= <struct-or-union> "{" <struct-declaration+> "}" ;
<struct-or-union-specifier>
			= <struct-or-union> <d-identifier> ;

<struct-or-union>	= struct ;
<struct-or-union>	= union ;

<struct-declaration+>	= <struct-declaration> ;
<struct-declaration+>	= <struct-declaration+> <struct-declaration> ;

*<struct-declaration>	= <specifier-qualifier+> <struct-declarator+> ";" ;
<struct-declaration>	= <specifier-qualifier+-0> <struct-declarator+> ";" ;
<struct-declaration>	= <specifier-qualifier+-1> <struct-declarator+> ";" ;

*<specifier-qualifier+>	= <specifier-qualifier+-0> ;
*<specifier-qualifier+>	= <specifier-qualifier+-1> ;

<specifier-qualifier+-0>
			= <specifier-qualifier+-0> <declaration-specifier-0> ;
<specifier-qualifier+-0>
			= <declaration-specifier-0> ;

<specifier-qualifier+-1>
			= <specifier-qualifier+-0> <basic-type-specifier> ;
<specifier-qualifier+-1>
			= <specifier-qualifier+-0> <typedef-name> ;
<specifier-qualifier+-1>
			= <specifier-qualifier+-1> <declaration-specifier-0> ;
<specifier-qualifier+-1>
			= <basic-type-specifier> ;
<specifier-qualifier+-1>
			= <typedef-name> ;

<struct-declarator+>	= <struct-declarator> ;
<struct-declarator+>	= <struct-declarator+> "," <struct-declarator> ;

<struct-declarator>	= <declarator> ;
<struct-declarator>	= <function-declarator> ;
<struct-declarator>	= <declarator> ":" <constant-expression> ;
<struct-declarator>	= ":" <constant-expression> ;

* 3.5.2.2 Enumeration specifiers
<enum-specifier>	= enum <d-identifier> "{" <enumerator+> "}" ;
<enum-specifier>	= enum "{" <enumerator+> "}" ;
<enum-specifier>	= enum <d-identifier> ;

<enumerator+>		= <enumerator> ;
<enumerator+>		= <enumerator+> "," <enumerator> ;

<enumerator>		= <enumeration-constant> ;
<enumerator>		= <enumeration-constant> "=" <constant-expression> ;

<enumeration-constant>	= <d-identifier> ;

* 3.5.3 Type qualifiers
<type-qualifier>	= const ;
<type-qualifier>	= volatile ;

* 3.5.4 Declarators
<declarator>		= <pointer> <direct-declarator> ;
<declarator>		= <direct-declarator> ;

<direct-declarator>	= <d-identifier> ;
<direct-declarator>	= "(" <declarator> ")" ;
<direct-declarator>	= <direct-declarator> "[" <[constant-expression]> "]" ;
*covered by <function-declarator>
*<direct-declarator>	= <direct-declarator> <parameters> ;

<parameters>		= "(" ")" ;
<parameters>		= "(" <parameter-type+> ")" ;
<parameters>		= "(" <identifier+> ")" ;

<pointer>		= "*" <type-qualifier+> ;
<pointer>		= "*" ;
<pointer>		= "*" <type-qualifier+> <pointer> ;
<pointer>		= "*" <pointer> ;

<type-qualifier+>	= <type-qualifier> ;
<type-qualifier+>	= <type-qualifier+> <type-qualifier> ;

<parameter-type+>	= <parameter+> ;
<parameter-type+>	= <parameter+> "," "..." ;

<parameter+>		= <parameter-declaration> ;
<parameter+>		= <parameter+> "," <parameter-declaration> ;

*<parameter-declaration>	= <declaration-specifiers> <declarator> ;
<parameter-declaration>	= <declaration-specifiers-0> <declarator> ;
<parameter-declaration>	= <declaration-specifiers-1> <declarator> ;
*<parameter-declaration>	= <declaration-specifiers> <function-declarator> ;
<parameter-declaration>	= <declaration-specifiers-0> <function-declarator> ;
<parameter-declaration>	= <declaration-specifiers-1> <function-declarator> ;
*<parameter-declaration>	= <declaration-specifiers> <[abstract-declarator]> ;
<parameter-declaration>	= <declaration-specifiers-0> <[abstract-declarator]> ;
<parameter-declaration>	= <declaration-specifiers-1> <[abstract-declarator]> ;

<identifier+>		= <d-identifier> ;
<identifier+>		= <identifier+> "," <d-identifier> ;

* 3.5.5 Type names
<type-name>		= <specifier-qualifier+-0> <[abstract-declarator]> ;
<type-name>		= <specifier-qualifier+-1> <[abstract-declarator]> ;

<[abstract-declarator]>	= ;
<[abstract-declarator]>	= <abstract-declarator> ;

<abstract-declarator>	= <pointer> ;
<abstract-declarator>	= <pointer> <direct-abstract-declarator+> ;
<abstract-declarator>	= <direct-abstract-declarator+> ;

<direct-abstract-declarator+>
			= <direct-abstract-declarator> ;
<direct-abstract-declarator+>
			= <direct-abstract-declarator+> <direct-abstract-declarator> ;

<direct-abstract-declarator>
			= "(" <abstract-declarator> ")" ;
<direct-abstract-declarator>
			= "[" <[constant-expression]> "]" ;
<direct-abstract-declarator>
			= "(" <parameter-type+> ")" ;
<direct-abstract-declarator>
			= "(" ")" ;

* 3.5.6 Type definitions
*<typedef-name>		= %typedef-name ;
<typedef-name>		= %identifier ;

* 3.5.7 Initialization
*<initializer>		= <assignment-expression> ;
<initializer>		= <expression> ;
<initializer>		=  "{" <initializer+> "}" ;
<initializer>		=  "{" <initializer+> "," "}" ;

<initializer+>		= <initializer> ;
<initializer+>		= <initializer+> "," <initializer> ;

<identifier>		= %identifier ;
<d-identifier>		= %identifier ;

********************************************************************************************
* 3.6 STATEMENTS
<statement>		= <labeled-statement> ;
<statement>		= <compound-statement> ;
<statement>		= <expression-statement> ;
<statement>		= <selection-statement> ;
<statement>		= <iteration-statement> ;
<statement>		= <jump-statement> ;

* 3.6.1 Labeled statements
<labeled-statement>	= <d-identifier> ":" <statement> ;
<labeled-statement>	= case <constant-expression> ":" <statement> ;
<labeled-statement>	= default ":" <statement> ;

* 3.6.2 Compound statement or block
*<compound-statement>	= "{" <declaration+> <statement+> "}" ;
<compound-statement>	= "{" <declaration*-and-statement+> "}" ;
<compound-statement>	= "{" <declaration+> "}" ;
*<compound-statement>	= "{" <statement+> "}" ;
<compound-statement>	= "{" "}" ;

<declaration+>		= <internal-declaration> ;
<declaration+>		= <declaration+> <internal-declaration> ;

*<internal-declaration>	= <declaration-specifiers> <init-declarator+> ";" ;
<internal-declaration>	= <declaration-specifiers-0> <init-declarator+> ";" ;
<internal-declaration>	= <declaration-specifiers-1> <init-declarator+> ";" ;
*<internal-declaration>	= <declaration-specifiers> ";" ;
<internal-declaration>	= <declaration-specifiers-0> ";" ;
<internal-declaration>	= <declaration-specifiers-1> ";" ;

<declaration*-and-statement+>
			= <statement> ;
<declaration*-and-statement+>
			= <declaration+> <statement> ;
<declaration*-and-statement+>
			= <declaration*-and-statement+> <statement> ;

* 3.6.3 Expression and null statements
<expression-statement>	= <comma-expression> ";" ;
<expression-statement>	=  ";" ;

* 3.6.4 Selection statements
<selection-statement>	= if "(" <comma-expression> ")" <statement> ;
<selection-statement>	= if "(" <comma-expression> ")" <statement> else <statement> ;
<selection-statement>	= switch "(" <comma-expression> ")" <statement> ;

* 3.6.5 Iteration statements
<iteration-statement>	= while "(" <comma-expression> ")" <statement> ;
<iteration-statement>	= do <statement> while "(" <comma-expression> ")" ";" ;
<iteration-statement>	= for "(" <[comma-expression]> ";" <[comma-expression]> ";" <[comma-expression]> ")"
				<statement> ;

* 3.6.6 Jump statements
<jump-statement>	= goto <identifier> ";" ;
<jump-statement>	= continue ";" ;
<jump-statement>	= break ";" ;
<jump-statement>	= return <[comma-expression]> ";" ;


********************************************************************************************
* 3.7 EXTERNALS DEFINITIONS
<translation-unit>	= <external-declaration> ;
<translation-unit>	= <translation-unit> <external-declaration> ;

<external-declaration>	= <function-definition> ;
<external-declaration>	= <internal-declaration> ;
<external-declaration>	= <init-declarator+> ";" ;
<external-declaration>	= ";" ;

* 3.7.1 Function definitions
*<function-definition>	= <declaration-specifiers> <function-declarator> <declaration+> <compound-statement> ;
<function-definition>	= <declaration-specifiers-0> <function-declarator> <declaration+> <compound-statement> ;
<function-definition>	= <declaration-specifiers-1> <function-declarator> <declaration+> <compound-statement> ;
<function-definition>	= <function-declarator> <declaration+> <compound-statement> ;
*<function-definition>	= <declaration-specifiers> <function-declarator> <compound-statement> ;
<function-definition>	= <declaration-specifiers-0> <function-declarator> <compound-statement> ;
<function-definition>	= <declaration-specifiers-1> <function-declarator> <compound-statement> ;
<function-definition>	= <function-declarator> <compound-statement> ;


<function-declarator>	= <pointer> <direct-function-declarator> ;
<function-declarator>	= <direct-function-declarator> ;

<direct-function-declarator>
			= "(" <function-declarator> ")" ;
<direct-function-declarator>
			= <direct-function-declarator> "[" <[constant-expression]> "]" ;
<direct-function-declarator>
			= <direct-function-declarator> <parameters> ;
<direct-function-declarator>
			= <direct-declarator> <parameters> ;
