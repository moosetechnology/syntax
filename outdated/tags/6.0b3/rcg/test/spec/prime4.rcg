%
% L = {w | |w| is a prime et w \in T^*}
%
% Temps d'analyse n log n (theorique et pratique)
% La verif que a^19489 est premier prend 1s sur ma SS10
%

S(X)		--> Prime(X) .
S(X)		--> T(X, X) . % sert uniquement a definir l'ensemble T
% Peut etre qu'avoir le predicat predefini $False, qui retourne toujours faux
% (La clause qui le contient est inutile et donc jamais activee)
% serait + propre.
% S(X)		--> T(X) &False() .
% T(\a...\z)	--> .

% Clause bidon qui n'est jamais vraie...
% Le 1er arg de T contient la liste de tous les symboles terminaux
T(\a, )		--> .

% Prime est defini sans aucune reference explicite aux elements de T
Prime(X)	--> !NotPrime(X) .

%
% 0 n'est pas un nombre premier
% Un nombre n strictement positif n'est pas un nombre premier ssi il existe
% deux entiers k et x tels que n = k*x et 1 < x, k < n
%
% Plus precisement ces nombres k et x doivent etre compris entre 2 et n^{1/2}
% 2 <= x, k <= n^{1/2}
%


% 0 n'est pas un nombre premier
NotPrime()		--> .
% 1, 2 et 3 sont premiers
% Si n est tel qu'il existe des nombres x1, x2, x3 et k t.q. x1+x2+x3=n, x1=x2, x1>=2, x1^2 <= n
% et x3=k*x1 alors n n'est pas premier
%
% Complexite : il y a n/2 decoupages de la chaine source (&StrEqLen(X1, X2))
% Pour un decoupage donne (2 <= x1 <=n/2), deux cas peuvent se produire soit x1 > n^{1/2}
% soit x1 <= n^{1/2}.  Si x1 > n^{1/2}, XYleqZ retourne faux et Mul n'est pas execute (on
% suppose que les predicats s'executent de gauche a droite). Si x1 <= n^{1/2}, XYleqZ retourne
% vrai et Mul s'execute.  On a donc
%   - pour XYleqZ 	\Sigma_{x1=n^{1/2}}^{n/2} n/x1		% valeur FALSE
%                	+\Sigma_{x1=2}^{n^{1/2}} x1		% valeur TRUE
%                	= O(nlogn)+O(n)
%   - pour Mul		\Sigma_{x1=2}^{n^{1/2}} n/x1
%			= O(nlogn)
%
% Soit au total		O(nlogn)
%

NotPrime(X1 X2 Y Z)	--> &StrLen(2, X1)
			    &StrEqLen(X1 X2, Y)
			    X2leqY(Y, X1 X2 Y Z)
%			    XyleqZ(Y, Y, X1 X2 Y Z)
%			    Prime (Y)
			    Mul(Y, Z) .

% X2leqY(X, Y) <=> |X|*|X| <= |Y|
% Complexite en |X| quand ca marche
% vrai si |X| = 0
X2leqY(, Y)			--> .
% Si |X| >= 1 et si (|X|-1)^2 <= |Y|-2|X|+1 => |X|*|X| <= |Y|
X2leqY(X1 X2, Y1 Y2 Y3 Y4)	--> &StrLen(1, X2) &StrLen(1, Y1) &StrEqLen(X1, Y3) &StrEqLen(X1, Y4)
				    X2leqY(X1, Y1 Y2) .


% XYleqZ(X, Y, Z) <=> |X|*|Y| <= |Z|
% Soit |x| = max (|X|, |Y|) et |y| = min (|X|, |Y|)
% Complexite en |y| quand ca marche
% Complexite en |Z|/|x| quand ca marche pas
% Le veritable appel se fait avec |X| >= |Y|
% XYleqZ(X1 X2, Y, Z)		--> &StrEqLen(X1, Y) XyleqZ(X1 X2, Y, Z) .
% XYleqZ(X, Y1 Y2 Y3, Z)	--> &StrEqLen(X, Y1) &StrLen(1, Y3) XyleqZ(Y1 Y2 Y3, X, Z) .
% vrai si |Y| = 0
% XyleqZ(X, , Z)			--> .
% vrai si |X| >= |Y| >= 1 et |Z| >= |X| et si |X|*(|Y|-1) <= |Z|-|X|
% XyleqZ(X, Y1 Y2, Z1 Z2)	--> &StrLen(1, Y2) &StrEqLen(X, Z2) XyleqZ(X, Y1, Z1) .

% Mul (X,Y) regarde si |Y| est un multiple de |X| (|X| >= 0 et |Y| >= 0).
% Complexite max |Y|/|X| mais souvent bien meilleur
% 0 est un multiple de |X|
Mul(X, )			--> .
% Y est un multiple de 1
% Mul(X, Y)			--> &StrLen(1, X) .
% 2Y est un multiple de 2
% Mul(X, Y1 Y2)			--> &StrLen(2, X) &StrEqLen(Y1, Y2) .
% 3Y est un multiple de 3
% Mul(X, Y1 Y2 Y3)		--> &StrLen(3, X) &StrEqLen(Y1, Y2) &StrEqLen(Y1, Y3) .
% 2|Y|+2 est un multiple de 2|X| ssi |Y|+1 est un multiple de |X|
Mul(X1 X2, Y1 Y2 Y3 Y4)		--> &StrEqLen(X1, X2) &StrEqLen(Y1, Y2) &StrLen(1, Y3) &StrLen(1, Y4) Mul(X1, Y2 Y3) .
% 2|Y|+2 est un multiple de 2|X|+1 ssi |Y|+1 est un multiple de 2|X|+1
Mul(X1 X2 X3, Y1 Y2 Y3 Y4)	--> &StrEqLen(X1, X2) &StrLen(1, X3) &StrEqLen(Y1, Y2) &StrLen(1, Y3) &StrLen(1, Y4)
				    Mul(X1 X2 X3, Y2 Y3) .
% Si |Y| >= |X|, 2|Y|+1 est un multiple de 2|X|+1 ssi |Y|-|X| est un multiple de 2|X|+1
Mul(X1 X2 X3, Y1a Y1b Y2 Y3)	--> &StrEqLen(X1, X2) &StrLen(1, X3) &StrEqLen(Y1a Y1b, Y2) &StrLen(1, Y3)
			    	    &StrEqLen(X1, Y1a) Mul(X1 X2 X3, Y1b) .


% Un nombre |Y1Y2| est un multiple de |X|>0 si |X|==|Y2| et si |Y1| est un multiple de |X|
% Mul(X, Y1 Y2)		--> &StrEqLen (X, Y2) Mul(X, Y1) .
