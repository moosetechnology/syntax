/* ********************************************************
   *                                                      *
   *                                                      *
   * Copyright (c) 1985 by Institut National de Recherche *
   *                    en Informatique et en Automatique *
   *                                                      *
   *                                                      *
   ******************************************************** */




/* ********************************************************
   *                                                      *
   *  Produit de l'equipe Langages et Traducteurs.  (phd) *
   *                                                      *
   ******************************************************** */




/* Acces au source */

/************************************************************************/
/* Historique des modifications, en ordre chronologique inverse:	*/
/************************************************************************/
/* 13-02-87 12:20 (phd):	Seule la version BUG est en verbose	*/
/************************************************************************/
/* 20-01-87 15:43 (phd):	Ajout de previous_char dans sxsrcpush	*/
/************************************************************************/
/* 16-01-87 11:37 (phd):	Modifications en profondeur pour	*/
/*				ajouter "previous_char" et maintenir	*/
/*				des "source_coords" exacts.		*/
/************************************************************************/
/* 22-05-86 14:50 (phd):	Ajout de l'option "SIMPLE", qui permet	*/
/*				de diminuer la taille du source manager	*/
/*				au detriment du temps d'execution	*/
/************************************************************************/
/* 21-05-86 14:50 (phd):	Correction d'erreur dans "sxsrcpush"	*/
/************************************************************************/
/* 16-05-86 17:10 (phd):	Modification du profil de "sxsrc_mngr"	*/
/************************************************************************/
/* 15-05-86 12:10 (phd):	Ajout du "copyright"			*/
/************************************************************************/
/* 15-05-86 11:45 (phd):	Ajout de "localbuf" et "usinglocalbuf"	*/
/************************************************************************/
/* 15-05-86 10:55 (phd):	Ajout de cette rubrique "modifications"	*/
/************************************************************************/

#ifndef lint
#ifdef	BUG
static char	what [] = "@(#)sxsrcmngr.d.c\t- SYNTAX [unix] - 20 Janvier 1987";
#else
static char	what [] = "@(#)sxsrcmngr.c	- SYNTAX [unix] - 13 Fevrier 1987";
#endif
#endif

#include "sxunix.h"


#ifdef	BUG

static	srcdebug (format, arg)
    char	*format, *arg;
{
    register unsigned int	index;

    fprintf (sxstdout, format, arg);
    fprintf (sxstdout, ": {\n");
    fprintf (sxstdout, "\tinfile = 0x%lx\n", sxsrcmngr.infile);
    fprintf (sxstdout, "\tsource_coord = {\"%s\"; %lu; %u;}\n", sxsrcmngr.source_coord.file_name, sxsrcmngr.source_coord.
	 line, sxsrcmngr.source_coord.column);
    fprintf (sxstdout, "\tprevious_char = '%s' (%03o)\n", CHAR_TO_STRING (sxsrcmngr.previous_char), sxsrcmngr.
	 previous_char);
    fprintf (sxstdout, "\tcurrent_char = '%s' (%03o)\n", CHAR_TO_STRING (sxsrcmngr.current_char), sxsrcmngr.current_char)
	 ;
    fprintf (sxstdout, "\tbuffer = 0x%lx [%d]", sxsrcmngr.buffer, sxsrcmngr.buflength);

    if (sxsrcmngr.buflength > 0) {
	fprintf (sxstdout, " [0..%d] = \"", sxsrcmngr.bufused);

	for (index = 0; index <= sxsrcmngr.bufused; index++)
	    fputs (CHAR_TO_STRING (sxsrcmngr.buffer [index]), sxstdout);

	fputc ('"', sxstdout);
    }

    fprintf (sxstdout, " (%svalid)\n", sxsrcmngr.has_buffer ? "" : "in");

    if (sxsrcmngr.has_buffer) {
	fprintf (sxstdout, "\tbufindex = %d\n", sxsrcmngr.bufindex);
	fprintf (sxstdout, "\tlabufindex = %d\n", sxsrcmngr.labufindex);
    }

    fprintf (sxstdout, "\t}\n");
}



char	BEGIN_FMT [] = "%s () begins with", END_FMT [] = "%s () ends with";

#endif


#ifndef	LOCALBUFLENGTH
#	define	LOCALBUFLENGTH	8	/* Smallest buffer allocated */
#endif


#ifndef	SIMPLE

/* Local buffer, to avoid repetitive small allocations */

static struct localbuf {
	   SHORT	buffer [LOCALBUFLENGTH];
       }	localbuf;
static struct localcoords {
	   struct sxsource_coord	bufcoords [LOCALBUFLENGTH];
       }	localcoords;
static BOOLEAN	usinglocalbuf = {FALSE};




#endif


/* Acces au caractere suivant */

SHORT	sxnext_char ()
{

#ifdef	BUG

    srcdebug (BEGIN_FMT, "sxnext_char");

#endif

    sxsrcmngr.previous_char = sxsrcmngr.current_char;

    if (sxsrcmngr.has_buffer) {
	if (sxsrcmngr.bufindex < sxsrcmngr.bufused) {
	    sxsrcmngr.source_coord = sxsrcmngr.bufcoords [++sxsrcmngr.bufindex];

#ifdef	BUG

	    sxsrcmngr.current_char = sxsrcmngr.buffer [sxsrcmngr.bufindex];
	    goto end;


#else

	    return sxsrcmngr.current_char = sxsrcmngr.buffer [sxsrcmngr.bufindex];

#endif

	}

	sxsrcmngr.has_buffer = FALSE;
    }

    if (sxsrcmngr.current_char != NEWLINE)
	sxsrcmngr.source_coord.column++;
    else {
	sxsrcmngr.source_coord.line++, sxsrcmngr.source_coord.column = 1;


#ifdef	BUG

	if (sxverbosep)
	    putc ('.', sxtty);

#endif

    }


#ifdef	BUG

    sxsrcmngr.current_char = sxgetchar ();
end:
    srcdebug (END_FMT, "sxnext_char");
    return sxsrcmngr.current_char;


#else

    return sxsrcmngr.current_char = sxgetchar ();

#endif

}




/* Acces au caractere en avance suivant */

SHORT	sxlanext_char ()
{

#ifdef	BUG

    srcdebug (BEGIN_FMT, "sxlanext_char");

    if (sxverbosep)
	fputc (':', sxtty);


#endif

    if (sxsrcmngr.labufindex == sxsrcmngr.bufused) {
	if (++sxsrcmngr.bufused == sxsrcmngr.buflength)

#ifndef	SIMPLE

	    if (sxsrcmngr.buffer == localbuf.buffer) {
		usinglocalbuf = FALSE;
		*(struct localbuf*) (sxsrcmngr.buffer = (SHORT*) sxalloc (sxsrcmngr.buflength *= 2, sizeof (SHORT))) =
		     localbuf, *(struct localcoords*) (sxsrcmngr.bufcoords = (struct sxsource_coord*) sxalloc (sxsrcmngr.
		     buflength, sizeof (struct sxsource_coord))) = localcoords;
	    }
	    else

#endif

		sxsrcmngr.buffer = (SHORT*) sxrealloc (sxsrcmngr.buffer, sxsrcmngr.buflength *= 2, sizeof (SHORT)),
		     sxsrcmngr.bufcoords = (struct sxsource_coord*) sxrealloc (sxsrcmngr.bufcoords, sxsrcmngr.buflength,
		     sizeof (struct sxsource_coord));

	sxsrcmngr.buffer [sxsrcmngr.bufused] = sxgetchar (), sxsrcmngr.bufcoords [sxsrcmngr.bufused] = sxsrcmngr.
	     bufcoords [sxsrcmngr.labufindex];

	if (sxsrcmngr.buffer [sxsrcmngr.labufindex] != NEWLINE)
	    sxsrcmngr.bufcoords [sxsrcmngr.bufused].column++;
	else
	    sxsrcmngr.bufcoords [sxsrcmngr.bufused].line++, sxsrcmngr.bufcoords [sxsrcmngr.bufused].column = 1;
    }

    sxsrcmngr.labufindex++;

#ifdef	BUG

    srcdebug (END_FMT, "sxlanext_char");

#endif

    return sxsrcmngr.buffer [sxsrcmngr.labufindex];
}




/* Acces au premier caractere en avance */

SHORT	sxlafirst_char ()
{

#ifdef	BUG

    srcdebug (BEGIN_FMT, "sxlafirst_char");


#endif

    if (!sxsrcmngr.has_buffer) {
	if (sxsrcmngr.buffer == NULL)

#ifndef	SIMPLE

	    if (!usinglocalbuf) {
		sxsrcmngr.buffer = localbuf.buffer, sxsrcmngr.bufcoords = localcoords.bufcoords;
		sxsrcmngr.buflength = LOCALBUFLENGTH;
		usinglocalbuf = TRUE;
	    }
	    else

#endif

		sxsrcmngr.buffer = (SHORT*) sxalloc (sxsrcmngr.buflength = LOCALBUFLENGTH, sizeof (SHORT)), sxsrcmngr.
		     bufcoords = (struct sxsource_coord*) sxalloc (sxsrcmngr.buflength, sizeof (struct sxsource_coord));

	sxsrcmngr.buffer [0] = sxsrcmngr.current_char, sxsrcmngr.bufcoords [0] = sxsrcmngr.source_coord;
	sxsrcmngr.bufindex = sxsrcmngr.labufindex = sxsrcmngr.bufused = 0;
	sxsrcmngr.has_buffer = TRUE;
    }
    else
	sxsrcmngr.labufindex = sxsrcmngr.bufindex;


#ifdef	BUG

    fprintf (sxstdout, "sxlafirst_char () calls sxlanext_char ()...\n");

#endif

    return sxlanext_char ();
}




/* Recul d'un caractere: le scanner veut inserer un caractere devant */

VOID	sxX (inserted)
    SHORT	inserted;

/* On est forcement dans le cas ou le buffer est valide, puisqu'une	*/
/* correction d'erreur impose un look-ahead prealable.  Par ailleurs,	*/
/* cette procedure n'est jamais appelee deux fois de suite, puisqu'une	*/
/* correction d'erreur est censee etre correcte...			*/

{

#ifdef	BUG

    srcdebug ("sxX (%s) decrements \"bufindex\" from ", CHAR_TO_STRING (inserted));

#endif

    sxsrcmngr.bufindex--;
    sxsrcmngr.current_char = inserted;
}




/* Retour en arriere dans la lecture en avance */

VOID	sxlaback (backward_number)
    int		backward_number;

/* Une erreur a ete detectee et corrigee en look-ahead.  Celui-ci doit	*/
/* reprendre plus haut.  "backward_number" est cense etre valide	*/
/* vis-a-vis de la situation dans le "buffer".				*/

{

#ifdef	BUG

    char	arg [32];

    sprintf (arg, "%d", backward_number);
    srcdebug ("sxlaback (%s) decrements \"labufindex\" from ", arg);

#endif

    sxsrcmngr.labufindex -= backward_number;
}




/* Push a string ahead of the current character */

VOID	sxsrcpush (previous_char, chars, coord)
    SHORT	previous_char;
    register char	*chars;
    struct sxsource_coord	coord;

/* On traite une action "@Release".  Le "source manager" est dans un */
/* etat quelconque.  En particulier "buffer" peut exister ou non...  */

{
    register int	length = strlen (chars);

#ifdef	BUG

    char	header [200];

    sprintf (header, "sxsrcpush ('%s', \"%.110s\", {\"%.50s\"; %lu; %u;}) %%ss with ", CHAR_TO_STRING (previous_char),
	 chars, coord.file_name, coord.line, coord.column);
    srcdebug (header, "begin");

    if (sxverbosep)
	fputc ('@', sxtty);


#endif

    if (sxsrcmngr.has_buffer) {
	/* Must keep its contents in the right place */

	/* First see if it is big enough */
	{
	    register int	minlength;

	    minlength = (sxsrcmngr.bufused - sxsrcmngr.bufindex + 1) + length;

	    if (sxsrcmngr.buflength < minlength)

#ifndef	SIMPLE

		if (sxsrcmngr.buffer == localbuf.buffer) {
		    usinglocalbuf = FALSE;
		    *(struct localbuf*) (sxsrcmngr.buffer = (SHORT*) sxalloc (sxsrcmngr.buflength = minlength, sizeof (
			 SHORT))) = localbuf, *(struct localcoords*) (sxsrcmngr.bufcoords = (struct sxsource_coord*)
			 sxalloc (sxsrcmngr.buflength, sizeof (struct sxsource_coord))) = localcoords;
		}
		else

#endif

		    sxsrcmngr.buffer = (SHORT*) sxrealloc (sxsrcmngr.buffer, sxsrcmngr.buflength = minlength, sizeof (SHORT)), sxsrcmngr.bufcoords = (struct sxsource_coord*) sxrealloc (sxsrcmngr.bufcoords, sxsrcmngr.buflength, sizeof (struct sxsource_coord));
	}


/* If there is not room enough, push the contents to the right */

	if (sxsrcmngr.bufindex < length) {
	    register SHORT	*buf1, *buf2;
	    register struct sxsource_coord	*coords1, *coords2;
	    register int	count;

	    count = sxsrcmngr.bufused - sxsrcmngr.bufindex;
	    buf1 = &sxsrcmngr.buffer [sxsrcmngr.bufused], coords1 = &sxsrcmngr.bufcoords [sxsrcmngr.bufused];
	    buf2 = &sxsrcmngr.buffer [sxsrcmngr.bufused = sxsrcmngr.buflength - 1], coords2 = &sxsrcmngr.bufcoords [
		 sxsrcmngr.bufused];
	    sxsrcmngr.bufindex = sxsrcmngr.bufused - count;

	    while (count-- != 0)
		*buf2-- = *buf1--, *coords2-- = *coords1--;
	}
    }
    else {
	/* No need to keep the contents.  Just make sure it is big enough */
	sxsrcmngr.bufindex = sxsrcmngr.bufused = length;

	if (sxsrcmngr.buflength <= length) {
	    sxsrcmngr.buflength = length + 1;

	    if (sxsrcmngr.buffer != NULL)

#ifndef	SIMPLE

		if (sxsrcmngr.buffer == localbuf.buffer)
		    usinglocalbuf = FALSE;
		else

#endif

		    sxfree (sxsrcmngr.buffer), sxfree (sxsrcmngr.bufcoords);


#ifndef	SIMPLE

	    if (!usinglocalbuf && sxsrcmngr.buflength <= LOCALBUFLENGTH) {
		sxsrcmngr.buffer = localbuf.buffer, sxsrcmngr.bufcoords = localcoords.bufcoords;
		sxsrcmngr.buflength = LOCALBUFLENGTH;
		usinglocalbuf = TRUE;
	    }
	    else

#endif

		sxsrcmngr.buffer = (SHORT*) sxalloc (sxsrcmngr.buflength, sizeof (SHORT)), sxsrcmngr.bufcoords = (struct
		     sxsource_coord*) sxalloc (sxsrcmngr.buflength, sizeof (struct sxsource_coord));
	}

	sxsrcmngr.has_buffer = TRUE;
    }


/* Now copy the last char returned, preceded by the "chars" */

    sxsrcmngr.buffer [sxsrcmngr.bufindex] = sxsrcmngr.current_char, sxsrcmngr.bufcoords [sxsrcmngr.bufindex] = sxsrcmngr.
	 source_coord;

    {
	register SHORT	*buf;
	register struct sxsource_coord	*coords;

	buf = &sxsrcmngr.buffer [sxsrcmngr.bufindex -= length], coords = &sxsrcmngr.bufcoords [sxsrcmngr.bufindex];

	while (length-- != 0) {
	    *coords++ = coord;

	    if ((*buf++ = *chars++) != NEWLINE)
		coord.column++;
	    else
		coord.line++, coord.column = 1;
	}
    }


/* And lastly update what is seen from the outside */

    sxsrcmngr.previous_char = previous_char;
    sxsrcmngr.current_char = sxsrcmngr.buffer [sxsrcmngr.bufindex], sxsrcmngr.source_coord = sxsrcmngr.bufcoords [
	 sxsrcmngr.bufindex];

#ifdef	BUG

    srcdebug (header, "end");

#endif

}




/*VARARGS1*/

VOID	sxsrc_mngr (what, infile, file_name)
    int		what;
    FILE	*infile;
    char	*file_name;
{

#ifdef	BUG

    char	header [80];

    sprintf (header, "sxsrc_mngr (%d) %%ss with ", what);
    srcdebug (header, "begin");


#endif

    switch (what) {
    case INIT:
	sxsrcmngr.infile = infile;
	sxsrcmngr.source_coord.file_name = file_name;
	sxsrcmngr.source_coord.line = sxsrcmngr.source_coord.column = 0;
	sxsrcmngr.previous_char = EOF;
	sxsrcmngr.current_char = NEWLINE;
	sxsrcmngr.buffer = NULL;
	sxsrcmngr.buflength = sxsrcmngr.bufused = sxsrcmngr.bufindex = 0;
	sxsrcmngr.has_buffer = FALSE;
	break;

    case FINAL:
	if (sxsrcmngr.buffer != NULL) {

#ifndef	SIMPLE

	    if (sxsrcmngr.buffer == localbuf.buffer)
		usinglocalbuf = FALSE;
	    else

#endif

		sxfree (sxsrcmngr.buffer), sxfree (sxsrcmngr.bufcoords);

	    sxsrcmngr.buffer = NULL;
	}

	break;
    }


#ifdef	BUG

    srcdebug (header, "end");

#endif

}
