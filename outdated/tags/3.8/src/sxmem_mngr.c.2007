/* ********************************************************
   *							  *
   * Copyright (c) 1985 by Institut National de Recherche *
   *			en Informatique et en Automatique *
   *			and Universite d'Orleans	  *
   *							  *
   ******************************************************** */


/* ********************************************************
   *     Produit de l'equipe Langages et Traducteurs.     *
   ******************************************************** */


/* ********************************************************
   *							  *
   * Allocation controlee pour la version UN*X de SYNTAX. *
   * Ecrit par JJL.  Modifications de PhD.		  *
   *							  *
   ******************************************************** */



/************************************************************************/
/* Historique des modifications, en ordre chronologique inverse:	*/
/************************************************************************/
/* 24-11-87 17:35 (phd):	Appel de sxgc en cas de probleme	*/
/************************************************************************/
/* 27-08-87 11:09 (phd):	Ajout des appels a "malloc_debug".	*/
/************************************************************************/
/* 17-08-87 09:37 (phd):	Utilisation de "free" plutot que de	*/
/*				"cfree", qui n'est pas documentee sur	*/
/*				tous les systemes.			*/
/************************************************************************/
/* 16-12-86 10:30 (phd):	Correction de la modification de pb...	*/
/************************************************************************/
/* 08-10-86 15:10 (pb):		sxtmsg remplace par fprintf		*/
/************************************************************************/
/* 04-06-86 14:52 (phd):	Passage de NULL a sxtmsg		*/
/************************************************************************/
/* 22-05-86 17:05 (phd):	Message sur "sxcont_free (NULL)"		*/
/************************************************************************/
/* 16-05-86 10:40 (phd):	Remplacement de "BUGALLOC" par "BUG"	*/
/************************************************************************/
/* 16-05-86 10:36 (phd):	Ajout de cette rubrique "modifications"	*/
/************************************************************************/

#ifndef lint
#ifdef	BUG
char	what_sxmem_mngr [] = "@(#)sxmem_mngr.d.c\t- SYNTAX [unix] - 24 Novembre 1987";
#else
char	what_sxmem_mngr [] = "@(#)sxmem_mngr.c\t- SYNTAX [unix] - 24 Novembre 1987";
#endif
#endif


# include	"sxunix.h"
# define BELL	((char) 7)



#ifdef	EBUG_ALLOC
static SXBOOLEAN debug_initiated = {FALSE};
extern int 	malloc_debug ();
# define MALLOC_DEBUG()	(debug_initiated || (malloc_debug (2), debug_initiated = TRUE))
#else
# define MALLOC_DEBUG()	FALSE
#endif



extern VOID	sxgc () /* exit when no more allocation is possible */ ;



char	*sxcont_malloc (size)
    int		size;

/* Allocate a block of size size or exit */

{
    register char	*result;

    MALLOC_DEBUG ();

# ifdef BUG
    fprintf (sxstdout, "mallocating %d:", size);
# endif

    while ((result = malloc ((unsigned)size)) == NULL)
	sxgc ();

# ifdef BUG
    fprintf (sxstdout, "\t%X allocated\n", result);
# endif

    return result;
}



char	*sxcont_alloc (n, size)
    int		n, size;

/* Allocate n blocks of size size or exit */

{
    register char	*result;

    MALLOC_DEBUG ();

# ifdef BUG
    fprintf (sxstdout, "allocating %d (%d):", n, size);
# endif

    while ((result = calloc ((unsigned)n, (unsigned)size)) == NULL)
	sxgc ();

# ifdef BUG
    fprintf (sxstdout, "\t%X allocated\n", result);
# endif

    return result;
}



char	*sxcont_realloc (table, size)
    char	*table;
    int		size;

/* Reallocate table with new size or exit */

{
    register char	*result;

    MALLOC_DEBUG ();

# ifdef BUG
    fprintf (sxstdout, "\nreallocating %X (%d):", table, size);
# endif

    while ((result = realloc (table, (unsigned)size)) == NULL)
	sxgc ();

# ifdef BUG
    fprintf (sxstdout, "\t%X reallocated\n", result);
# endif

    return result;
}



VOID	sxcont_free (zone)
    register char	*zone;

/* Frees the area "zone" */

{
    MALLOC_DEBUG ();

# ifdef	BUG
    if (zone == NULL) {
	fprintf (sxstderr, "\tInternal error: freeing NULL...%c\n", BELL);
	SXEXIT (SEVERITIES);
    }
    else {
	fprintf (sxstdout, "freeing %X:", zone);
	free (zone);
	fprintf (sxstdout, "\tfreed\n");
    }
# else
    if (zone == NULL)
	fprintf (sxstderr, "\tInternal error (bypassed): freeing NULL...%c\n", BELL);
    else
	free (zone);
# endif
}
