/* ********************************************************
   *							  *
   *							  *
   * Copyright (c) 1989 by Institut National de Recherche *
   *                    en Informatique et en Automatique *
   *							  *
   *							  *
   ******************************************************** */




/* ********************************************************
   *							  *
   *  Produit de l'equipe Langages et Traducteurs.  (pb)  *
   *							  *
   ******************************************************** */





/************************************************************************/
/* Historique des modifications, en ordre chronologique inverse:	*/
/************************************************************************/
/* 23-09-96 15:56 (phd&pb):	Bug detecte sur l'alpha pour les 64 bits*/
/*				les "constantes" doivenr etre typees	*/
/************************************************************************/
/* 29-05-89 16:23 (pb):		Creation				*/
/************************************************************************/

#ifndef lint
static char	what [] = "@(#)sxba_ops3.c\t- SYNTAX [unix] - Lun 23 Sep 1996 15:56:30";
#endif

#include "sxunix.h"
#include "sxba.h"


int	sxba_scan_reset (bits_array, from_bit)
    SXBA	bits_array;
    int		from_bit;
/*
 * "sxba_scan_reset" returns the index of the first non-null bit following
 * "from_bit" and reset it, or -1 if the remainder of the array is all zeroes.  If
 * "from_bit" is negative, the scan starts at the first bit.
 */
{
    register int	bit = from_bit < 0 ? 0 : (from_bit + 1);
    register SXBA	bits_ptr;
    register SXBA_ELT	elt;
    static int	FIRSTBIT [] = {0, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0};

    if (bit >= BASIZE (bits_array))
	return -1;

    bits_ptr = bits_array + NBLONGS (bit + 1);

    if ((elt = *bits_ptr & ((~((SXBA_ELT)0)) << MOD (bit))) == 0) {
	register SXBA	last_bits_ptr = bits_array + NBLONGS (BASIZE (bits_array));

	do {
	    if (bits_ptr == last_bits_ptr) {
		return -1;
	    }
	} while (*++bits_ptr == 0);

	elt = *bits_ptr;
    }

    bit = 0;

    while ((elt & 0xFFFF) == 0) {
	elt >>= 16;
	bit += 16;
    }

    if ((elt & 0xFF) == 0) {
	elt >>= 8;
	bit += 8;
    }

    if ((elt & 0xF) == 0) {
	elt >>= 4;
	bit += 4;
    }

    bit += FIRSTBIT [elt & 0xF];
    *bits_ptr &= ~(((SXBA_ELT)1) << bit);
    return bit + MUL (bits_ptr - bits_array - 1);
}


SXBA	sxba_clear (bits_array, i, l)
    SXBA	bits_array;
    int         i, l;
/*
 * "sxba_clear" resets the l bits in bits_array from index i
 */
{
    register SXBA	from_bits_ptr, to_bits_ptr;
    register int	size, j;

    if (l > 0 && i < (size = BASIZE (bits_array))) {
	if ((j = i + l) > size) {
	    to_bits_ptr = bits_array + (l = NBLONGS (size));
	    l = l * SXBITS_PER_LONG - i;
	}
	else
	    to_bits_ptr = bits_array + (NBLONGS (j));
	
	from_bits_ptr = bits_array + (NBLONGS (i + 1));
	
	i = MOD (i);
	
	if (from_bits_ptr < to_bits_ptr) {
	    if (i == 0)
		*from_bits_ptr = ((SXBA_ELT)0), l -= SXBITS_PER_LONG;
	    else
		*from_bits_ptr &= ~COMB (i, j = SXBITS_PER_LONG - i), l -= j;
	    
	    while (++from_bits_ptr <  to_bits_ptr)
		*from_bits_ptr = ((SXBA_ELT)0), l -= SXBITS_PER_LONG;
	    
	    i = 0;
	}
	
	if (l == SXBITS_PER_LONG)
	    *from_bits_ptr = ((SXBA_ELT)0);
	else
	    *from_bits_ptr &= ~COMB (i, l);
	    
    }

    return bits_array;
}



SXBA	sxba_substr (bits_array1, bits_array2, i1, i2, l)
    SXBA	bits_array1, bits_array2;
    int         i1, i2, l;
/*
 * "sxba_substr" copies the l bits from bits_array2 starting at index i2
 * in bits_array1 at index i1
 */
{
    register SXBA		from_bits_ptr1, from_bits_ptr2;
    register int		size1, size2, j;

    if (l > 0 && i1 < (size1 = BASIZE (bits_array1))) {
	sxba_clear (bits_array1, i1, l);

	if (i2 < (size2 = BASIZE (bits_array2))) {
	    if (i2 + l > size2)
		l = size2 - i2;

	    if (i1 + l > size1)
		l = size1 - i1;
	    
	    from_bits_ptr1 = bits_array1 + (NBLONGS (i1 + 1));	    
	    i1 = MOD (i1);
	    from_bits_ptr2 = bits_array2 + (NBLONGS (i2 + 1));	    
	    i2 = MOD (i2);

	    while (l > 0) {
		if ((j = SXBITS_PER_LONG - i2 - l) < 0)
		    j = 0;

		*from_bits_ptr1 |= (((*from_bits_ptr2 << j) >> (j + i2)) << i1);

		if (i2 == i1) {
		    from_bits_ptr1++;
		    from_bits_ptr2++;
		    l -= SXBITS_PER_LONG - i1;
		    i1 = 0;
		    i2 = 0;
		}
		else
		    if (i2 < i1) {
			i2 += SXBITS_PER_LONG - i1;
			l -= SXBITS_PER_LONG - i1;
			from_bits_ptr1++;
			i1 = 0;
		    }
		    else {
			i1 += SXBITS_PER_LONG - i2;
			l -= SXBITS_PER_LONG - i2;
			from_bits_ptr2++;
			i2 = 0;
		    }
	    }
	}
    }

    return bits_array1;
}
