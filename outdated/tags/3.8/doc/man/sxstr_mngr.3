.\" @(#)sxstr_mngr.3	- SYNTAX [unix] - 29 Decembre 1987
.TH SXSTR_MNGR 3 "SYNTAX\*R"
.SH NAME
sxstrmngr,
sxstr_mngr,
sxstrget,
sxstrlen,
sxstrretrieve,
sxstrsave,
sxstr2save,
SXSTRtop
\- string manager for SYNTAX.
.SH SYNOPSIS
.nf
.ta \w'\s-2VOID\s0  'u +\w'\s-2VOID\s0  'u
.B
#include "sxunix.h"
.PP
.B
struct sxstrmngr  sxstrmngr\|;
.PP
.B
\s-2VOID\s0 sxstr_mngr (what)
.B
	int	 what\|;
.PP
.B
char *sxstrget (string_table_entry)
.B
	unsigned int  string_table_entry\|;
.PP
.B
unsigned long sxstrlen (string_table_entry)
.B
	unsigned int  string_table_entry\|;
.PP
.B
unsigned int sxstrsave (string)
.B
	char	*string\|;
.PP
.B
unsigned int sxstr2save (string, strlen)
.B
	char	*string\|;
.B
	unsigned long  strlen\|;
.PP
.B
unsigned int sxstrretrieve (string)
.B
	char	*string\|;
.PP
.B
unsigned int SXSTRtop ()
.fi
.SH DESCRIPTION
The
.B string manager
module allows to store strings once and subsequently refer to them
with a unique positive integral number (``string table entry'').
This module provides a set of procedures and macro-definitions, which
use a
.I sxstrmngr
structure, of no interest to the naive user.
The
.B SYNTAX
scanner (see
.BR sxscanner (3))
is a good example of its use.
.LP
.I sxstr_mngr
is the first and last entry point of the module to be called for using
a string table.
It may be called with two possible arguments\|:
.IR \s-2BEGIN\s0 ,
meaning that the structure should become initialized, and
.IR \s-2END\s0 ,
stating that no more access to the saved strings will be done, so that
internal structures may be freed.
.PP
.I sxstrget
returns (a pointer to) the null-terminated string associated with
.IR string_table_entry .
.I sxstrlen
returns the number of characters in that string, not including the
terminating null character.
.I sxstrget
and
.I sxstrlen
are (side-effect free) macros.
.PP
.I sxstrsave
returns the string table entry associated with the given string
contents.
Further calls with a string comparing equal with
.I string
will return the same number.
.PP
.I sxstr2save
is similar\|; the difference is that the number of characters in
.I string
is given (as
.IR strlen),
and does not have to be computed.
This allows to save strings containing null characters and perhaps not
null-terminated.
.PP
.I sxstrretrieve
is only different from
.I sxstrsave
in that it does not enter the null-terminated
.I string
into the string table if it is not there, and returns instead the
constant
.I \s-2ERROR_STE\s0
(see \s-2NOTES\s0 below).
.PP
.I SXSTRtop
returns a number slightly greater than the highest string table entry
which has been used so far.
Users may find it convenient in order to compute the size of a symbols
table indexed by string table entries.
.I SXSTRtop
is a (side-effect free) macro.
.SH "SEE ALSO"
sxunix(3)
and the \fISYNTAX Reference Manual\fP.
.SH NOTES
Two special constants are defined in the header file \fI"sxunix.h"\fP.
.I \s-2ERROR_STE\s0
is the string table entry associated with any generic token inserted
by the parser during error recovery.
.I \s-2EMPTY_STE\s0
is predefined as the string table entry associated with the empty
string.
.PP
The contents of the structure
.I sxstrmngr
must be saved and restored by the user when switching between string
tables.
.PP
The call
.I sxstr_mngr\ (\s-2BEGIN\s0)
reinitializes the current string table (internal structures are
cleared), without need to use
.I sxstr_mngr\ (\s-2END\s0)
beforehand.
.SH BUG
Because
.I sxstrget
and
.I sxstrlen
are implemented as macros, they should not be used directly with the
result of a call to
.I sxstrsave
or
.IR sxstr2save ,
as that call may change the value of variables used in the macros,
which might on some systems produce invalid results.
Thus the user is urged not to write things as\|:
.nr 53 \w'\fBste \fP'
.if \n(53<\w'\fBptr \fP' .nr 53 \w'\fBptr \fP'
.ta \w'    'u +\n(53u
.br
\fB	ptr	= sxstrget (sxstrsave (string))\|;\fP
.br
and to use an intermediate variable instead, as in\|:
.nf
\fB	ste	= sxstrsave (string)\|;\fP
\fB	ptr	= sxstrget (ste)\|;\fP
.fi
.\" Local Variables:
.\" mode: nroff
.\" version-control: yes
.\" End:
