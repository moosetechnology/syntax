/* ********************************************************
   *							  *
   *							  *
   * Copyright (c) 1985 by Institut National de Recherche *
   *                    en Informatique et en Automatique *
   *							  *
   *							  *
   ******************************************************** */




/* ********************************************************
   *							  *
   *  Produit de l'equipe Langages et Traducteurs.  (phd) *
   *							  *
   ******************************************************** */




/************************************************************************/
/* Historique des modifications, en ordre chronologique inverse:	*/
/************************************************************************/
/* 05-04-94 10:30 (pb) :	Le SXBA de "sxindex_mngr" devient int*	*/
/************************************************************************/
/* 01-04-94 10:30 (pb) :	Ajout de sxstr2retrieve			*/
/************************************************************************/
/* 05-02-93 09:15 (pb) :	La modif du 06-01-93 est annulee...	*/
/************************************************************************/
/* 27-01-93 11:15 (pb) :	Ajout du typedef 			*/
/*				struct {...} sxindex_header 		*/
/************************************************************************/
/* 06-01-93 15:30 (pb) :	Le champ token de la parse_stack devient*/
/*				un numero de token (toknb) => modif de	*/
/*				macro SXSTACKtoken et du parser		*/
/************************************************************************/
/* 06-01-93 13:57 (pb) :	Modif de sxput_token()			*/
/************************************************************************/
/* 24-09-92 10:20 (pb) :	Modif du token_mngr.			*/
/************************************************************************/
/* 18-05-92 17:30 (phd) :	#include <strings.h>			*/
/************************************************************************/
/* 21-04-92 14:10 (pb) :	Modif de sxput_token() et SXGET_TOKEN()	*/
/*				pour les memoires segmentees (HP).	*/
/************************************************************************/
/* 15-04-92 13:40 (pb) :	Ajout des modifs de la 4.0 sur les sxba	*/
/************************************************************************/
/* 30-03-92 13:10 (pb) :	Ajout des "modes" des parser et scanner	*/
/*				et qq petites choses.			*/
/************************************************************************/
/* 20-02-92 13:10 (pb) :	Definition de sxnextchar conditionnee	*/
/************************************************************************/
/* 16-08-90 12:30 (phd) :	Ajout de "sxtmpfile" pour portabilite	*/
/*				Introduction de "SXERR_NO_TABS"		*/
/************************************************************************/
/* 16-06-90 09:32 (pb) :	Modif ds sxerrmngr:			*/
/*				"char scratch_path[32]"	devient		*/
/*				"FILE *scratch_file"			*/
/************************************************************************/
/* 06-04-90 12:30 (phd) :	Introduction de "SXSTRDBG" pour la mise	*/
/*				au point (EBUG_ALLOC)			*/
/************************************************************************/
/* 22-06-88 14:45 (pb) :	Changement des definitions des sxalloc	*/
/*				pour lint				*/
/************************************************************************/
/* 31-05-88 13:05 (pb) :	sxBitsArray (complement)		*/
/************************************************************************/
/* 18-05-88 10:07 (pb) :	sxBitsMatrix				*/
/************************************************************************/
/* 02-05-88 12:15 (pb) :	Adaptation nouveau check_keyword	*/
/*				Magic Number = 45010			*/
/************************************************************************/
/* 07-04-88 10:05 (pb) :	Suppression des etiquettes apres #endif	*/
/************************************************************************/
/* 29-03-88 16:25 (phd) :	L'inclusion de sxbitstr.h n'est plus	*/
/*				faite ici, car les BITSTRs ne sont plus	*/
/*				distribues: ils sont (avantageusement)	*/
/*				remplaces par les bits arrays.		*/
/************************************************************************/
/* 28-03-88 16:10 (phd) :	Ajout des definitions de sxindex et	*/
/*				sxrindex, pour portages plus simples	*/
/************************************************************************/
/* 11-03-88 09:35 (pb) :	Adaptation a la V3.1a des tables du     */
/*				parser : Magic Number = 69832		*/
/************************************************************************/
/* 11-01-88 14:12 (phd&pb) :	Tentative de compatibilite VMS uMEGA	*/
/************************************************************************/
/* 28-12-87 15:00 (phd) :	Toujours plus de fonctions sur les SXBA	*/
/************************************************************************/
/* 22-12-87 11:01 (phd) :	SXBA doit etre un typedef!		*/
/*				Ajout de SXBA_ELT			*/
/************************************************************************/
/* 21-12-87 15:56 (phd) :	Ajout des declarations de sxbitsarray	*/
/************************************************************************/
/* 21-12-87 11:16 (phd) :	Ajout de SXBA et SXBITS_PER_LONG	*/
/************************************************************************/
/* 11-12-87 14:25 (pb&phd) :	Adaptation a la V3 des tables du parser	*/
/*				Magic Number = 44573			*/
/*				Au passage, modification de sxtt_state	*/
/************************************************************************/
/* 03-12-87 14:55 (phd) :	Ajout de macros pour plaire a lint	*/
/************************************************************************/
/* 30-11-87 14:05 (phd) :	Suppression de "post_source_index" dans	*/
/*				les noeuds du paragrapheur		*/
/************************************************************************/
/* 26-11-87 18:32 (phd) :	#ifndef SXCONT_ALLOC => #if 0		*/
/************************************************************************/
/* 24-11-87 17:12 (phd) :	Modification de SXEXIT: exit=>sxexit	*/
/************************************************************************/
/* 20-11-87 14:12 (phd) :	Ajout de la macro SXRESIZE		*/
/************************************************************************/
/* 20-11-87 13:50 (dp)	:	Ajout de F2ATC_TABLES			*/
/************************************************************************/
/* 19-11-87 17:13 (phd) :	Nouvelle structure pour			*/
/*				"sxatc_local_variables", avec notamment	*/
/*				suppression de la variable "father"	*/
/************************************************************************/
/* 13-11-87 15:02 (phd):	Mise dans le tas de sxstrmngr.head	*/
/************************************************************************/
/* 13-11-87 09:50 (phd):	SXHASH_LENGTH: 257=>1013		*/
/************************************************************************/
/* 09-11-87 12:34 (phd):	Plein de #ifndef			*/
/************************************************************************/
/* 21-09-87 11:13 (pb):		Introduction de SXSWAPBYTE		*/
/************************************************************************/
/* 03-07-87 09:10 (pb):		Modifications des sxtables (abstract)	*/
/* 				(magic = 56165)			 	*/
/************************************************************************/
/* 11-06-87 15:06 (pb):		Modifications des SXP (magic = 5446) 	*/
/************************************************************************/
/* 11-05-87 14:04 (pb&phd):	Les procedures de rattrapage d'erreurs 	*/
/*				rendent SXBOOLEAN, pas int.		*/
/************************************************************************/
/* 05-05-87 16:20 (pb&phd):	Changements radicaux et adequats 	*/
/************************************************************************/
/* 30-04-87 15:20 (pb):		Modifications des SXP (magic = 561023) 	*/
/************************************************************************/
/* 27-04-87 17:17 (phd):	Ajout de la declaration de sxnumarg  	*/
/************************************************************************/
/* 15-04-87 14:17 (pb):		Ajout du typedef SXSTMI	        	*/
/************************************************************************/
/* 13-04-87 12:00 (pb&phd):	Renommages de ... en SX... ou sx...  	*/
/************************************************************************/
/* 20-03-87 14:59 (pb):		Nouvelle version (magic = 293)	  	*/
/*				Pointeur vers le bon scramble, vers	*/
/*				l'error recovery du parser		*/
/************************************************************************/
/* 20-03-87 14:48 (mj):		Ajout de T_node_name dans T_tables	*/
/************************************************************************/
/* 12-03-87 13:48 (pb):		S_seed_value passee en unsigned long	*/
/************************************************************************/
/* 13-02-87 12:23 (phd):	"sxnextchar" n'est plus verbeuse	*/
/************************************************************************/
/* 12-02-87 11:19 (phd&pb):	Ajout de la macro "sxnextchar"		*/
/************************************************************************/
/* 10-02-87 17:57 (phd):	Ajout de "severity" dans "sxerr_info"	*/
/************************************************************************/
/* 30-01-87 14:16 (phd):	Ajout de EMPTY_STE et ERROR_STE		*/
/*				Renommage de SXSTRGET en sxstrget	*/
/************************************************************************/
/* 20-01-87 13:45 (phd&pb):	Modification des variables locales du	*/
/*				scanner pour Mark			*/
/************************************************************************/
/* 16-01-87 11:10 (phd):	Nouveau sxsrcmngr pour les coords	*/
/************************************************************************/
/* 16-01-87 11:07 (phd):	SCAN_CURRENT_CHAR=>CURRENT_SCANNED_CHAR	*/
/************************************************************************/
/* 05-01-87 14:52 (phd):	Creation de la structure analysers dans	*/
/*				les tables (et modification du nombre	*/
/*				magique...)				*/
/************************************************************************/
/* 31-12-86 15:39 (pb):		Les structures du tree traverser sont	*/
/*			        nommees (appel recursif de sxsmp)	*/
/************************************************************************/
/* 19-12-86 16:17 (phd):	Redefinition de sxalloc -> cont_malloc	*/
/************************************************************************/
/* 17-12-86 11:28 (phd):	Definition de la macro "sxat_snv"	*/
/************************************************************************/
/* 05-12-86 14:15 (phd):	Error manager plus complexe		*/
/************************************************************************/
/* 01-12-86 10:55 (phd&pb):	Ajout de MAGIC_NUMBER			*/
/************************************************************************/
/* 31-10-86 18:34 (phd):	Ajout de SHORT		  		*/
/************************************************************************/
/* 23-10-86 15:26 (phd):	Ajout de CHAR_TO_STRING			*/
/************************************************************************/
/* 20-10-86 15:58 (phd):	Moralisation de l'utilisation de VOID	*/
/************************************************************************/
/* 20-10-86 15:23 (phd):	Modification des sxppvariables		*/
/************************************************************************/
/* 17-10-86 15:32 (phd):	Ajout de "sxtty" pour le mode verbeux	*/
/************************************************************************/
/* 15-10-86 18:30 (phd & bl):	Ajout de la semantique du paragrapheur	*/
/************************************************************************/
/* 14-10-86 12:35 (phd):	Ajout des macros du scanner "sxccc",	*/
/*				"sxttext", "sxeof_code", "sxnext_syno",	*/
/*				"sxkeywordp" et "sxgenericp"		*/
/************************************************************************/
/* 04-06-86 15:05 (phd):	Ajout de "NO_FILE_NAME"			*/
/************************************************************************/
/* 27-05-86 17:20 (phd):	Ajout de la macro SXSTRGET		*/
/************************************************************************/
/* 26-05-86 16:20 (mm):		Modifications dans les variables de atc	*/
/************************************************************************/
/* 22-05-86 11:15 (phd):	Suppression de "ALPHA_STRING_LENGTH",	*/
/*				qui est remplacee par un argument	*/
/*				supplementaire du string manager.	*/
/*				Soumission de la definition de		*/
/*				"HASH_LENGTH" a sa non-definition	*/
/*				prealable				*/
/************************************************************************/
/* 20-05-86 15:00 (phd):	Modification du profil de "cont_free"	*/
/************************************************************************/
/* 20-05-86 11:15 (dp) :	Source_class dans sxsvar		*/
/************************************************************************/
/* 15-05-86 16:15 (phd):	Remplacement de "BUGALLOC" par		*/
/*				"CONT_ALLOC"				*/
/************************************************************************/
/* 14-05-86 14:10 (phd):	Ajout de "sxstrretrieve"		*/
/************************************************************************/
/* 14-05-86 14:00 (mm):		Ajout des procedures du tree-traverser  */
/************************************************************************/
/* 14-05-86 11:41 (phd):	Ajout de "SEVERITIES", "sxerrmngr",	*/
/*				"SXEXIT" et "sxverbosep".		*/
/************************************************************************/
/* 14-05-86 11:40 (phd):	Ajout de cette rubrique "modifications"	*/
/************************************************************************/



#ifdef sun
/*
 * How to reallocate a zone with a smaller size
 * WITHOUT CHANGING ITS BASE ADDRESS.
 */
# define SXRESIZE(ptr, nb, size) (SXVOID) sxrealloc (ptr, nb, size)
#endif /* SXRESIZE */

#define SXBA_ELT	unsigned long int
typedef SXBA_ELT	*SXBA;
#ifndef SXBITS_PER_LONG
/*
 * Unless you define SXBITS_PER_LONG here,
 * the default value 32 will be used
 */
#endif

#ifndef SXVOID
# define SXVOID		void	/* May be changed (to int?) for the C compiler */
#endif
#ifndef SXSHORT
# define SXSHORT	short	/* May be changed (to int?) for the C compiler */
#endif
#ifndef SXTAB_INTERVAL
# define SXTAB_INTERVAL 8	/* May be changed for the system */
#endif

#ifndef SXERR_NO_TABS
/*
 * Some users on Apollo systems report difficulties in setting TAB positions
 * on their Display Manager output pads.  We like to have satisfied customers,
 * hence this trick.
 */
# ifdef apollo
#  ifndef SXERR_NO_NO_TABS	/* #define it to override -- unused anywhere else */
#   define SXERR_NO_TABS	/* sxerr_mngr won't output TABs */
#  endif
# endif
#endif

#ifndef sxindex
# define sxindex	strchr	/* index for UCB, strchr for USV */
#endif
#ifndef sxrindex
# define sxrindex	strrchr	/* rindex for UCB, strrchr for USV */
#endif
extern char	*sxindex (), *sxrindex ();

#define SXMAGIC_NUMBER	((unsigned long) 45010)
extern SXVOID sxcheck_magic_number ();



#include	<stdio.h>
#include	<strings.h>


/*****************************************************************************/

/* Quelques petites choses bien utiles */

#define SXBOOLEAN	char
#define SXFALSE	(SXBOOLEAN) 0
#define SXTRUE	(SXBOOLEAN) 1	/* (!SXFALSE) */


/*****************************************************************************/

/* Constantes servant aux initialisations et terminaisons */

#define SXBEGIN		(-2)
#define SXOPEN		(-3)
#define SXINIT		(-4)
#define SXACTION	(-5)
#define SXPREDICATE	(-6)
#define SXERROR		(-7)
#define SXFINAL		(-8)
#define SXSEMPASS	(-9)
#define SXCLOSE		(-10)
#define SXEND		(-11)


/* Constantes de la table des chaines */

#ifndef SXHASH_LENGTH
#	define	SXHASH_LENGTH		1013
#endif	/* SXHASH_LENGTH */

#define SXERROR_STE	0	/* Chaine vide pour les erreurs */
#define SXEMPTY_STE	1	/* Veritable chaine vide */


/* Constante de l'error manager */

#ifndef SXSEVERITIES
# define SXSEVERITIES	3	/* 0: comment, 1: warning, 2: error */
#endif


/* Constantes du paragrapheur */

#define SXCASE			char
#define SXNO_SPECIAL_CASE	(SXCASE) 00
#define SXUPPER_CASE		(SXCASE) 01
#define SXLOWER_CASE		(SXCASE) 02
#define SXCAPITALISED_INITIAL	(SXCASE) 03


/* Constantes du tree-traverser */

#define SXINHERITED	0
#define SXDERIVED	1


/*****************************************************************************/

/* Ecritures */

extern FILE *sxstdout, *sxstderr, *sxtty;


extern SXBOOLEAN sxverbosep /* Should we animate the user's screen? */ ;



/*****************************************************************************/

/* Definition de toutes les structures utilisees par SYNTAX */

#ifndef SXSTMI
# define SXSTMI unsigned short
#endif

/* Structures des tables elles-memes */

struct SXS_tables {
    int		S_last_char_code, S_termax, S_constructor_kind, S_nbcart, S_nmax, S_last_simple_class_no,
	 S_counters_size;
    SXBOOLEAN	S_is_user_action_or_prdct, S_are_comments_erased;
    short	*S_is_a_keyword;
    short	*S_is_a_generic_terminal;
    SXSTMI	**S_transition_matrix;
    struct SXS_action_or_prdct_code	*SXS_action_or_prdct_code;
    char	**S_adrp;
    short	*S_syno;
    struct SXS_local_mess	*SXS_local_mess;
    unsigned char	*S_char_to_simple_class;
    short	*S_no_delete;
    short	*S_no_insert;
    char	**S_global_mess;
    short	**S_lregle;
    int		(*scanact) ();
    SXBOOLEAN	(*recovery) ();
    int		(*check_keyword) ();
};


struct SXP_tables {
    short	Mrednt, Mred, Mprdct, Mfe, M0ref, Mref, mxvec, Mxvec, P_tmax, P_ntmax, P_nbpro, init_state;
    int		P_nbcart, P_nmax, P_maxlregle, P_validation_length, P_followers_number, P_sizofpts, P_max_prio_X,
	 P_min_prio_0;
    struct SXP_reductions	*reductions;
    struct SXP_bases	*t_bases;
    struct SXP_bases	*nt_bases;
    struct SXP_item	*vector;
    struct SXP_goto	*gotos;
    struct SXP_prdct	*prdcts;
    short	**P_lregle;
    int		*P_right_ctxt_head;
    struct SXP_local_mess	*SXP_local_mess;
    short	*P_no_delete;
    short	*P_no_insert;
    char	**P_global_mess;
    short	*PER_tset;
    int		(*scanit) ();
    SXBOOLEAN	(*recovery) ();
    int		(*parsact) ();
    int		(*semact) ();
};


struct SXT_tables {
    struct SXT_node_info	*SXT_node_info;
    short	*T_ter_to_node_name;
    char	*T_stack_schema;
    int		(*sempass) ();
    char	**T_node_name;
};


struct SXPP_schema {
    short int	PP_codop, PP_act;
};



#ifndef F2ATC_TABLES
#  define F2ATC_TABLES	double	/* anything */
#endif


/* To bypass the stupid bug in the type-checking on pointers towards union : */

typedef union {
	    struct SXT_tables	SXT_tables;
	    struct SXPP_schema	*PP_tables;
	    F2ATC_TABLES	F2T_tables;
	}	sxsem_tables;



/* ------------------------------ THE TABLES ------------------------------ */

struct sxtables {
    unsigned long	magic;
    struct {
	int	(*scanner) (), (*parser) ();
    }	analyzers;
    struct SXS_tables	SXS_tables;
    struct SXP_tables	SXP_tables;
    char	**err_titles /* 0 = comment, 1 = warning, 2 = error, ... */ ;
    char	*abstract;
    sxsem_tables	*sem_tables;
};



/*****************************************************************************/


/* Reperes vers le source analyse */

struct sxsource_coord {
    char	*file_name /*		le nom du fichier	*/ ;
    unsigned long	line /*		le numero de ligne	*/ ;
    unsigned int	column /*	le numero de colonne	*/ ;
};



/* Symbole rendu par le scanner */

struct sxtoken {
    int		lahead;
    unsigned int	string_table_entry;
    struct sxsource_coord	source_index;
    char	*comment;
};



/* Un element de la table de sauvegarde des chaines */

struct sxstrtable {
    char	*pointer;
    unsigned long int	length;
    unsigned int	collision_link;
};



/* Un tampon pour la sauvegarde des chaines */

struct sxstrstring {
    struct sxstrstring	*next;
    char	chars [sizeof (char*)];
};



/* Variables du string_manager */

struct sxstrmngr {
    struct sxstrtable	*table;
    struct sxstrstring	*string;
    unsigned int	*head;
    unsigned int	tablength;
    unsigned int	top;
    unsigned long int	strlength;
    unsigned long int	strnext;
}	sxstrmngr;



/* Variables du source_manager */

#define SXSRCsource_coord()	(sxsrcmngr.source_coord)
#define SXSRCprevious_char()	(sxsrcmngr.previous_char)
#define SXSRCcurrent_char()	(sxsrcmngr.current_char)

struct sxsrcmngr {
    FILE	*infile /*			Fichier en cours de lecture		*/ ;
    struct sxsource_coord	source_coord /*	Reperes du caractere courant		*/ ;
    SXSHORT	previous_char, current_char /*	Caracteres precedent et courant		*/ ;
    SXSHORT	*buffer /*			chaine des caracteres lus en avance	*/ ;
    struct sxsource_coord	*bufcoords /*	Reperes associes			*/ ;
    int		buflength /*			taille de "buffer"			*/ ;
    int		bufused /*			indice du dernier caractere		*/ ;
    int		bufindex /*			indice du caractere courant		*/ ;
    int		labufindex /*			indice en avance			*/ ;
    SXBOOLEAN	has_buffer /*			buffer valide?				*/ ;
}	sxsrcmngr;



/* Variables de l'error manager */

struct sxerr_info {
    unsigned int	file_ste /*	string table entry of source name	*/ ;
    unsigned long	line /*		source coordinates			*/ ;
    unsigned int	column;
    long	beginning, end /*	offsets in scratch file			*/ ;
    int		severity /*		severity of this message		*/ ;
};


struct sxerrmngr {
    int		nbmess [SXSEVERITIES] /*	counts messages				*/ ;
    long	mark /*				private...				*/ ;
    int		err_kept /*			nb of messages successfully kept	*/ ;
    int		err_size /*			size of err_infos			*/ ;
    FILE	*scratch_file /*		scratch file				*/ ;
    struct sxerr_info	*err_infos /*		to retrieve messages			*/ ;
}	sxerrmngr;


/* Variables du scanner */

struct sxscan_mode {
    unsigned int	errors_nb;
    SXBOOLEAN		is_silent; /* no error message */
    SXBOOLEAN		with_system_act; /* scanning system actions should be performed */
    SXBOOLEAN		with_user_act; /* scanning user actions should be performed */
    SXBOOLEAN		with_system_prdct; /* scanning system predicates should be performed */
    SXBOOLEAN		with_user_prdct; /* scanning user predicates should be performed */
};

struct sxlv_s {
    long	*counters /* 		taille = S_counters_size	*/ ;
    int		include_no /*		nombre d'includes		*/ ;
    int		ts_lgth_use /*		longueur utilisee dans ts	*/ ;
    char	*token_string /*	buffer du token courant		*/ ;
};


struct sxlv {
    int		ts_lgth /*			longueur courante de ts		*/ ;
    int		current_state_no /*		etat courant du scanner		*/ ;
    struct sxtoken	terminal_token /*	structure passee au parser	*/ ;
    unsigned char	source_class /*		classe du caractere		*/ ;
    int		include_action /*		post-action pour les includes	*/ ;
    SXSHORT	previous_char /*		precedant le token courant	*/ ;
    struct mark {
	struct sxsource_coord	source_coord;
	int	index /*			indice dans ts du mark		*/ ;
	SXSHORT		previous_char /*	precedant la marque		*/ ;
    }	mark;
    struct sxscan_mode	mode;
};


struct sxsvar {
    struct SXS_tables	SXS_tables /*	les tables					*/ ;
    struct sxlv_s	sxlv_s /*	variables locales				*/ ;
    struct sxlv		sxlv /*		variables locales a sauver pour include		*/ ;
    struct sxtables	*sxtables;
}	sxsvar;



/* Variables du parser */

struct sxparstack {
    struct sxtoken	token;
    SXSHORT	state;
};


struct sxpglobals {
    struct sxparstack	*parse_stack /* lgt1 */ ;
    SXSHORT	reduce, xps, pspl, stack_bot;
}	sxpglobals;


/* For parser mode */
#define SXWITH_RECOVERY		0
#define SXWITH_CORRECTION	1
#define SXWITHOUT_ERROR	2

struct sxparse_mode {
    unsigned int	kind; /* SXWITH_RECOVERY, SXWITH_CORRECTION, SXWITHOUT_ERROR */
    unsigned int	errors_nb;
    unsigned int	look_back; /* 0 => infinity, k>0 => look_back of k tokens. */
    SXBOOLEAN		is_prefixe; /* parse a prefixe */
    SXBOOLEAN		is_silent; /* no error message */
    SXBOOLEAN		with_semact; /* semantic actions should be performed */
    SXBOOLEAN		with_parsact; /* parsing actions should be performed */
    SXBOOLEAN		with_parsprdct; /* parsing predicates should be performed */

};

struct sxplocals {
    struct SXP_tables	SXP_tables;
    struct sxtables	*sxtables;
    SXSHORT		state;
    /* token manager */
    struct sxtoken	**toks_buf	/* Support Physique */ ;
    int			atok_no		/* Pour les actions  */ ,
    			ptok_no		/* Pour les predicats */ ,
    			Mtok_no		/* Numero du dernier token emmagasine */ ,
    			min		/* Page de debut du buffer */ ,
    			max		/* Page de fin du buffer */ ,
                        left_border	/* Numero du premier token accessible */ ;
    SXSHORT		final_state; /* A METTRE PAR LE CONSTRUCTEUR DANS LES TABLES */
    struct sxparse_mode mode;
}	sxplocals;





/*****************************************************************************/

/* Acces a la pile d'analyse du parser */
#define SXSTACKtop()		(sxpglobals.xps)
#define SXSTACKnewtop()		(sxpglobals.xps-sxpglobals.pspl)
#define SXSTACKreduce()		(sxpglobals.reduce)
#define SXSTACKtoken(x_stack)	(sxpglobals.parse_stack [x_stack].token)


/*****************************************************************************/

/* Variables du paragrapheur */

#ifndef SXPP_STRING_INFO
#define SXPP_STRING_INFO double /* anything */
#endif	/* SXPP_STRING_INFO */

#ifndef SXPP_SAVED_INFO
#define SXPP_SAVED_INFO double /* anything */
#endif	/* SXPP_SAVED_INFO */


struct sxppvariables {
    struct sxtables	*sxtables;
    struct SXPP_schema	**PP_tables;
    SXPP_STRING_INFO	*terminal_string_info;
    SXPP_SAVED_INFO	*save_stack;
    int		tsi_top;
    int		save_stack_length;
    short int	tmax;
    SXCASE	kw_case /*		How should keywords be written				*/ ;
    SXCASE	*terminal_case /*	Same as kw_case, but for each type of terminal		*/ ;
    SXBOOLEAN	kw_dark /*		Should keywords be artificially darkened		*/ ;
    SXBOOLEAN	*terminal_dark /*	Same as kw_dark, but for each type of terminal		*/ ;
    SXBOOLEAN	no_tabs /*		Do not optimize spaces into tabs			*/ ;
    SXBOOLEAN	block_margin /*		Do not preserve structure when deeply nested		*/ ;
    short int	line_length /*		What it says						*/ ;
    short int	max_margin /*		Do not indent lines further than that			*/ ;
    short int	tabs_interval /*	number of columns between two tab positions		*/ ;
    SXBOOLEAN	is_error /*		SXTRUE if the pretty-printer detected an error anywhere	*/ ;
    long int	char_count /*		number of chars output by the pretty-printer		*/ ;
}	sxppvariables;



/*****************************************************************************/

/* Structures utilisees pour la definition des tables */

/* -------------------------------- SCANNER -------------------------------- */

/* structure pour la correction d'erreurs */

struct SXS_correction_item {
    short	*model;
    int		model_no;
    int		simple_class;
    int		rank_of_char;
};


struct SXS_action_or_prdct_code {
    SXSTMI	stmt;
    short	action_or_prdct_no, param;
    SXBOOLEAN	is_system, is_predicate;
};


struct SXS_local_mess {
    short	S_param_no;
    char	*S_string;
    short	*S_param_ref;
};



/* --------------------------------- PARSER -------------------------------- */

struct SXP_reductions {
    SXSHORT	action, reduce, lgth, lhs;
};


struct SXP_bases {
    SXSHORT	defaut, commun, propre;
};


struct SXP_item {
    SXSHORT	check, action;
};


struct SXP_goto {
    SXSHORT	state, next;
};


struct SXP_prdct {
    SXSHORT	prdct, action;
};


struct SXP_local_mess {
    short	P_param_no;
    char	*P_string;
    short	*P_param_ref;
};



/* --------------------------------- INDEX --------------------------------- */

typedef struct {
    int		*set;
    int		size, index;
    int		mask, shift;
    int		line_nb, column_nb;
    int		free;
    void	(*oflw) (/* sxindex_header *header */);
} sxindex_header;




/* ---------------------------- ABSTRACT TREE ---------------------------- */

struct SXT_node_info {
    short	T_node_name;
    short	T_ss_indx;
};



/* --------------------------------- ATC --------------------------------- */

#ifndef SXNODE
#  define SXNODE	struct sxnode_header_s
#endif

#ifndef SXATC_AREA
#  define SXATC_AREA	double	/* anything */
#endif

/* to have the definition of sxnode_header_s look like normal C */
#define SXVOID_NAME

#define SXNODE_HEADER_S \
   SXNODE *father, *brother, *son;				\
   int name, degree, position, index;				\
   SXBOOLEAN is_list, first_list_element, last_list_element;	\
   struct sxtoken token

struct sxnode_header_s {
   SXNODE_HEADER_S SXVOID_NAME;
   };


/* atc_pp tree pointers */

struct sxnode_pp {
     struct sxnode_pp *next;	   /* abstract tree pointers		    */
     struct sxtoken terminal_token;/* lexical attributes		    */
     int name;			   /* node identification		    */
				   /* >0 => internal node,		    */
				   /*  0 => error node,			    */
				   /* <0 => generic terminal (code = -name) */
     char *post_comment;	   /* lexical attributes continued	    */
   };


struct sxatc_local_variables {
    SXNODE	*abstract_tree_root;
    SXBA	early_visit_set;
    int		node_size;
    union {
	struct sxatc_new {
	    sxindex_header	index_hd;
	    int			line_nb;
	    SXNODE		**nodes;
	} new;
	struct sxatc_old {
	    SXATC_AREA	*area;
	    char	*area_end, *current_node;
	    int		area_size;
	} old;
    } u;
    SXBOOLEAN	abstract_tree_is_error_node;
    SXBOOLEAN	are_comments_erased;
};


struct sxatcvar {
   struct SXT_tables SXT_tables;
   struct sxatc_local_variables atc_lv;
   } sxatcvar;



/*****************************************************************************/

/* Variables du tree-traverser */

struct sxtt_state {
    SXNODE	*visited;
    SXBOOLEAN	visit_kind;
    SXNODE	*last_elem_or_left;
}	sxtt_state;


struct sxnext_visit {
    SXNODE	*visited;
    SXBOOLEAN	visit_kind, normal;
}	sxnext_visit;


#define SXVISIT_KIND	sxtt_state.visit_kind
#define SXVISITED	sxtt_state.visited
#define SXLEFT		SXLAST_ELEM
#define SXLAST_ELEM	sxtt_state.last_elem_or_left

 
/*****************************************************************************/

/* Caractere servant a marquer la fin d'une ligne */

#define SXNEWLINE	'\n'


/* Caractere servant a marquer la fin d'une chaine */

#define SXNUL	'\0'


/* Representation externe d'un caractere */

#ifndef SXCHAR_TO_STRING
# define SXCHAR_TO_STRING(c)	(sxc_to_str [(unsigned char) (c)])
  extern char *sxc_to_str [];
#endif


/*****************************************************************************/

/* Divers parametres reglables */

#ifndef SXEXIT
# define SXEXIT(sevlev)	sxexit (sevlev)	/* should never return */
extern SXVOID sxexit ();
#endif
#ifndef SXERROR_COORD
# define SXERROR_COORD	"%s, line %d: column %d: "	/* args are filename, line #, col # */
#endif
#ifndef SXHEAD_COORD
# define SXHEAD_COORD	"%s: "		/* arg is filename */
#endif
#ifndef SXTAIL_COORD
# define SXTAIL_COORD	"%s: "		/* arg is filename */
#endif
#ifndef SXNO_FILE_NAME
# define SXNO_FILE_NAME	"\"\""		/* used when file name is unknown */
#endif


/*****************************************************************************/

/* Fonctions redefinissables */

#ifndef sxgetchar
# define sxgetchar()			\
	getc (sxsrcmngr.infile)
#endif


#ifdef lint

extern char *malloc (), *calloc (), *realloc ();


extern SXVOID free ();



#  define sxalloc(NB, SZ)		malloc ((unsigned)((NB)*(SZ)))
#  define sxcalloc(NB, SZ)		calloc ((unsigned)(NB), (unsigned)(SZ))
#  define sxrealloc(PTR, NB, SZ)	realloc ((char*)(PTR), (unsigned)((NB)*(SZ)))
#  define sxfree(PTR)			free ((char*)(PTR))

#else

extern char *sxcont_malloc (), *sxcont_alloc (), *sxcont_realloc ();


extern SXVOID sxcont_free ();



#  define sxalloc(NB, SZ)		sxcont_malloc ((NB)*(SZ))
#  define sxcalloc(NB, SZ)		sxcont_alloc (NB, SZ)
#  define sxrealloc(PTR, NB, SZ)	sxcont_realloc (PTR, (NB)*(SZ))
#  define sxfree(PTR)			sxcont_free (PTR)

#endif /* lint */


#ifdef P_tmpdir
/* "tmpfile" exists -- no need to compile sxtmpfile.c */
# define sxtmpfile	tmpfile
#else
extern FILE	*sxtmpfile ();
#endif


/************************************************************************/
/*	     Procedures et fonctions definies dans SYNTAX		*/
/************************************************************************/

/*********************************/
/* MISCELLANEOUS (see sxunix(3)) */
/*********************************/

extern SXVOID sxsyntax ();

extern SXVOID sxopentty ();

extern SXBOOLEAN sxnumarg ();

/**************************************/
/* STRING MANAGER (see sxstr_mngr(3)) */
/**************************************/

extern unsigned int sxstrretrieve (), sxstr2retrieve (), sxstrsave ();

#ifndef EBUG_ALLOC
/* Get a pointer to a string from its unique identifier */
#define sxstrget(ste)	(sxstrmngr.table [ste].pointer)

/* Get the length of the string associated with a unique identifier */
#define sxstrlen(ste)	(sxstrmngr.table [ste].length)
#else
/* Catch possible bugs in the use of the strings manager */
#define sxstrget(ste)	(SXIN_STRMACRO++, SXSTRGET (ste))
#define sxstrlen(ste)	(SXIN_STRMACRO++, SXSTRLEN (ste))
extern char	*SXSTRGET ();
extern unsigned long int	SXSTRLEN ();
extern int	SXIN_STRMACRO;
#endif

/* Logical size of the string_manager data */
#define SXSTRtop()	sxstrmngr.top

extern SXVOID sxstr_mngr ();


/**************************************/
/* SOURCE MANAGER (see sxsrc_mngr(3)) */
/**************************************/

#ifndef sxnextchar
#define sxnextchar()							\
   (sxsrcmngr.has_buffer						\
    ? sxnext_char ()							\
    : (((sxsrcmngr.previous_char = sxsrcmngr.current_char) != SXNEWLINE	\
	? sxsrcmngr.source_coord.column++				\
	: (sxsrcmngr.source_coord.column = 1,				\
	   sxsrcmngr.source_coord.line++)),				\
	sxsrcmngr.current_char = sxgetchar ()))
#endif

extern SXSHORT sxnext_char (), sxlafirst_char (), sxlanext_char ();


extern SXVOID sxsrc_mngr (), sxsrcpush (), sxX (), sxlaback ();


/****************************/
/* PARSER (see sxparser(3)) */
/****************************/

extern BOOLEAN sxparse_in_la ();

/***************************************/
/* TOKEN_MANAGER (see sxtoken_mngr(3)) */
/***************************************/

#define SXTOKEN_AND		0x3FF
#define SXTOKEN_SHIFT		10
#define SXTOKEN_PAGE(n)		(((n)>>SXTOKEN_SHIFT)-sxplocals.min)
#define SXTOKEN_INDX(n)		((n)&SXTOKEN_AND)

/* When sxplocals.min <= SXTOKEN_PAGE(n) < sxplocals.max */
#define SXGET_TOKEN(n)		(sxplocals.toks_buf [SXTOKEN_PAGE(n)][SXTOKEN_INDX(n)])

extern SXVOID			sxtkn_mngr ( /* what, buf number */);
extern SXBOOLEAN		sxtknzoom (/* new (last) token number */);
extern struct sxtoken		*sxget_token (/* n */);
extern int			sxtknmdf (/* new_seq, lgth1, old_tok_no, lgth2 */);

#define sxput_token(tok)	(((++sxplocals.Mtok_no)>>SXTOKEN_SHIFT) >= sxplocals.max)	\
                                ? sxtknzoom (sxplocals.Mtok_no) : 0, 				\
                                SXGET_TOKEN(sxplocals.Mtok_no) = tok


/*******************/
/* INCLUDE MANAGER */
/*******************/

extern SXVOID sxincl_mngr ();


extern SXBOOLEAN sxpush_incl (), sxpop_incl ();


/*************************************/
/* ERROR MANAGER (see sxerr_mngr(3)) */
/*************************************/

extern SXVOID sxput_error (), sxhmsg (), sxtmsg (), sxerr_mngr ();
extern SXVOID sxperror ();

/******************************/
/* SCANNER (see sxscanner(3)) */
/******************************/

/* acces a l'etat du scanner et au caractere courant */

#define SXSCAN_LA_P							\
   (sxsvar.SXS_tables.S_transition_matrix [sxsvar.sxlv.current_state_no] [1])

#define SXCURRENT_SCANNED_CHAR						\
   (SXSCAN_LA_P ? sxsrcmngr.buffer[sxsrcmngr.labufindex] : sxsrcmngr.current_char)

extern int sxcheck_keyword ();


/* Utilisation de diverses informations contenues dans les tables */

#define sxttext(sxtables, look_ahead)					\
	((sxtables)->SXS_tables.S_adrp [look_ahead])

#define sxeof_code(sxtables)						\
	((sxtables)->SXS_tables.S_termax)

#define sxnextsyno(sxtables, look_ahead)				\
	((sxtables)->SXS_tables.S_syno [look_ahead])

#define sxkeywordp(sxtables, look_ahead)				\
	(sxgetbit ((sxtables)->SXS_tables.S_is_a_keyword, look_ahead) > 0)

#define sxgenericp(sxtables, look_ahead)				\
	(sxgetbit ((sxtables)->SXS_tables.S_is_a_generic_terminal, look_ahead) > 0)

extern BOOLEAN sxgetbit ();

/********************************************/
/* ABSTRACT TREE CONSTRUCTOR (see sxatc(3)) */
/********************************************/

extern SXNODE ***sxatc_stack ();
extern SXVOID sxatc_sub_tree_erase (/* NODE* */);


/********************************************/
/* ABSTRACT TREE MANAGER (see sxat_mngr(3)) */
/********************************************/

extern SXNODE *sxson (), *sxbrother ();

#define sxat_snv(kind, node_ptr)		\
	(sxnext_visit.normal = SXFALSE,		\
	 sxnext_visit.visit_kind = kind,	\
	 sxnext_visit.visited = node_ptr)


/************************************************/
/* BITS ARRAY MANIPULATION (see sxbitsarray(3)) */
/************************************************/
#define sxba_1_lrscan sxba_scan

extern SXBA sxba_calloc (), sxba_resize ();
extern SXBA sxba_empty (), sxba_fill ();
extern SXBA sxba_0_bit (), sxba_1_bit ();
extern int sxba_cardinal (), sxba_scan (), sxba_scan_reset ();
extern SXBA sxba_and (), sxba_or (), sxba_xor (), sxba_not ();
extern BOOLEAN sxba_is_empty (), sxba_is_full ();
extern int sxba_first_difference ();
extern SXBA sxba_copy (), sxba_minus ();
extern int sxba_1_rlscan (), sxba_0_lrscan (), sxba_0_rlscan ();
extern BOOLEAN sxba_read (), sxba_write ();
extern SXBA *sxbm_calloc (), *sxbm_resize ();
extern SXVOID sxbm_free ();

/************************************************/
/* INDEX_MNGR					*/
/************************************************/

extern void	sxindex_alloc (/* sxindex_header *header,
				  int line_nb, column_nb,
				  void (*user_oflw) (sxindex_header*) */);
/* If line_nb equals zero, we are in the Vector case. */

extern int	sxindex_seek (/* sxindex_header *header */);

#define sxindex_free(h)		sxfree ((h).set), (h).set = NULL
#define sxindex_clear(h)	((h).free = -1, (h).index = 0)
#define sxindex_i(h,x)		((x) >> (h).shift)
#define sxindex_j(h,x)		((x) & (h).mask)
#define sxindex_release(h,x)	((h).set [x] = (h).free, (h).free = x)
#define sxindex_size(h)		(h).size
#define sxindex_line_nb(h)	(h).line_nb
#define sxindex_column_nb(h)	(h).column_nb


/*
 * Local Variables:
 * mode: C
 * version-control: yes
 * End:
 */
