.\" @(#)ppc.1	- SYNTAX [unix] - 2 Septembre 1987
.	\" accent marks
.\" From @(#)tmac.os 1.1 86/07/08 SMI; from UCB 4.2
.ds ' \h'\w'e'u*4/10'\z\'\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\`\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \k:\h'+\w'e'u/4u'\v'-0.6m'\s6v\s0\v'0.6m'\h'|\\n:u'
.ds , \k:\h'\w'c'u*0.4u'\z,\h'|\\n:u'
.TH PPC 1 "SYNTAX\*R"
.SH NAME
ppc \- pretty printer for programs written in C.
.SH SYNOPSIS
.na
.in +\w'\fBppc\fP 'u
.ti -\w'\fBppc\fP 'u
.B ppc
[\|\fB\-style\fP\ \fInnn\fP\|]
[\|\fB\-v\fP\|] [\|\fB\-nv\fP\|]
[\|\fB\-of\fP\ \fIoutput_file\fP\|] [\|\fB\-nof\fP\|]
[\|\fB\-T\fP\ \fIname\fP\|]
[\|\fB\-d\fP\ \fIpath\fP\|]
[\|\fB\-kwlc\fP\|]
[\|\fB\-kwuc\fP\|]
[\|\fB\-kwci\fP\|]
[\|\fB\-kwdk\fP\|] [\|\fB\-nkwdk\fP\|]
[\|\fB\-ll\fP\ \fInnn\fP\|]
[\|\fB\-mm\fP\ \fInnn\fP\|]
[\|\fB\-sm\fP\|] [\|\fB\-nsm\fP\|]
[\|\fB\-tabs\fP\|] [\|\fB\-notabs\fP\|]
[\|\fB\-every\fP\ \fInnn\fP\|]\ .\|.\|.
[\|\fIinput_files\fP\|]
.ad
.SH DESCRIPTION
.I ppc
checks the syntax of and pretty prints C programs found in
.IR input_files .
.LP
If no
.I input_files
argument is present, the standard input is read and the pretty printed
program is written on the standard output.
Otherwise, each
.I input_file
is analysed and, under default options, the corresponding
pretty printed program is written on the same file if no error occurs.
.SH OPTIONS
.LP
Options may appear in any order as long as they appear
.B before
the
.IR input_files .
Only the
.B last
occurrence of a given option is taken into account.
Default options are such that the command
.ti +4n
\fBppc\fP
.br
is equivalent to
.ti +4n
\fBppc \-style 1 \-v \-kwlc \-nkwdk \-ll 122 \-mm 60 \-sm
.if t .ig ZZ
\\
.ti +\w'nnnnppc 'u
.ZZ
\-tabs \-every 8 \-d ${HOME} \-d .\fP
.TP
\fB\-style\fP \fInnn\fP
Use output style
.IR nnn .
Styles are not easy to describe in a few words, so the user is urged to
try them all.
Style 1 is at the moment the author's preferred one\|; style 2 is intended
for the nostalgics of usual Pascal styles (matching
.BR { " and " }
are lined up, each on its own line)\|; fervent readers of PCC source code
may want to use style 3.
(Default\|:
.I nnn
= 1)
.TP
.BR \-v ", " \-verbose
Animate the user's screen by displaying cryptic information.
(Default)
.TP
.BR \-nv ", " \-noverbose
Execute silently.
.TP
\fB\-of\fP \fIoutput_file\fP, \fB\-output_file\fP \fIoutput_file\fP
Redirect program output.
The default behaviour is to overwrite each
.IR input_file ,
or, if none is given, to write on the standard output.
Note that this option should usually be regarded as a debugging option,
as only the last pretty printed program will be found in
.IR output_file .
.TP
.BR \-nof ", " \-nooutput_file
Redirect program output to the standard output.
This is the default option when input is done from the
standard input.
.TP
\fB\-T\fP \fIname\fP, \fB\-TYPE\fP \fIname\fP
Add
.I name
to the list of type key-words.
You need to specify all the names that
appear in your program as type names \(em whether they be defined by
.BR typedef s
or by
.B #define
macros \(em\|;
if you do not, an error message will be output for each occurrence of
such a type name.
As some have already put it,
``This sounds like a painful thing to have to do, but it\'s really
a symptom of a problem in C\|: \fBtypedef\fP causes a syntactic
change in the language\ .\|.\|.''\|;
furthermore \fIppc\fP is neither the C preprocessor nor a C compiler,
so it cannot do replacement on your text as they do.
.TP
\fB\-d\fP \fIpath\fP, \fB\-directory\fP \fIpath\fP
Immediately analyse the options file
\fIpath\fP\fB/.ppcrc\fP,
if that file exists (the directory itself must exist).
.TP
.BR \-kwlc ", " \-key_words_in_lower_case
Pretty print C key-words in lower case letters\|;
excludes -kwuc and -kwci.
(Default)
.TP
.BR \-kwuc ", " \-key_words_in_upper_case
Pretty print C key-words in upper case letters\|;
excludes -kwlc and -kwci.
This option should not be used if the resulting program
is intended to be compiled, as C key-words must be lower
case to be recognised.
.TP
.BR \-kwci ", " \-key_words_capitalised_initial
Pretty print C key-words with each leading letter capitalised
and the others written in lower case\|;
excludes -kwuc and -kwlc.
This option should not be used if the resulting program
is intended to be compiled, as C key-words must be lower
case to be recognised.
.TP
.BR \-kwdk ", " \-key_words_in_dark
Attempt to make C key-words look darker than rest of text
when displayed on a printer, by overstriking each letter
twice (using backspaces).
This option should not be used if the resulting program
is intended to be compiled, as C key-words will no longer
be recognised by any C compiler.
.TP
.BR \-nkwdk ", " \-nokey_words_in_dark
Do not artificially embolden C key-words.
(Default)
.TP
\fB\-ll\fP \fInnn\fP, \fB\-line_length\fP \fInnn\fP
Define the maximum length of an output line to be
.IR nnn .
(Default\|:
.I nnn
= 122)
.TP
\fB\-mm\fP \fInnn\fP, \fB\-max_margin\fP \fInnn\fP
Specify that no output line should begin after column
.IR nnn .
That value must be less than the line length.
(Default\|:
.I nnn
= 60)
.TP
.BR \-sm ", " \-shift_margin
Specify that when an output line should begin after the column
defined by the
.B \-mm
option, it is to be indented to the left, in order to preserve
the structure of the program (more on this later).
(Default)
.TP
.BR \-nsm ", " \-noshift_margin
Specify that when an output line should begin after the column
defined by the
.B \-mm
option, it is to be output beginning in that column.
.TP
.B \-tabs
Replace sequences of spaces by tabulation characters wherever possible
outside strings and comments.
(Default)
.TP
.B \-notabs
Do not produce tabulation characters.
.TP
\fB\-every\fP \fInnn\fP
Define the number of columns between two tabulation positions to be
.IR nnn .
(Default\|:
.I nnn
= 8)
.SH "FURTHER DESCRIPTION"
.LP
You may set up your own default options by creating a file
named
.B .ppcrc
in your home directory, and including whatever options you like.
You may also add further default options related to the C programs
residing in the current directory by creating a
.B .ppcrc
file there also.
Both your home and the current directory are always searched,
in that order, for options files.
This search occurs before any command line option analysis,
and thus cannot be skipped.
You may also specify other directories to be searched by using the
.B \-directory
option, in options files as well as on the command line.
The options must be separated by white space or comments\|;
a comment begins with a sharp character (`#'), either at the
beginning of a line or preceded by a tabulation character,
and ends with the line.
.LP
.B "Preprocessor lines"
.br
Any line that begins with a sharp character is left alone, as
it is considered to be a comment.
No attempt is made to understand conditional compilation nor
to cope with syntactic variations introduced by the use of macros.
For example, the text \`\`\fLforever\ {call\ proc}\fR\'\'
will give rise to a (im)pertinent error message, regardless of what
this would be expanded into\|.\|.\|. (\`\`\fLforever\fR\'\' might expand
to \`\`\fLfor\ (;;)\fR\'\', \`\`\fLcall\fR\'\' to nothing,
and \`\`\fLproc\fR\'\' to \`\`\fLfunc\ ();\fR\'\', for example)
.LP
.B "Line splitting"
.br
As all indenters, formatters, pretty-printers and other beautifiers,
.I ppc
has to meet the problem of physically bounded lines.
The currently implemented way of resolving that stupid limitation (see 
.BR sxppp (3))
is to put on a fresh line, indented by five spaces,
the first lexical unit which cannot be output on the current line.
This is not deemed to be satisfactory, and a new strategy is under
study...
Please come back later if you do not like the way your program has
been laid out!
.LP
.B "Indentation restriction"
.br
In order to minimise the effect of line splitting,
.I ppc
arbitrarily refuses to indent lines past a given column (defined by the
.B \-max_margin
option).
Its behaviour on a line which should begin far to the right of the page
is governed by the
.B \-shift_margin
option\|:
when this option is set, such a line is shifted to the left, and the
program text keeps its structure\|;
when the
.B \-noshift_margin
option is in effect, the line is simply output beginning at the
.I max_margin
column.
As a picture is always better than a long digression, here comes
an example...
.ne 8
Suppose you have the following program fragment deeply nested in your text\|:
.ft L
.nf
.ta \w'else'u +\w'else'u +\w'else'u +\w'else'u +\w'else'u +\w'else'u

	if (conditional) {
		initialisations ();

		if (other_conditional) {
			do_work (some, arguments);
		}
.ne 3
		else
			do {
				if (nested_conditional) {
					do_complex_work (other, parameters);
.ne 3
				}
			} while (!finished);
	}
.ft R
.fi

.ne 8
Not shifting the margin might produce something like this\|:
.ft L
.nf

			if (conditional) {
				initialisations ();

				if (other_conditional) {
					do_work (some, arguments);
				}
				else
.ne 7
					do {
					if (nested_conditional) {
					do_complex_work (other,
						 parameters);
					}
					} while (!finished);
			}
.ft R
.fi

.ne 8
Shifting the margin would produce this kind of result\|:
.ft L
.nf

			if (conditional) {
				initialisations ();

				if (other_conditional) {
					do_work (some, arguments);
				}
				else
.ne 6
					do {
if (nested_conditional) {
	do_complex_work (other, parameters);
}
					} while (!finished);
			}
.ft R
.fi

Choosing what to do here is mainly a matter of taste.
Note that if you give to
.B \-max_margin
the same value as the one you give to
.BR \-line_length ,
only the process of line splitting as described earlier
will be in effect.
.SH FILES
.nf
.ta \w'/tmp/ppc*  'u
~/.ppcrc	personal options file
\&./.ppcrc	options file
/dev/tty	for \fIverbose\fP output
/tmp/ppc*	temporary output file
/tmp/sx*	scratch files
.SH "SEE ALSO"
The
.I SYNTAX Reference Manual
and the INRIA Report #455 entitled
.IR "Paradis, un Syst\*`eme de Paragraphage Dirig\*'e par la Syntaxe" .
.SH DIAGNOSTICS
When the input program is (syntactically) incorrect, error messages are issued
and, unless the
.B \-nof
option is in effect,
the result is left in the temporary output file.
.LP
Exit status is 0 if everything was all right, 1 if only warnings were issued, 2
if error messages were issued, 3 for command line syntax errors.
.SH BUGS
.I ppc
is implemented using sxppp(3), and so benefits of all its bugs.
.LP
The meaning of a
.B \-directory
option is to immediately replace this option by the contents of
the specified options file, if it exists\|;
thus, recursion between options files leads to a loop, which is
exited (gracefully) only when no more file can be opened by
.IB ppc .
.LP
Exotic options about key words case and emboldening should be
replaced by a
.B \-troff
option.
.\" Local Variables:
.\" mode: nroff
.\" version-control: yes
.\" End:
