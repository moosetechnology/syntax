% RCGs CAN COUNT...

% $L_k = \set{a^p b^q \mid p>=2 \in Prime \wedge q^2 < p^k}$

% Idee: on calcule $q^2$ en base $p$ sur $k$ chiffres
% Si $w=a^p b^q$, et si $q^2 < p^k$ on va montrer que
% $S(\range{0}{p+q}) \Der{+}{w,G} N(\rho_1, ...,\rho_k, ...) \Der{}{w,G} \varepsilon$
% where $(\rho_1, ...,\rho_k)$ is a denotation of $q^2$ in base $p$: each digit $d$ in the base $p$ 
% is coded by a range whose size is the number, a denotation of which in base $p$ is $d$.  I.e., if
% $(d)_p=8$, any range $\range{i}{i+8}$ is a denotation for the digit $d$.

% Il est bien connu que les formalismes syntaxiques ne savent pas compter.
% Il est facile de faire compter les RCG entre 0 et $n$ en utilisant le texte source
% On va montrer qu'avec un source de taille $n=p+q$, on peut "compter" au dela de $n$

% Cette partie est un reconnaisseur, seul Count-Result qui imprime le codage de q^2 en base p sur k chiffres
% est un parser

% Temps d'analyse lineaire en n=p+q si on ne force pas p a etre premier


% On traite L_4

% epsilon, b+ et ab* sont faux!
S(a a W)				--> ApBq(W,a a W) .

ApBq(a X,W)				--> ApBq(X,W) .
ApBq(b Q,W)				--> Ap_Bq(b Q,W) .
ApBq(Q,W)				--> &StrLen(0, Q) Ap_Bq(Q,W) .

Ap_Bq(Q,P X Q)				--> &StrLen(0, X) Bstar(Q) Prime(P) QInBaseP(X,X,X,X,P,Q,Q) .

Bstar(b Q) 				--> Bstar(Q) .
Bstar() 				--> .

Prime(X)				--> . % Pour le moment...

% On code Q en base P sur 4 chiffres
% On decoupe le block des "b" par tranches de taille p.  Chaque tranche de taille p cause
% l'ajout d'une unite ds la tranche des "dizaines" (K1)
QInBaseP(K3,K2,K1,K0,P a K1,Q Q0,W)	--> !&StrLen(0, P) &StrEqLen(P a K1, Q0) QInBaseP(K3,K2,a K1,K0,P a K1,Q,W) .
% Le chiffre des dizaines est "p-1"
QInBaseP(K3,K2,K1,K0,a K1 X,Q Q0,W)	--> &StrEqLen(a K1, Q0) &StrLen(0, X) Carry2(K3,K2,X,K0,a K1,Q,W) .
% C'est fini
QInBaseP(K3,K2,K1,K0,P P0 X,Q,W)	--> !&StrLen(0, P) &StrEqLen(P0, Q) &StrLen(0, X) 
					    Add(X,X,X,X,K3,K2,K1,P0,P P0,W) .

% retenue sur K2
% |K2|+1 < |P|
Carry2(K3,K2,K1,K0,P0 a K2,Q,W)		--> !&StrLen(0, P0) QInBaseP(K3,a K2,K1,K0,P0 a K2,Q,W) . 
% |K2|+1 == |P|
Carry2(K3,K2,K1,K0,a K2 X,Q,W)		--> &StrLen(0, X) Carry3(K3,X,K1,K0,a K2,Q,W) .

% retenue sur K3
% |K3|+1 < |P|
Carry3(K3,K2,K1,K0,P0 a K3,Q,W)		--> !&StrLen(0, P0) QInBaseP(a K3,K2,K1,K0,P0 a K3,Q,W) .

% On additionne |Q| fois (K3 K2 K1 K0) a` (R3 R2 R1 R0)
Add(R3,R2,R1,R0,K3,K2,K1,K0,P,Q T)	--> &StrLen(1, T) Normalize0(R3,R2,R1,R0,K3,K2,K1,K0,P,Q) .
Add(R3,R2,R1,R0,K3,K2,K1,K0,P,) 	--> &Count_Result(R3,R2,R1,R0,P) .

% Normalisation du chiffre des unites
% |R0|+|K0|<|P|
Normalize0(R3,R2,R1,R0,K3,K2,K1,K0,X0 X1 R0,Q) 	--> &StrEqLen(K0, X1) !&StrLen(0, X0) 
						   Normalize1(R3,R2,R1,X1 R0,K3,K2,K1,K0,X0 X1 R0,Q) .
% |R0|+|K0|>=|P|
Normalize0(R3,R2,R1,X1 X2,K3,K2,K1,K0,P1 P2,Q) 	--> &StrEqLen(K0, P2) &StrEqLen(X1, P1) 
						   Incr1(R3,R2,R1,X2,K3,K2,K1,K0,P1 P2,Q) .

Incr1(R3,R2,R1,R0,K3,K2,K1,K0,P1 a R1,Q)	--> Normalize1(R3,R2,a R1,R0,K3,K2,K1,K0,P1 a R1,Q) .

% Normalisation du chiffre des dizaines
% |R1|+|K1|<|P|
Normalize1(R3,R2,R1,R0,K3,K2,K1,K0,X0 X1 R1,Q) 	--> &StrEqLen(K1, X1) !&StrLen(0, X0) 
						   Normalize2(R3,R2,X1 R1,R0,K3,K2,K1,K0,X0 X1 R1,Q) .
% |R1|+|K1|>=|P|
Normalize1(R3,R2,X1 X2,R0,K3,K2,K1,K0,P1 P2,Q) 	--> &StrEqLen(K1, P2) &StrEqLen(X1, P1) 
						   Incr2(R3,R2,X2,R0,K3,K2,K1,K0,P1 P2,Q) .

Incr2(R3,R2,R1,R0,K3,K2,K1,K0,P1 a R2,Q)	--> Normalize2(R3,a R2,R1,R0,K3,K2,K1,K0,P1 a R2,Q) .

% Normalisation du chiffre des centaines
% |R2|+|K2|<|P|
Normalize2(R3,R2,R1,R0,K3,K2,K1,K0,X0 X1 R2,Q) --> &StrEqLen(K2, X1) !&StrLen(0, X0) 
						   Normalize3(R3,X1 R2,R1,R0,K3,K2,K1,K0,X0 X1 R2,Q) .
% |R2|+|K2|>=|P|
Normalize2(R3,X1 X2,R1,R0,K3,K2,K1,K0,P1 P2,Q) --> &StrEqLen(K2, P2) &StrEqLen(X1, P1) 
						   Incr3(R3,X2,R1,R0,K3,K2,K1,K0,P1 P2,Q) .

Incr3(R3,R2,R1,R0,K3,K2,K1,K0,P1 a R3,Q)	--> Normalize3(a R3,R2,R1,R0,K3,K2,K1,K0,P1 a R3,Q) .

% Normalisation du chiffre des milliers
% |R3|+|K3|<|P|
Normalize3(R3,R2,R1,R0,K3,K2,K1,K0,X0 X1 R3,Q) --> &StrEqLen(K3, X1) !&StrLen(0, X0) 
						   Add(X1 R3,R2,R1,R0,K3,K2,K1,K0,X0 X1 R3,Q) .
% |R2|+|K2|>=|P|
% Echec

