<L>			= !first_pass <T*> ;
<L>			= <DECL*>
			  <LABEL_STMT*> ;

<T*>			= <T*> <T> ;
<T*>			= ;

* @16 : Compte le nombre de blocs
<T>			= { @16 ;
* @17 : Memorise les ste des etiquettes
<T>			= : @17 ;
* @18 : Decompte le nombre de blocs
<T>			= } @18 ;
<T>			= %id ;
<T>			= %int ;
<T>			= ! ;
<T>			= "&" ;
<T>			= ( ;
<T>			= ) ;
<T>			= , ;
<T>			= ";" ;
<T>			= = ;
<T>			= [ ;
<T>			= ] ;
<T>			= . ;
<T>			= add_op ;
<T>			= bool ;
<T>			= comp_op ;
<T>			= cons ;
<T>			= do ;
<T>			= else ;
<T>			= false ;
<T>			= goto ;
<T>			= if ;
<T>			= infix ;
<T>			= int ;
<T>			= left ;
<T>			= listof ;
<T>			= mul_op ;
<T>			= nonassoc ;
<T>			= postfix ;
<T>			= prefix ;
<T>			= record ;
<T>			= right ;
<T>			= subtype ;
<T>			= tail ;
<T>			= then ;
<T>			= true ;
<T>			= with ;
<T>			= | ;

<DECL*>			= ;
<DECL*>			= <DECL*>
			  <DECL> ;

* @3 : Memorisation de type_name, listof_level
<DECL>			= <TYPE_NAME> @3 <DECLARATOR+> ";" ;
<DECL>			= subtype <BASIC_TYPE_NAME> @3 <SUBTYPE_NAME+> ";" ;
<DECL>			= record @19 %id 
			     { @23
			        <OBJECT_DECL+>
			     } @24 ";" ;
* @19 : memorisation de "recordtype-name" et generation immediate (ca permet de le
*       referencer recursivement) de :
*<BASIC_TYPE_NAME>	= recordtype_name ;
*
*<RECORDTYPE_VAR>	= <RECORDTYPE_LHS> ;
*<RECORDTYPE_VAR>	= <RECORDTYPE_FUN> ;
*
*<STMT>			= <RECORDTYPE_LHS>  "="  <RECORDTYPE_VAR> ";" ;
*<STMT>			= with <RECORDTYPE_LHS> do @20 <STMT> @21 ;
*
*<BOOL_EXPR>		= <RECORDTYPE_VAR>  comp_op  <RECORDTYPE_VAR> ;
*
* @20 : Pour toute regle "lhs -> <RECORDTYPE_VAR> . rhs" generee par le traitement
*       de <OBJECT_DECL+> generer la re`gle "lhs -> rhs".
* @21 : Supprimer les re`gles generees par @20

<OBJECT_DECL+>		= <OBJECT_DECL+> <OBJECT_DECL> ;
<OBJECT_DECL+>		= <OBJECT_DECL> ;

<OBJECT_DECL>		= <TYPE_NAME> @3 <LHS_DECLARATOR+> ";" ;

<LHS_DECLARATOR+>	= <LHS_DECLARATOR+> , @4 <LHS_DECLARATOR> ;
<LHS_DECLARATOR+>	= <LHS_DECLARATOR> ;

<LHS_DECLARATOR>	= %id @6 ;
<LHS_DECLARATOR>	= <ARRAY_DECLARATOR> ;

* @15 : Incrementation de listof_level
<TYPE_NAME>		= listof @15 <TYPE_NAME> ;
<TYPE_NAME>		= <BASIC_TYPE_NAME> ;

<BASIC_TYPE_NAME>	= int ;
<BASIC_TYPE_NAME>	= bool ;

<DECLARATOR+>		= <DECLARATOR+> , @4 <DECLARATOR> ;
<DECLARATOR+>		= <DECLARATOR> ;

* @13 : Generation de :
*<BASIC_TYPE_NAME>	= subtype_name ;
*
*<SUBTYPE_VAR>		= <SUBTYPE_LHS> ;
*<SUBTYPE_VAR>		= <SUBTYPE_FUN> ;
*
*<FATHER_TYPE_VAR>	= <SUBTYPE_VAR> ;
*
*<STMT>			= <SUBTYPE_LHS>  "="  <SUBTYPE_EXPR> ";" ;
*
*Si "SUBTYPE" derive de "int" (et non de "bool")
*<BOOL_EXPR>		= <SUBTYPE_EXPR> comp_op <SUBTYPE_EXPR> ;
*
*<SUBTYPE_EXPR>		= <SUBTYPE_EXPR> add_op <SUBTYPE_EXPR> ;
*<SUBTYPE_EXPR>		= <SUBTYPE_EXPR> mul_op <SUBTYPE_EXPR> ;
*<SUBTYPE_EXPR>		= add_op <SUBTYPE_EXPR> ;
*<SUBTYPE_EXPR>		= <SUBTYPE_PRIMARY> ;
*
*<SUBTYPE_PRIMARY>	= <SEED_TYPE_CONST> ;
*<SUBTYPE_PRIMARY>	= <SUBTYPE_VAR> ;
*<SUBTYPE_PRIMARY>	= ( <SUBTYPE_EXPR> ) ;
*<SUBTYPE_PRIMARY>	= ( subtype_name ) <SEED_TYPE_PRIMARY> ;
*
*<FATHER+_TYPE_PRIMARY>	= ( subtype_name ) <SEED_TYPE_PRIMARY> ;
*
<SUBTYPE_NAME+>		= <SUBTYPE_NAME+> , %id @13 ;
<SUBTYPE_NAME+>		= %id @13 ;

* Le nom est effectif a la fin de la declaration
* @6 : Generation de la production
<DECLARATOR>		= %id @6 ;
<DECLARATOR>		= <ARRAY_DECLARATOR> ;
<DECLARATOR>		= <PROFILE> ;
<DECLARATOR>		= <PROFILE> <DYNAM_OPER> ;

<ARRAY_DECLARATOR>	= %id  [ <INT_EXPR+> ] @12 ;

* @5 : Memorisation de [ <INT_EXPR> ]
<INT_EXPR+>		= <INT_EXPR+> ,  <INT_EXPR> @5 ;
<INT_EXPR+>		= <INT_EXPR> @5 ;

* @7 : Memorisation de (
* @8 : Memorisation de ) et generation des appels de fonction
<PROFILE>		= %id  ( @7 <TYPE_NAME*> ) @8 ;

<TYPE_NAME*>		= ;
<TYPE_NAME*>		= <TYPE_NAME+> ;

<TYPE_NAME+>		= <TYPE_NAME+> ,  <TYPE_NAME> @9 ;
<TYPE_NAME+>		= <TYPE_NAME> @10 ;

* @11 : Generation d'une des regles
*	<[INT|BOOL]_EXPR> = <[INT|BOOL]_EXPR> opname <[INT|BOOL]_EXPR> ;
*	<[INT|BOOL]_EXPR> = opname <[INT|BOOL]_EXPR> ;
*	<[INT|BOOL]_EXPR> = <[INT|BOOL]_EXPR> opname ;
<DYNAM_OPER>		= ( <DYNOP_PRIO> , <DYNOP_CLASS> , <DYNOP_ASSOC> @11 ) ;

<DYNOP_PRIO>		= %int ;

<DYNOP_CLASS>		= prefix ;
<DYNOP_CLASS>		= infix ;
<DYNOP_CLASS>		= postfix ;

<DYNOP_ASSOC>		= left ;
<DYNOP_ASSOC>		= right ;
<DYNOP_ASSOC>		= nonassoc ;

<LABEL_STMT*>		= ;
<LABEL_STMT*>		= <LABEL_STMT*>
			  <LABEL_STMT> ;

* @14 : Supprime la regle definissant <LABEL>
<LABEL_STMT>		= <LABEL> @14 <LABEL_STMT> ;
<LABEL_STMT>		= <STMT> ;

<STMT>			= ";" ;
<STMT>			= <INT_LHS>  "="  <INT_EXPR> ";" ;
<STMT>			= <BOOL_LHS>  "="  <BOOL_EXPR> ";" ;
<STMT>			= if  <BOOL_EXPR>
			     then  <LABEL_STMT>
			     else  <LABEL_STMT> ;
<STMT>			= <BLOCK> ;

* Pour avoir une grammaire propre (pour l'instant)
<LABEL>			= !label ;

* Pour lecl, on ajoute %id de facon que les suivants de <INT_LHS>, <BOOL_LHS>
*    soient pris en compte dans le ctxt droit de %id (sinon par exemple toto=...
*    produit Warning: The invalid character "=" is deleted.).
* Ca pourrait etre supprime' du fait de l'adjonction de <T*>
<INT_LHS>		= !int %id ;
<INT_FUN>		= !fint ;

* cons et tail sont des mots-cles reserves (meme s'il n'y a pas de liste)
<BOOL_LHS>		= !bool cons ( ;
<BOOL_FUN>		= !fbool tail ( ;

* Texte source de L.prio

*%left add_op |						=> prio == 100
*%left mul_op "&"					=> prio == 200
*%right !						=> prio == 300
*%nonassoc comp_op					=> prio == 400

*<INT_EXPR>		= add_op <INT_EXPR> ; %prec !	=> prio == 300

<INT_EXPR>		= <INT_EXPR> add_op <INT_EXPR> ;
<INT_EXPR>		= <INT_EXPR> mul_op <INT_EXPR> ;
<INT_EXPR>		= add_op <INT_EXPR> ;
<INT_EXPR>		= <INT_PRIMARY> ;

<INT_PRIMARY>		= <INT_CONST> ;
<INT_PRIMARY>		= <INT_VAR> ;
<INT_PRIMARY>		= ( <INT_EXPR> ) ;
<INT_PRIMARY>		= ( int ) <INT_PRIMARY> ;

<INT_VAR>		= <INT_LHS> ;
<INT_VAR>		= <INT_FUN> ;

<INT_CONST>		= %int ;

<BOOL_EXPR>		= <BOOL_EXPR> | <BOOL_EXPR> ;
<BOOL_EXPR>		= <BOOL_EXPR> "&" <BOOL_EXPR> ;
<BOOL_EXPR>		= <INT_EXPR>  comp_op  <INT_EXPR> ;
<BOOL_EXPR>		= ! <BOOL_EXPR> ;
<BOOL_EXPR>		= <BOOL_PRIMARY> ;

<BOOL_PRIMARY>		= <BOOL_CONST> ;
<BOOL_PRIMARY>		= <BOOL_VAR> ;
<BOOL_PRIMARY>		= ( <BOOL_EXPR> ) ;
<BOOL_PRIMARY>		= ( bool ) <BOOL_PRIMARY> ;

<BOOL_VAR>		= <BOOL_LHS> ;
<BOOL_VAR>		= <BOOL_FUN> ;

<BOOL_CONST>		= true ;
<BOOL_CONST>		= false ;

* @1 : Entree de block
* @2 : Sortie de block
<BLOCK>			= { @1
				<DECL*>
				<LABEL_STMT*>
			  } @2 ;

* Si on a le texte source :
* ... subtype int short; ...
* On cree :
*<BASIC_TYPE_NAME>	= short ;
*
*<SHORT_VAR>		= <SHORT_LHS> ;
*<SHORT_VAR>		= <SHORT_FUN> ;
*
*<INT_VAR>		= <SHORT_VAR> ;
*
*<STMT>			= <SHORT_LHS>  "="  <SHORT_EXPR> ";" ;
*
*<BOOL_EXPR>		= <SHORT_EXPR> add_op <SHORT_EXPR> ;
*
*<SHORT_EXPR>		= <SHORT_EXPR> add_op <SHORT_EXPR> ;
*<SHORT_EXPR>		= <SHORT_EXPR> mul_op <SHORT_EXPR> ;
*<SHORT_EXPR>		= add_op <SHORT_EXPR> ;
*<SHORT_EXPR>		= <SHORT_PRIMARY> ;
*
*<SHORT_PRIMARY>	= <INT_CONST> ;
*<SHORT_PRIMARY>	= <SHORT_VAR> ;
*<SHORT_PRIMARY>	= ( <SHORT_EXPR> ) ;
*<SHORT_PRIMARY>	= ( short ) <INT_PRIMARY> ;
*
*<INT_PRIMARY>		= ( short ) <INT_PRIMARY> ;
*
** sur : "short petit_entier, fun (short) , t [2];"
** on cree :
*<SHORT_LHS> = petit_entier ;
*
*<SHORT_FUN> = fun ( <SHORT_EXPR> ) ;
*
*<SHORT_LHS> = t [ <INT_EXPR> ] ;

* Si on a le texte source :
* ... (listof)n TYPE l; ...
* On cree (si ca n'existe pas deja) :
*<LISTOFn_TYPE>		= ( ) ;
*<LISTOFn_TYPE>		= cons ( <LISTOFn-1_TYPE> , <LISTOFn_TYPE> ) ;
*<LISTOFn_TYPE>		= tail ( <LISTOFn_TYPE> ) ;
*<LISTOFn_TYPE>		= <LISTOFn_TYPE_VAR> ;
*	   
*<LISTOFn_TYPE_VAR>	= <LISTOFn_TYPE_LHS> ;
*
*<LISTOFn_TYPE_VAR>	= <LISTOFn_TYPE_FUN> ;
*	   
*<STMT>			= <LISTOFn_TYPE_LHS>  "="  <LISTOFn_TYPE> ";" ;
*
*<BOOL_EXPR>		= <LISTOFn_TYPE>  comp_op  <LISTOFn_TYPE> ;
*
