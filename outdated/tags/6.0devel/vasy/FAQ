
-------------------------------------------------------------------------------

QUESTION [Yves Guerte - Tue, 15 May 2007 13:58:58 +0200]

      tabc fait une *erreur* (et s'arrête) lorsque des symboles non terminaux ne
      sont pas atteignables (message d'erreur dans le fichier simproc.bn.l généré).
      Un *warning* serait plus pratique : pour débugger une grosse grammaire, on
      peut vouloir la couper en remplaçant une partie droite de règle par une
      chaîne constante.

      Exemple de fichier .tabc sur lequel tabc s'arrête sur une erreur :

    $TABC_PROGRAM (<BNF_PROGRAM>) : C_TYPE_BLOC ;
    $TABC_BLOCK (<BNF_BLOCK>) : C_TYPE_BLOC ;
    .....
    *==========================================================================
    <BNF_PROGRAM>    = <BNF_BLOCK> ;

    $TABC_PROGRAM (<BNF_PROGRAM>)
        $TABC_PROGRAM (<BNF_PROGRAM>) = $TABC_BLOCK (<BNF_BLOCK>) ;
        ROOT_BLOCK = $TABC_BLOCK (<BNF_BLOCK>) ;
    *==========================================================================
    <BNF_BLOCK>    = "DEBUG" ;

    $TABC_BLOCK (<BNF_BLOCK>)
        $TABC_BLOCK (<BNF_BLOCK>) = 0 ;
    *==========================================================================

REPONSE [Pierre Boullier]

     Les outils tabc, bnf, semat, semact, ... supposent que la grammaire est
     réduite (propre) et ils le vérifient avant de poursuivre leur travail.

     Je rappelle qu'il est possible (et souhaitable en période de construction de la
    grammaire) de ne passer que bnf sur une grammaire tabc en faisant
        bnf ma_grammaire.tabc.

-------------------------------------------------------------------------------

INFORMATION [Romain Lacroix 03/11/2008 17:16]

J'ai pu constater que les outils Syntax avaient le même comportement une fois que j'ai activé les variables suivantes :

MallocScribble=1
MallocPreScribble=1
MallocStackLogging=1
MallocCheckHeapEach=1000
MallocCheckHeapStart=1000
MallocGuardEdges=1

J'ai essayé dans un premier temps de positionner ces variables dans le terminal qui appellait le processus hypergenese, mais ca ne fonctionnait pas. Nous avons enquêté avec l'aide de Wendelin pour conclure que

   - "make -f hypergenese" fait à la fois la génération du code source de Syntax et sa compilation
   - le programme "as" (de gcc) semble ne pas fonctionner correctement quand on active MallocScribble

Plus précisément, lors de la compilation du programme lecl, as dit les messages suivants si on active MallocScribble:

/var/tmp//cc5YgCKd.s:3229:section difference divide by two expression, "L_fsa_trans$non_lazy_ptr" minus "L00000000017$pb" divide by 2 will not produce an assembly time constant

(message répété de nombreuses fois, la partie "L_fsa_trans$non_lazy_ptr" est remplacée par une autre variable à chaque fois)

Toutefois, la compilation se termine sans erreurs, mais les programmes produits ainsi ne sont pas corrects (ils n'arrivent plus à bootstrapper Syntax).

Pour contourner ce problème, nous avons positionné les variables MallocScribble et autre dans les wrappers des outils Syntax plutôt que pour tout le terminal qui appelle les outils Syntax puis la compilation. On peut les utiliser avec l'une de ces 2 manières, au choix :

- avec vasymake :
	make -f vasy/vasymake mallocdebug

- manuellement :
	export MALLOC_DEBUG=1
	make -f hypergenese nickel chrome 

En conclusion, je pense que Syntax est compatible avec les options de type MallocScribble.

-------------------------------------------------------------------------------

INFORMATION [Romain Lacroix 09/12/2008 12:18]

Question : Comment vérifier si une variante de libsx.a contient des symboles non résolus ?

Réponse : Il existe maintenant trunk/vasy/build-unresolved-symbols-list.sh, qui
est compatible Solaris, Linux, Vasy et Atoll. Il se lance de la facon suivante :

    cd trunk
    ./vasy/build-unresolved-symbols-list.sh lib/libsx6.0b5.a
    ./vasy/build-unresolved-symbols-list.sh lib/libsxdet.6.0b5.a

Pour VASY, il faut remplacer lib/libsx6... par lib.$ARCH/libsx6...

Il doit afficher la liste des symboles non resolus dans chaque lib. Nous l'avons
testé sous Solaris et Linux, mais pas sous MacOS X.

-------------------------------------------------------------------------------

