.\" @(#)sxscanner.3	- SYNTAX [unix] - 4 mai 1988
.TH SXSCANNER 3 "SYNTAX\[rg]"
.SH NAME
sxscanner,
sxscan_it,
check_keyword,
sxsrecovery,
sxssrecovery,
SCAN_LA_P,
SCAN_CURRENT_CHAR,
sxttext,
sxeof_code,
sxnextsyno,
sxkeywordp,
sxgenericp,
sxsource_coord,
sxtoken,
lv_s,
lv,
sxsvar
\- scanner for SYNTAX.
.SH SYNOPSIS
\fB
.nf
#include "sxunix.h"

struct sxtables  sxtables\|;

SXVOID sxscanner (what, tables)
.ta \w'SXVOI'u +\w'struct sxtables 'u
	int	what\|;
	struct sxtables	*sxtables\|;

VOID sxscan_it ()

int sxcheck_keyword (string, length)
.ta \w'int'u +\w'char 'u
	char	*string\|;
	int	length\|;

SXBOOLEAN sxsrecovery (what, state_no, class)
.ta \w'SXBOO'u +\w'unsigned char 'u
	int	what,
		state_no\|;
	unsigned char	*class\|;

SXBOOLEAN sxssrecovery (what, state_no, class)
.ta \w'SXBOO'u +\w'unsigned char 'u
	int	what,
		state_no\|;
	unsigned char	*class\|;

.fi
.SH DESCRIPTION
The
.B scanner
is the module which performs the lexical analysis of source texts in the
.B SYNTAX
system.
The
.B parser
calls it each time a new lexical token is needed (see \fBsxparser\fP(3)).
A token is described by a set of variables which are put together in a
structure called \fBsxtoken\fP.
Some of the scanner local variables (including sxtoken) are gathered in a
structure called \fBsxsvar\fP.
This structure achieved two different purposes: first it contains the
variables which are pertinent from the user's actions and predicates point
of view (see the \fISYNTAX Reference Manual\fP)\|; second, all these
variables must be saved (and restore) by the user when switching between
different (or even recursive) scanners.
Moreover this module provides a set of procedures and macros which operates
on these variables.
These structures and macros are declared in the include file
.BR sxunix.h \|;
with declarations close to the following\|:
.nf

.ta \w'\fBstr\fP'u +\w'\fBunsigned\fP \fBlong\fP 'u +\w'*file_name 'u +\w'/* column_number 'u
\fBstruct\fP sxsource_coord {
	\fBchar\fP	*file_name	/* file name	*/\|;
	\fBunsigned\fP \fBlong\fP	 line	/* line number	*/\|;
	\fBunsigned\fP \fBint\fP	 column	/* column number	*/\|;
	}\|;

.fi
.I sxsource_coord
is a structure which contains the coordinates of a character in a source file:
.I file_name
is the source file name,
.I line
and
.I column
are the positions of the character in the source file.
.nf

.ta \w'\fBstr\fP'u +\w'\fBstruct\fP sxsource_coord 'u +\w' string_table_entry 'u +\w'/* source coordinates 'u
\fBstruct\fP sxtoken {
	\fBint\fP	 lahead	/* token code	*/\|;
	\fBunsigned int\fP	 string_table_entry	/* string table index	*/\|;
	\fBstruct\fP sxsource_coord	 source_index	/* source coordinates	*/\|;
	\fBchar\fP	*comment	/* comment	*/\|;
	}\|;

.fi
.I sxtoken
is a structure which contains information about a terminal token:
.I lahead
is the internal code of the token,
.I string_table_entry
is an index to its character string representation (see \fBsxstrmngr\fP(3)),
.I source_index
is the source coordinates of its first character and
.I comment
is a (possibly NULL) pointer to a character string which is the catenation
of the kept portions (see operator "-" of the chapter on \fIlecl\fP in the
\fISYNTAX reference manual\fP) of the comments 
.B preceeding
the token.
.LP
For internal reasons the scanner local variables are separated in two
structures \fIlv\fP and \fIlv_s\fP.
.nf

.ta \w'\fBstr\fP'u +\w'\fBunsigned\fP \fBlong\fP 'u +\w'*token_string 'u +\w'/* size of token string buffer 'u
\fBstruct\fP lv_s {
	\fBlong\fP	*counters	/* size = S_counters_size	*/\|;
	\fBint\fP	 include_no	/* include number	*/\|;
	\fBint\fP	 ts_lgth_use	/* size of token string buffer	*/\|;
	\fBchar\fP	*token_string	/* token string buffer	*/\|;
	}\|;

.fi
The
.I lv_s
structure contains a part of the scanner local variables: the long integers
of the array
.I counters
are manipulated via the "@Set", "@Reset", "@Incr" and "@Decr"
actions and tested via the "&Is_Set" and "&Is_Reset" predicates.
The counter numbered n can be accessed by sxsvar.lv_s.counters [n].
.I include_no
is the current include number (0 for "main" source text).
.I ts_lgth_use
is the current maximum size of the buffer
.I token_string
which contains the string of the
characters which have been kept (according the lexical specification) since
the beginning of the current scanner call.
.nf

.ta \w'\fBstr\fP'u +\w'\fBstruct\fP sxtoken 'u +\w'current_state_no 'u +\w'/* terminal token structure 'u
\fBstruct\fP lv {
	\fBint\fP	ts_lgth	/* token string size	*/\|;
	\fBint\fP	current_state_no	/* scanner state number	*/\|;
	\fBstruct\fP sxtoken	terminal_token	/* terminal token structure	*/\|;
	\fBunsigned\fP \fBchar\fP	source_class	/* current source class	*/\|;
	\fBint\fP	include_action	/* include post action	*/\|;
	\fBSXSHORT\fP	previous_char	/* before the current token	*/\|;
.ta \w'\fBstr\fP'u +\w'\fBstr\fP'u +\w'\fBstruct\fP sxsource_coord 'u +\w'/* before the marked character 'u
	\fBstruct\fP mark {	/* "@Mark" processing		*/
		\fBstruct\fP sxsource_coord	source_coord
			/* source coordinates	*/\|;
		\fBint\fP	index
			/* token string index	*/\|;
		\fBSXSHORT\fP	previous_char
			/* before the marked character	*/\|;
		} mark\|;
	}\|;

.fi
The
.I lv
structure contains the other part of the scanner local variables:
.I ts_lgth
is the number of characters in
.I lv_s.token_string.
.I current_state_no
is the current state of the scanner, mainly used in a predicate via the 
.B SCAN_LA_P
macro to know if the current character has been read in look-ahead.
.I terminal_token
is the interface between the scanner and the parser.
All these informations
are only pertinent in a post action, however
.I lv.terminal_token.source_index
is always valid and
.I lv.terminal_token.comment
is valid when used in a terminal token recognition.
.I source_class
and
.I include_action
are not pertinent to the user.
.I previous_char
is the character before the first character of the current token.
.I mark
is a structure which contains the informations which are kept by the scanner
on each "@Mark" action.
.nf

.ta \w'\fBstr\fP'u +\w'\fBstruct\fP sxtables 'u +\w'*sxtables 'u +\w'/* local variables (part II) 'u
\fBstruct\fP sxsvar {
	\fBstruct\fP S_tables	 S_tables	/* scanner tables	*/\|;
	\fBstruct\fP lv_s	 lv_s	/* local variables (part I)	*/\|;
	\fBstruct\fP lv	 lv	/* local variables (part II)	*/\|;
	\fBstruct\fP sxtables	*sxtables	/* the whole language tables	*/\|;
	} sxsvar\|;

.fi
.I sxsvar
contains the scanner variables which must
be saved by the user on each recursive call to the scanner.
.I S_tables
are the scanner tables,
.I lv, lv_s
the local scanner variables and
.I sxtables
the pointer to the whole tables of the current language.
.TP
.I sxscanner
is the main entry of the module to be called
for scanning a given source file.
.br
When a new language is going to be processed
the call
.IR sxscanner \|( SXOPEN , \|tables )
opens the tables from the scanner point of view and initialises a part of
\fIsxsvar\fP.
The call
.IR sxscanner \|( SXINIT , \|tables )
initialises the rest of its local variables and read the first character of
the source text.
The call
.IR sxscanner \|( SXACTION , \|tables )
is done by the parser each time it needs a new token\|; this call is
equivalent to
.I sxscan_it().
.IR sxscanner \|( SXCLOSE , \|tables )
terminates all scanning for a given language.
.TP
.IR (*sxsvar.SXS_tables.check_keyword) \|( string , \|length )
if
.I string
of length
.I length
represents a keyword returns its internal code as terminal symbol else 0.
This function can only be used via the current \fIS_tables\fP.
.TP
\fIsxsrecovery\fP and \fIsxssrecovery\fP
are the lexical level error processing modules\|; the first is the standard one
(correction and recovery) while the second is a simplified (hence compact)
version which only deletes the erroneous character.
.TP
.I SXSCAN_LA_P
is a (SXBOOLEAN) macro which may be used in the code of a user's predicate
to know if the current character (i.e. the character of the source text whose
class is associated with the predicate being processed) has been read in look
ahead.
.TP
.I SXCURRENT_SCANNED_CHAR
is a (char) macro which may be used in the code of a user's predicate
to retrieve the current character\|; it uses SXSCAN_LA_P.
.TP
.IR sxttext \|( sxtables , \|look_ahead )
is a macro which expands into a character pointer.
This pointer refers to the name of
the terminal symbol whose internal code is
.I look_ahead
in the language whose tables are
.IR sxtables.
.TP
.IR sxeof_code \|( sxtables )
is a macro which expands into an integer.
This integer is the internal code of the token "End Of File"
in the language whose tables are
.IR sxtables.
.TP
.IR sxnextsyno \|( sxtables , \|look_ahead )
is a macro which expands into a character pointer.
This pointer refers to the name of the
next synonym of
.I look_ahead
in the language whose tables are
.IR sxtables.
.TP
.IR sxkeywordp \|( sxtables , \|look_ahead )
is a macro which expands into a SXBOOLEAN value\|:
SXTRUE if
.I look_ahead
is the code of a keyword in the language whose tables are
.I sxtables
else SXFALSE.
.TP
.IR sxgenericp \|( sxtables , \|look_ahead )
is a macro which expands into a SXBOOLEAN value\|:
SXTRUE if
.I look_ahead
is the code of a generic terminal in the language whose tables are
.I sxtables
else SXFALSE.
.SH "SEE ALSO"
\fBlecl\fP\|(1),
\fBtdef\fP\|(1),
\fBsxunix\fP\|(3),
\fBsxsrcmngr\fP\|(3),
\fBsxparser\fP\|(3)
and the \fISYNTAX Reference Manual\fP.
.SH NOTES
The contents of the structure
.I sxsvar
must be saved and restore by the user when switching
between different scanners.
.\" Local Variables:
.\" mode: nroff
.\" version-control: yes
.\" End:
