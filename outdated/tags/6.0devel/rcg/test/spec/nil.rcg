%
% Exemple d'un langage qui n'est pas un indexed language et qui est un rcl
%
% C'est $L_2 = \set{l^m (c l_m)^{n-1} \mid m \geq 1, n = 2^m}$
% It is an (inside-out) grammar see
% \bibitem[Fischer 68]{Fischer:ieee68}
% Michael J. Fischer.
% \newblock 1968.
% \newblock GRAMMARS WITH MACRO-LIKE PRODUCTIONS.
% \newblock In {\em Proceedings of the ninth Annual IEEE symposium on switching and automata theory}, pages 131--142.
%
% where, on the one hand, it is proved that $L_2$ is not an outside-in grammar, and on the other hand that
% OI grammars and indexed grammars are equivalent.  Thus $L_2$ is not an IL, since it is an RCG (and since
% RCLs are not included in ILs), this shows that RCLs and ILs are such that neither class contains the other.
%
% Moreover, this language can be parsed in linear time.
%

axiome(\l\c)		--> &False () .
axiome(W)		--> A(W,W) .

A(W,l X)		--> A(W,X) .
A(X c Y,c Y)		--> B(X,X,X c Y) .

% Chaque caractere de Z2 est compare une seule fois a un autre caractere => B est lineaire
B(X, T Y, Z1 c Z2)	--> &StrLen(1,T) &StrEq(Z1,Z2) B(X,Y,Z1) .
B(X, ,X)		--> .

%
% $L_1 = \set{(\$w)^{|w|} \mid w in T^* \wedge \$ \not \in T}$
% L_1 n'est pas un IL voir
% \bibitem[Hayashi 73]{Hayashi:RIMS73}
% Takeshi Hayashi.
% \newblock 1973.
% \newblock On Derivation Trees of Indexed Grammars ---An Extension of the $uvwxy$-Theorem---.
% \newblock In {\em Publications of the research institute of mathematical sciences}, Kyoto University, 9,
% pages 61--p2.
%
% Moreover, this language can be parsed in linear time.

axiome(\a\b\c\$)	--> &False () .
axiome($ X)		--> A($ X,X) .
axiome()		--> .

A(X,T Y)		--> &StrLen(1,T) !DOL(T) A(X,Y) .
A($ X $ Y,$ Y)		--> B($ X, X, $ X $ Y) .
A($ X,)			--> B($ X, X, $ X) .

DOL($)			--> .

B(X, T Y,Z1 Z2)		--> &StrLen(1,T) &StrEq(X, Z1) B(X,Y,Z2) .
B(X,,)			--> .


%
% $L_2 = \set{a^{n!} \mid n \geq 1}$
% L_2 n'est pas un IL voir meme article
%

axiome(\a)		--> &False () .
% on devine n = |X| a priori
axiome(X Y)		--> A(X, X Y) .

A(X,Y Z)		--> &StrLen(0,Y) Div(X, Y Z, Y, Y Z) .
A(a,a)			--> .

% Div(X,W,Y,Z) |X| est le diviseur, |Z| est le dividende , W et Y servent a calculer le quotient
Div(X,Y1 T Y2, Y1, Z1 Z2)	--> &StrLen(1,T) &StrEqLen(X,Z1) Div(X,Y1 T Y2, Y1 T, Z2) .
Div(X T, W,Y,)			--> A(X,Y) .

% On peut faire mieux en calculant la longueur de X idee!!
% log2(W,X,Y) calcule ds X un majorant de log2(W)

log2(X T W2,X,Y1 Y2)		--> &StrLen(1,T) &StrEqLen(Y1,Y2) log2(X T W2,X T,Y1) .
log2(X T W2,X,Y1 T2 Y2)		--> &StrLen(1,T) &StrLen(1,T2) &StrEqLen(Y1,Y2) 
				    !StrLen(0,Y1) log2(X T W2,X T,Y1 T2) .
log2(X T W2,X,T2)		--> &StrLen(1,T) &StrLen(1,T2) A(X T, X T W2) .
